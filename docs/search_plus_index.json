{"./":{"url":"./","title":"HOME","keywords":"","body":"每天记录一点点 每天分享一点点 交流邮箱：1044531744@qq.com 性格乐观积极，团队协作能力强，能够快速接受新的知识，对新技术充满兴趣。喜欢结交朋友，并积极为技术社区做贡献。 powered by GitbookUPDATE TIME: 2020-10-31 18:34:18 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"API/":{"url":"API/","title":"API","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/API/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/API/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"API/Api mock website.html":{"url":"API/Api mock website.html","title":"Api mock website","keywords":"","body":"1. 开放API1. 开放API 【1】daimajia提供的干货集中营： http://gank.io/api 举个栗子： Url: http://gank.io/api/data/Android/10/1 【2】github的api： https://api.github.com/ 举个栗子： URL： https://api.github.com/users 【3】鸿洋大神的玩android： http://www.wanandroid.com/blog/show/2 举个栗子： URL： http://www.wanandroid.com/article/list/0/json 【4】新闻类： http://api.komavideo.com/news 举个栗子： URL： http://api.komavideo.com/news 【5】综合类： https://www.apiopen.top 列表 API 举个栗子： URL： http://api.komavideo.com/news 【6】诗词类： http://api.comin.top/staticWeb/api.html powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/API/Api mock website.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/API/Api mock website.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"API/Untitled.html":{"url":"API/Untitled.html","title":"Untitled","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/API/Untitled.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/API/Untitled.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"API/test.html":{"url":"API/test.html","title":"test","keywords":"","body":"1. this is title1. this is title powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/API/test.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/API/test.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"CSS3/":{"url":"CSS3/","title":"CSS3","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/CSS3/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/CSS3/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"CSS3/CSS3 三角形.html":{"url":"CSS3/CSS3 三角形.html","title":"CSS3 三角形","keywords":"","body":"1. CSS3实现三角形2. 45个值得收藏的 CSS 形状2.1. 1.正方形2.2. 2.长方形2.3. 3.圆形2.4. 4.椭圆形2.5. 5.上三角2.6. 6.下三角2.7. 7.左三角2.8. 8.右三角2.9. 9.左上角2.10. 10.右上角2.11. 11.左下角2.12. 12.右下角2.13. 13.箭头2.14. 14.梯形2.15. 15.平行四边形2.16. 16.星星 (6角)2.17. 17.星星 (5角)2.18. 18.五边形2.19. 19.六边形2.20. 20.八边形2.21. 21.爱心2.22. 22.无穷大2.23. 23.菱形2.24. 24.钻石2.25. 25.钻戒2.26. 26.钻石22.27. 27.蛋蛋2.28. 28.吃豆人2.29. 29.对话泡泡2.30. 30. 12点 爆发2.31. 31. 8点 爆发2.32. 32.太极2.33. 33.徽章丝带2.34. 34.太空入侵者（电脑游戏名）2.35. 35.电视2.36. 36.雪佛龙2.37. 37.放大镜2.38. 38.Facebook图标2.39. 39.月亮2.40. 40.旗2.41. 41.圆锥2.42. 42.十字架2.43. 43.根基2.44. 44.指示器2.45. 45.锁1. CSS3实现三角形 /*箭头向上*/ .arrow-up { width:0; height:0; border-left:30px solid transparent; border-right:30px solid transparent; border-bottom:30px solid #fff; } /*箭头向下*/ .arrow-down { width:0; height:0; border-left:20px solid transparent; border-right:20px solid transparent; border-top:20px solid #0066cc; } /*箭头向左*/ .arrow-left { width:0; height:0; border-top:30px solid transparent; border-bottom:30px solid transparent; border-right:30px solid yellow; } /*箭头向右*/ .arrow-right { width:0; height:0; border-top:50px solid transparent; border-bottom: 50px solid transparent; border-left: 50px solid green; } 2. 45个值得收藏的 CSS 形状 程序员 前端 javascript css 2.8k 次阅读 · 读完需要 69 分钟 357 CSS能够生成各种形状。正方形和矩形很容易，因为它们是 web 的自然形状。添加宽度和高度，就得到了所需的精确大小的矩形。添加边框半径，你就可以把这个形状变成圆形，足够多的边框半径，你就可以把这些矩形变成圆形和椭圆形。 我们还可以使用 CSS 伪元素中的 ::before 和 ::after，这为我们提供了向原始元素添加另外两个形状的可能性。通过巧妙地使用定位、转换和许多其他技巧，我们可以只用一个 HTML 元素在 CSS 中创建许多形状。 虽然我们现在大都使用字体图标或者svg图片，似乎使用 CSS 来做图标意义不是很大，但怎么实现这些图标用到的一些技巧及思路是很值得我们的学习。 2.1. 1.正方形 #square { width: 100px; height: 100px; background: red; } 2.2. 2.长方形 #rectangle { width: 200px; height: 100px; background: red; } 2.3. 3.圆形 #circle { width: 100px; height: 100px; background: red; border-radius: 50% } 2.4. 4.椭圆形 #oval { width: 200px; height: 100px; background: red; border-radius: 100px / 50px; } 2.5. 5.上三角 #triangle-up { width: 0; height: 0; border-left: 50px solid transparent; border-right: 50px solid transparent; border-bottom: 100px solid red; } 2.6. 6.下三角 #triangle-down { width: 0; height: 0; border-left: 50px solid transparent; border-right: 50px solid transparent; border-top: 100px solid red; } 2.7. 7.左三角 #triangle-left { width: 0; height: 0; border-top: 50px solid transparent; border-right: 100px solid red; border-bottom: 50px solid transparent; } 2.8. 8.右三角 #triangle-right { width: 0; height: 0; border-top: 50px solid transparent; border-left: 100px solid red; border-bottom: 50px solid transparent; } 2.9. 9.左上角 #triangle-topleft { width: 0; height: 0; border-top: 100px solid red; border-right: 100px solid transparent; } 2.10. 10.右上角 #triangle-topright { width: 0; height: 0; border-top: 100px solid red; border-left: 100px solid transparent; } 2.11. 11.左下角 #triangle-bottomleft { width: 0; height: 0; border-bottom: 100px solid red; border-right: 100px solid transparent; } 2.12. 12.右下角 #triangle-bottomright { width: 0; height: 0; border-bottom: 100px solid red; border-left: 100px solid transparent; } 2.13. 13.箭头 #curvedarrow { position: relative; width: 0; height: 0; border-top: 9px solid transparent; border-right: 9px solid red; transform: rotate(10deg); } #curvedarrow:after { content: \"\"; position: absolute; border: 0 solid transparent; border-top: 3px solid red; border-radius: 20px 0 0 0; top: -12px; left: -9px; width: 12px; height: 12px; transform: rotate(45deg); } 2.14. 14.梯形 #trapezoid { border-bottom: 100px solid red; border-left: 25px solid transparent; border-right: 25px solid transparent; height: 0; width: 100px; } 2.15. 15.平行四边形 #parallelogram { width: 150px; height: 100px; transform: skew(20deg); background: red; } 2.16. 16.星星 (6角) #star-six { width: 0; height: 0; border-left: 50px solid transparent; border-right: 50px solid transparent; border-bottom: 100px solid red; position: relative; } #star-six:after { width: 0; height: 0; border-left: 50px solid transparent; border-right: 50px solid transparent; border-top: 100px solid red; position: absolute; content: \"\"; top: 30px; left: -50px; } 2.17. 17.星星 (5角) #star-five { margin: 50px 0; position: relative; display: block; color: red; width: 0px; height: 0px; border-right: 100px solid transparent; border-bottom: 70px solid red; border-left: 100px solid transparent; transform: rotate(35deg); } #star-five:before { border-bottom: 80px solid red; border-left: 30px solid transparent; border-right: 30px solid transparent; position: absolute; height: 0; width: 0; top: -45px; left: -65px; display: block; content: ''; transform: rotate(-35deg); } #star-five:after { position: absolute; display: block; color: red; top: 3px; left: -105px; width: 0px; height: 0px; border-right: 100px solid transparent; border-bottom: 70px solid red; border-left: 100px solid transparent; transform: rotate(-70deg); content: ''; } 2.18. 18.五边形 #pentagon { position: relative; width: 54px; box-sizing: content-box; border-width: 50px 18px 0; border-style: solid; border-color: red transparent; } #pentagon:before { content: \"\"; position: absolute; height: 0; width: 0; top: -85px; left: -18px; border-width: 0 45px 35px; border-style: solid; border-color: transparent transparent red; } 2.19. 19.六边形 #hexagon { width: 100px; height: 55px; background: red; position: relative; } #hexagon:before { content: \"\"; position: absolute; top: -25px; left: 0; width: 0; height: 0; border-left: 50px solid transparent; border-right: 50px solid transparent; border-bottom: 25px solid red; } #hexagon:after { content: \"\"; position: absolute; bottom: -25px; left: 0; width: 0; height: 0; border-left: 50px solid transparent; border-right: 50px solid transparent; border-top: 25px solid red; } 2.20. 20.八边形 #octagon { width: 100px; height: 100px; background: red; position: relative; } #octagon:before { content: \"\"; width: 100px; height: 0; position: absolute; top: 0; left: 0; border-bottom: 29px solid red; border-left: 29px solid #eee; border-right: 29px solid #eee; } #octagon:after { content: \"\"; width: 100px; height: 0; position: absolute; bottom: 0; left: 0; border-top: 29px solid red; border-left: 29px solid #eee; border-right: 29px solid #eee; } 2.21. 21.爱心 #heart { position: relative; width: 100px; height: 90px; } #heart:before, #heart:after { position: absolute; content: \"\"; left: 50px; top: 0; width: 50px; height: 80px; background: red; border-radius: 50px 50px 0 0; transform: rotate(-45deg); transform-origin: 0 100%; } #heart:after { left: 0; transform: rotate(45deg); transform-origin: 100% 100%; } 2.22. 22.无穷大 #infinity { position: relative; width: 212px; height: 100px; box-sizing: content-box; } #infinity:before, #infinity:after { content: \"\"; box-sizing: content-box; position: absolute; top: 0; left: 0; width: 60px; height: 60px; border: 20px solid red; border-radius: 50px 50px 0 50px; transform: rotate(-45deg); } #infinity:after { left: auto; right: 0; border-radius: 50px 50px 50px 0; transform: rotate(45deg); } 2.23. 23.菱形 #diamond { width: 0; height: 0; border: 50px solid transparent; border-bottom-color: red; position: relative; top: -50px; } #diamond:after { content: ''; position: absolute; left: -50px; top: 50px; width: 0; height: 0; border: 50px solid transparent; border-top-color: red; } 2.24. 24.钻石 #diamond-shield { width: 0; height: 0; border: 50px solid transparent; border-bottom: 20px solid red; position: relative; top: -50px; } #diamond-shield:after { content: ''; position: absolute; left: -50px; top: 20px; width: 0; height: 0; border: 50px solid transparent; border-top: 70px solid red; } 2.25. 25.钻戒 #diamond-narrow { width: 0; height: 0; border: 50px solid transparent; border-bottom: 70px solid red; position: relative; top: -50px; } #diamond-narrow:after { content: ''; position: absolute; left: -50px; top: 70px; width: 0; height: 0; border: 50px solid transparent; border-top: 70px solid red; } 2.26. 26.钻石2 #cut-diamond { border-style: solid; border-color: transparent transparent red transparent; border-width: 0 25px 25px 25px; height: 0; width: 50px; box-sizing: content-box; position: relative; margin: 20px 0 50px 0; } #cut-diamond:after { content: \"\"; position: absolute; top: 25px; left: -25px; width: 0; height: 0; border-style: solid; border-color: red transparent transparent transparent; border-width: 70px 50px 0 50px; } 2.27. 27.蛋蛋 #egg { display: block; width: 126px; height: 180px; background-color: red; border-radius: 50% 50% 50% 50% / 60% 60% 40% 40%; } 2.28. 28.吃豆人 #pacman { width: 0px; height: 0px; border-right: 60px solid transparent; border-top: 60px solid red; border-left: 60px solid red; border-bottom: 60px solid red; border-top-left-radius: 60px; border-top-right-radius: 60px; border-bottom-left-radius: 60px; border-bottom-right-radius: 60px; } 2.29. 29.对话泡泡 #talkbubble { width: 120px; height: 80px; background: red; position: relative; -moz-border-radius: 10px; -webkit-border-radius: 10px; border-radius: 10px; } #talkbubble:before { content: \"\"; position: absolute; right: 100%; top: 26px; width: 0; height: 0; border-top: 13px solid transparent; border-right: 26px solid red; border-bottom: 13px solid transparent; } 2.30. 30. 12点 爆发 #burst-12 { background: red; width: 80px; height: 80px; position: relative; text-align: center; } #burst-12:before, #burst-12:after { content: \"\"; position: absolute; top: 0; left: 0; height: 80px; width: 80px; background: red; } #burst-12:before { transform: rotate(30deg); } #burst-12:after { transform: rotate(60deg); } 2.31. 31. 8点 爆发 #burst-8 { background: red; width: 80px; height: 80px; position: relative; text-align: center; transform: rotate(20deg); } #burst-8:before { content: \"\"; position: absolute; top: 0; left: 0; height: 80px; width: 80px; background: red; transform: rotate(135deg); } 2.32. 32.太极 #yin-yang { width: 96px; box-sizing: content-box; height: 48px; background: #eee; border-color: red; border-style: solid; border-width: 2px 2px 50px 2px; border-radius: 100%; position: relative; } #yin-yang:before { content: \"\"; position: absolute; top: 50%; left: 0; background: #eee; border: 18px solid red; border-radius: 100%; width: 12px; height: 12px; box-sizing: content-box; } #yin-yang:after { content: \"\"; position: absolute; top: 50%; left: 50%; background: red; border: 18px solid #eee; border-radius: 100%; width: 12px; height: 12px; box-sizing: content-box; } 2.33. 33.徽章丝带 #badge-ribbon { position: relative; background: red; height: 100px; width: 100px; border-radius: 50px; } #badge-ribbon:before, #badge-ribbon:after { content: ''; position: absolute; border-bottom: 70px solid red; border-left: 40px solid transparent; border-right: 40px solid transparent; top: 70px; left: -10px; transform: rotate(-140deg); } #badge-ribbon:after { left: auto; right: -10px; transform: rotate(140deg); } 2.34. 34.太空入侵者（电脑游戏名） #space-invader { box-shadow: 0 0 0 1em red, 0 1em 0 1em red, -2.5em 1.5em 0 .5em red, 2.5em 1.5em 0 .5em red, -3em -3em 0 0 red, 3em -3em 0 0 red, -2em -2em 0 0 red, 2em -2em 0 0 red, -3em -1em 0 0 red, -2em -1em 0 0 red, 2em -1em 0 0 red, 3em -1em 0 0 red, -4em 0 0 0 red, -3em 0 0 0 red, 3em 0 0 0 red, 4em 0 0 0 red, -5em 1em 0 0 red, -4em 1em 0 0 red, 4em 1em 0 0 red, 5em 1em 0 0 red, -5em 2em 0 0 red, 5em 2em 0 0 red, -5em 3em 0 0 red, -3em 3em 0 0 red, 3em 3em 0 0 red, 5em 3em 0 0 red, -2em 4em 0 0 red, -1em 4em 0 0 red, 1em 4em 0 0 red, 2em 4em 0 0 red; background: red; width: 1em; height: 1em; overflow: hidden; margin: 50px 0 70px 65px; } 2.35. 35.电视 #tv { position: relative; width: 200px; height: 150px; margin: 20px 0; background: red; border-radius: 50% / 10%; color: white; text-align: center; text-indent: .1em; } #tv:before { content: ''; position: absolute; top: 10%; bottom: 10%; right: -5%; left: -5%; background: inherit; border-radius: 5% / 50%; } 2.36. 36.雪佛龙 #chevron { position: relative; text-align: center; padding: 12px; margin-bottom: 6px; height: 60px; width: 200px; } #chevron:before { content: ''; position: absolute; top: 0; left: 0; height: 100%; width: 51%; background: red; transform: skew(0deg, 6deg); } #chevron:after { content: ''; position: absolute; top: 0; right: 0; height: 100%; width: 50%; background: red; transform: skew(0deg, -6deg); } 2.37. 37.放大镜 #magnifying-glass { font-size: 10em; display: inline-block; width: 0.4em; box-sizing: content-box; height: 0.4em; border: 0.1em solid red; position: relative; border-radius: 0.35em; } #magnifying-glass:before { content: \"\"; display: inline-block; position: absolute; right: -0.25em; bottom: -0.1em; border-width: 0; background: red; width: 0.35em; height: 0.08em; transform: rotate(45deg); } 2.38. 38.Facebook图标 #facebook-icon { background: red; text-indent: -999em; width: 100px; height: 110px; box-sizing: content-box; border-radius: 5px; position: relative; overflow: hidden; border: 15px solid red; border-bottom: 0; } #facebook-icon:before { content: \"/20\"; position: absolute; background: red; width: 40px; height: 90px; bottom: -30px; right: -37px; border: 20px solid #eee; border-radius: 25px; box-sizing: content-box; } #facebook-icon:after { content: \"/20\"; position: absolute; width: 55px; top: 50px; height: 20px; background: #eee; right: 5px; box-sizing: content-box; } 2.39. 39.月亮 #moon { width: 80px; height: 80px; border-radius: 50%; box-shadow: 15px 15px 0 0 red; } 2.40. 40.旗 #flag { width: 110px; height: 56px; box-sizing: content-box; padding-top: 15px; position: relative; background: red; color: white; font-size: 11px; letter-spacing: 0.2em; text-align: center; text-transform: uppercase; } #flag:after { content: \"\"; position: absolute; left: 0; bottom: 0; width: 0; height: 0; border-bottom: 13px solid #eee; border-left: 55px solid transparent; border-right: 55px solid transparent; } 2.41. 41.圆锥 #cone { width: 0; height: 0; border-left: 70px solid transparent; border-right: 70px solid transparent; border-top: 100px solid red; border-radius: 50%; } 2.42. 42.十字架 #cross { background: red; height: 100px; position: relative; width: 20px; } #cross:after { background: red; content: \"\"; height: 20px; left: -40px; position: absolute; top: 40px; width: 100px; } 2.43. 43.根基 #base { background: red; display: inline-block; height: 55px; margin-left: 20px; margin-top: 55px; position: relative; width: 100px; } #base:before { border-bottom: 35px solid red; border-left: 50px solid transparent; border-right: 50px solid transparent; content: \"\"; height: 0; left: 0; position: absolute; top: -35px; width: 0; } 2.44. 44.指示器 #pointer { width: 200px; height: 40px; position: relative; background: red; } #pointer:after { content: \"\"; position: absolute; left: 0; bottom: 0; width: 0; height: 0; border-left: 20px solid white; border-top: 20px solid transparent; border-bottom: 20px solid transparent; } #pointer:before { content: \"\"; position: absolute; right: -20px; bottom: 0; width: 0; height: 0; border-left: 20px solid red; border-top: 20px solid transparent; border-bottom: 20px solid transparent; } 2.45. 45.锁 #lock { font-size: 8px; position: relative; width: 18em; height: 13em; border-radius: 2em; top: 10em; box-sizing: border-box; border: 3.5em solid red; border-right-width: 7.5em; border-left-width: 7.5em; margin: 0 0 6rem 0; } #lock:before { content: \"\"; box-sizing: border-box; position: absolute; border: 2.5em solid red; width: 14em; height: 12em; left: 50%; margin-left: -7em; top: -12em; border-top-left-radius: 7em; border-top-right-radius: 7em; } #lock:after { content: \"\"; box-sizing: border-box; position: absolute; border: 1em solid red; width: 5em; height: 8em; border-radius: 2.5em; left: 50%; top: -1em; margin-left: -2.5em; } 代码部署后可能存在的BUG没法实时知道，事后为了解决这些BUG，花了大量的时间进行log 调试，这边顺便给大家推荐一个好用的BUG监控工具 Fundebug。 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/CSS3/CSS3 三角形.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/CSS3/CSS3 三角形.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"CSS3/立体.html":{"url":"CSS3/立体.html","title":"立体","keywords":"","body":"1. css3实现立方体1. css3实现立方体 CSS3制作3D立方体-jq22.com * { margin: 0; padding: 0; } body { perspective: none; perspective-origin: 50% 50%; } .warp { width: 500px; height: 500px; margin: 100px auto; position: relative; transform-style: preserve-3d; transform: rotateX(45deg) rotateY(45deg); animation: play 5s linear infinite; } .box { width: 200px; height: 200px; border: 2px solid #ccc; text-align: center; line-height: 200px; font-size: 150px; font-weight: bold; color: #fff; position: absolute; top: 150px; left: 150px; } .box1 { background: rgba(135,135,135,.3); transform: rotateY(90deg) translateZ(100px); } .box2 { background: rgba(135,0,255,.3); transform: rotateY(90deg) translateZ(-100px); } .box3 { background: rgba(255,125,125,.3); transform: rotateX(90deg) translateZ(-100px); } .box4 { background: rgba(125,255,125,.3); transform: rotateX(90deg) translateZ(100px); } .box5 { background: rgba(30,150,189,.3); transform: translateZ(100px); } .box6 { background: rgba(169,150,189,.3); transform: translateZ(-100px); } @keyframes play { from{ transform: rotateX(0) rotateY(0) rotateZ(0);} to {transform: rotateX(360deg) rotateY(180deg) rotateZ(90deg);} } 1 2 3 4 5 6 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/CSS3/立体.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/CSS3/立体.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"HTML/":{"url":"HTML/","title":"HTML","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/HTML/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/HTML/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"HTML/HTML实体符号代码速查表.html":{"url":"HTML/HTML实体符号代码速查表.html","title":"HTML实体符号代码速查表","keywords":"","body":"1. HTML实体符号代码速查表1. HTML实体符号代码速查表 1.特色的 © © © 版权标志 \\ \\ 竖线，常用作菜单或导航中的分隔符 · · · 圆点，有时被用来作为菜单分隔符 ↑ ↑ ↑ 上箭头，常用作网页“返回页面顶部”标识 € € € 欧元标识 ² ² ² 上标2，数学中的平方，在数字处理中常用到，例如：1000² ½ ½ ½ 二分之一 ♥ ♥ ♥ 心型，用来表达你的心 2常用的   空格 & & & and符号，与 \" \" \" 引号 © © © 版权标志 ® ® » 注册标志 ™ ™ ™ 商标标志 “ “ “ 左双引号 ” ” ” 右双引号 ‘ ‘ ‘ 做单引号 ’ ’ ’ 右单引号 « « « 左三角双引号 » » » 右三角双引号 ‹ ‹ ‹ 左三角单引号 › › › 右三角单引号 § § § 章节标志 ¶ ¶ ¶ 段落标志 • • • 列表圆点（大） · · · 列表圆点（中） … … … 省略号 \\ \\ 竖线 ¦ ¦ ¦ 断的竖线 – – – 短破折号 — — — 长破折号 3.货币类 ¤ ¤ ¤ 一般货币符号 $ $ 美元符号 ¢ ¢ ¢ 分 £ £ £ 英镑 ¥ ¥ ¥ 日元 € € € 欧元 4 数学类 小于号 > > > 大于号 ≤ ≤ ≤ 小于等于号 ≥ ≥ ≥ 大于等于号 × × × 乘号 ÷ ÷ ÷ 除号 − − − 减号 ± ± ± 加/减 号 ≠ ≠ ≠ 不等于号 ¹ ¹ ¹ 上标1 ² ² ² 上标2 ³ ³ ³ 上标3 ½ ½ ½ 二分之一 ¼ ¼ ¼ 四分之一 ¾ ¾ ¾ 四分之三 ‰ ‰ ‰ 千分率 ° ° ° 度 √ √ √ 平方根 ∞ ∞ ∞ 无限大 5.方向类 ← ← ← 左箭头 ↑ ↑ ↑ 上箭头 → → → 右箭头 ↓ ↓ ↓ 下箭头 ↔ ↔ ↔ 左右箭头 ↵ ↵ ↵ 回车箭头 ⌈ ⌈ ⌈ 左上限 ⌉ ⌉ ⌉ 右上限 ⌊ ⌊ ⌊ 左下限 ⌋ ⌋ ⌋ 右下限 6 其它 ♠ ♠ ♠ 黑桃 ♣ ♣ ♣ 梅花 ♥ ♥ ♥ 红桃，心 ♦ ♦ ♦ 方块牌 ◊ ◊ ◊ 菱形 † † † 匕首 ‡ ‡ ‡ 双剑号 ¡ ¡ ¡ 反向感叹号 ¿ ¿ ¿ 反向问号 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/HTML/HTML实体符号代码速查表.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/HTML/HTML实体符号代码速查表.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"Imooc/":{"url":"Imooc/","title":"Imooc","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Imooc/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Imooc/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"Imooc/imooc actual course crawler.html":{"url":"Imooc/imooc actual course crawler.html","title":"imooc actual course crawler","keywords":"","body":"1. 慕课网实战课程爬虫1. 慕课网实战课程爬虫 # -*- coding: utf-8 -*- import time import requests import re import json from requests.exceptions import RequestException from multiprocessing import Pool def get_one_page(url): try: response = requests.get(url) if response.status_code == 200: return response.content.decode(\"utf-8\") return None except RequestException as e: print(e, '异常') return None def parse_title(page): url = 'https://coding.imooc.com/class/' + str(page) + '.html' html = get_one_page(url) pattern = re.compile('.*?(.*?)', re.S) items = re.findall(pattern, html) return items[0] def parse_one_page(html): pattern = re.compile('.*?.*?.*?lecturer-info.*?(.*?).*?shizhan-intro-box.*?title=\".*?\">' '(.*?).*?class=\"grade\">(.*?).*?imv2-set-sns.*?' '(.*?).*?class=\"big-text\">(.*?).*?shizan-desc.*?>' '(.*?).*?', re.S) items = re.findall(pattern, html) for item in items: sb = parse_title(item[0]) print(item[2], item[0], sb) time.sleep(5) yield { 'link': item[0], 'st': item[2], 'bt': sb, 'teacher': item[1], # 'grade': item[3], # 'people':item[4], # 'score': item[5], # 'describe': item[6] } def write_to_file(content): with open('imoocAll5.js', 'a', encoding='utf-8') as f: f.write(json.dumps(content, ensure_ascii=False) + '\\n') f.close() def main(page): url = 'https://coding.imooc.com/?sort=2&page=' + str(page) html = get_one_page(url) with open(str(page) + '.html', 'a', encoding='utf-8') as f: f.write(json.dumps(html, ensure_ascii=False)) f.close() # parse_one_page(html) # print(html) for i, item in enumerate(parse_one_page(html)): print(i, item) write_to_file(item) if __name__ == '__main__': pool = Pool() pool.map(main, [1, 2, 3, 4, 5, 6]) print('finish') powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Imooc/imooc actual course crawler.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Imooc/imooc actual course crawler.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"Laravel/":{"url":"Laravel/","title":"Laravel","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Laravel/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Laravel/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"Laravel/扩展包开发.html":{"url":"Laravel/扩展包开发.html","title":"扩展包开发","keywords":"","body":"1. 扩展包开发1.1. 软件特点1.2. 基础构建1.2.1. 创建目录1.2.2. composer 配置1.2.3. 目录结构1.2.4. 配置站点1.2.5. 安装依赖包1.3. 业务实现1.3.1. 软件配置1.3.2. 异常处理1.3.3. 业务代码1.4. Laravel集成1.4.1. composer.json1.4.2. Provider1.4.3. Facade1.5. 单元测试1.5.1. 命名规范1.5.2. 单元测试1.6. 项目测试1.6.1. 生成配置文件1.6.2. 测试扩展包1.7. 开源发布1.7.1. GitHub1.7.2. Packagist1.7.3. Version1.7.4. 图标1. 扩展包开发 扩展包是对软件功能的扩充，下面我们开发一个多网关上传扩展包，目前支持阿里云OSS上传。 本项目地址：https://github.com/houdunwang/uploader 1.1. 软件特点 支持多网关处理业务 提供provider与facade支持，完美集成Laravel框架 单元测试全覆盖，保证代码健壮 发布到Github与packagist.org开源共享 使用简单可快速集成到项目中 1.2. 基础构建 1.2.1. 创建目录 $ mkdir uploader 1.2.2. composer 配置 $ cd uploader $ composer init # 一直回车 This command will guide you through creating your composer.json config. Package name (/) [xj/uploader]: houdunwang/uploader Description []: Author [houdunwang , n to skip]: Minimum Stability []: Package Type (e.g. library, project, metapackage, composer-plugin) []: License []: Define your dependencies. Would you like to define your dependencies (require) interactively [yes]? Search for a package: Would you like to define your dev dependencies (require-dev) interactively [yes]? Search for a package: { \"name\": \"houdunwang/uploader\", \"authors\": [ { \"name\": \"houdunwang\", \"email\": \"2300071698@qq.com\" } ], \"require\": {}, } Do you confirm generation [yes]? 说明 # houdunwang为我Github帐号，你要填写你的Github库名称 Author [houdunwang , n to skip]: 你Github帐号 剩下一直回车即可 1.2.3. 目录结构 ├── config # 配置文件目录 ├── composer.json ├── phpunit.xml # 单元测试配置文件 ├── src # 软件代码 │ └── Exceptions # 异常处理 │ └── Services # 处理服务类 └── tests # 测试代码 修改 composer.json 设置自动加载 ... \"autoload\": { \"psr-4\": { \"Houdunwang\\\\Uploader\\\\\": \"src/\" } } ... 设置单元测试配置文件 ./tests/ 1.2.4. 配置站点 下面是我的 homestead 的配置，如果你使用 wamp 等集成开发环境可以省略这一步。 sites: - map: uploader.test to: /home/vagrant/code/components/uploader 配置 host 文件 192.168.10.10 uploader.test 1.2.5. 安装依赖包 安装以下两个依赖包用于软件的单元测试 $ composer require phpunit/phpunit mockery/mockery $ composer require aliyuncs/oss-sdk-php phpunit/phpunit mockery/mockery 用于单元测试的组件 aliyuncs/oss-sdk-php 阿里云提供的OSS上传库 1.3. 业务实现 1.3.1. 软件配置 配置文件定义在 config/uploader.php，内容如下： [ 'accessKeyId' => '', 'accessKeySecret' => '', 'bucket' => '', 'endpoint' => '', ], ]; 1.3.2. 异常处理 异常处理用于处理运行错误，比如用户参数错误、Http处理错误等。下面是我们定义的异常处理类 src │ ├── Exceptions │ │ ├── Exception.php # 基础异常 │ │ ├── InvalidParamException.php # 参数错误异常 │ │ └── ServerDisposeException.php # 服务网关异常(如调用阿里oss服务异常) 下面是各个异常类 namespace Houdunwang\\Uploader\\Exceptions; class Exception extends \\Exception { } namespace Houdunwang\\Uploader\\Exceptions; class InvalidParamException extends Exception { } namespace Houdunwang\\Uploader\\Exceptions; class ServerDisposeException extends Exception { } 1.3.3. 业务代码 扩展包入口类 因为上传支持多个服务，我们使用 Uploader 类统一调用处理。 * | WeChat: houdunren2018 * | Date: 2018/11/12 * | Copyright (c) 2012-2019, www.houdunren.com. All Rights Reserved. * '-------------------------------------------------------------------*/ namespace Houdunwang\\Uploader; use Houdunwang\\Uploader\\Exceptions\\InvalidParamException; use Houdunwang\\Uploader\\Services\\OssServer; class Uploader { protected $config; /** * 服务列表 * @var array */ protected $servers = [ 'oss' => OssServer::class, ]; public function config(array $config): Uploader { $this->config = $config; return $this; } /** * 上传处理 * @param string $file * @param string $service * @return string 文件 * @throws InvalidParamException */ public function upload(string $file, string $service='oss'): string { if (!is_string($file) || !is_file($file)) { throw new InvalidParamException('invalid file param'); } if (!in_array($service, ['oss', 'local'])) { throw new ServerDisposeException('service dones not exists' . $service); } try { $serverInstance = new $this->servers[$service]; return $serverInstance->config($this->config[$service])->upload($file); } catch (\\Exception $e) { throw new \\Exception($e->getMessage(), $e->getCode(), $e); } } } OSS 服务 * | WeChat: houdunren2018 * | Date: 2018/11/12 * | Copyright (c) 2012-2019, www.houdunren.com. All Rights Reserved. * '-------------------------------------------------------------------*/ namespace Houdunwang\\Uploader\\Services; use Houdunwang\\Uploader\\Exceptions\\HttpException; use Houdunwang\\Uploader\\Exceptions\\InvalidParamException; use OSS\\OssClient; class OssServer implements ServerInterface { protected $config; /** * 设置配置 * @param array $config * @return OssServer * @throws InvalidParamException */ public function config(array $config): ServerInterface { if (empty($config['accessKeyId']) || empty($config['accessKeySecret']) || empty($config['bucket']) || empty($config['endpoint'])) { throw new InvalidParamException('server param invalid'); } $this->config = $config; return $this; } /** * OSS服务 * @return OssClient * @throws \\OSS\\Core\\OssException */ public function getHttpClient() { return new OssClient($this->config['accessKeyId'], $this->config['accessKeySecret'], $this->config['endpoint']); } /** * 执行上传 * @param string $file * @return string * @throws HttpException * @throws InvalidParamException */ public function upload(string $file): string { if (!is_string($file) || !is_file($file)) { throw new InvalidParamException($file . ' is not a file'); } try { $res = $this->getHttpClient()->uploadFile($this->config['bucket'], $this->getFileName($file), $file); return $res['oss-request-url']; } catch (\\Exception $e) { throw new HttpException($e->getMessage(), $e->getCode(), $e); } } /** * 随机文件名 * @param string $file * @return string */ public function getFileName(string $file): string { $extension = substr($file, strrpos($file, '.')); return md5($file) . time() . $extension; } } 1.4. Laravel集成 为了更好在Laravel框架中使用，我们需要添加 provider 与 Facade 支持，并在Laravel框架的 config 目录中生成扩展包配置文件。 1.4.1. composer.json 首先需要在 composer.json 文件中定义 provider 与 facade 配置项 { ... \"extra\": { \"laravel\": { \"providers\": [ \"Houdunwang\\\\Uploader\\\\ServiceProvider\" ], \"aliases\": { \"Uploader\": \"Houdunwang\\\\Uploader\\\\Facade\" } } }, ... } 1.4.2. Provider 创建 src/ServiceProvider 服务文件 * | WeChat: houdunren2018 * | Date: 2018/11/12 * | Copyright (c) 2012-2019, www.houdunren.com. All Rights Reserved. * '-------------------------------------------------------------------*/ namespace Houdunwang\\Uploader; class ServiceProvider extends \\Illuminate\\Support\\ServiceProvider { protected $defer = true; /** * 服务引导方法 * * @return void */ public function boot(): void { //发布配置文件到项目的 config 目录中 $this->publishes([ __DIR__ . '/config/uploader.php' => config_path('uploader.php'), ]); } /** * 注册服务 */ public function register(): void { $this->app->singleton(Uploader::class, function () { return new Uploader(); }); } } 1.4.3. Facade 创建 src/Facade外观文件（方便在Laravel中以像DB::table()形式使用扩展包） * | WeChat: houdunren2018 * | Date: 2018/11/12 * | Copyright (c) 2012-2019, www.houdunren.com. All Rights Reserved. * '-------------------------------------------------------------------*/ namespace Houdunwang\\Uploader; use Illuminate\\Support\\Facades\\Facade as LaravelFacade; class Facade extends LaravelFacade { /** * 获取组件的注册名称。 * * @return string */ protected static function getFacadeAccessor() { return Uploader::class; } } 1.5. 单元测试 使用单元测试程序的稳定性是软件开发中必不可少的环节。 1.5.1. 命名规范 测试用例目录要与项目目录结构一致 测试用户类名为：项目类名+Test.php 测试用例要继承 PHPUnit\\Framework\\TestCase 类 测试用户方法为：test+项目类方法 1.5.2. 单元测试 对OssServer服务类测试 * | WeChat: houdunren2018 * | Date: 2018/11/12 * | Copyright (c) 2012-2019, www.houdunren.com. All Rights Reserved. * '-------------------------------------------------------------------*/ use PHPUnit\\Framework\\TestCase; use Houdunwang\\Uploader\\Services\\OssServer; use Mockery\\Matcher\\AnyArgs; use Houdunwang\\Uploader\\Exceptions\\InvalidParamException; class OssServerTest extends TestCase { public function testConfig() { $this->expectException(InvalidParamException::class); $this->expectExceptionMessage('server param invalid'); $oss = new OssServer(); $oss->config([ 'accessKeyIda' => 'test', 'accessKeySecret' => 'test', 'bucket' => 'test', 'endpoint' => 'test', ]); $this->fail('config param exception fail'); } public function testGetFileName() { $oss = Mockery::mock(OssServer::class)->makePartial(); $this->assertStringEndsWith('.jpeg', $oss->getFileName('a.jpeg')); } public function testUploadParamFile() { $oss = \\Mockery::mock(OssServer::class)->makePartial(); $this->expectException(InvalidParamException::class); $this->expectExceptionMessage('a.jpeg is not a file'); $oss->upload('a.jpeg'); $this->fail('ossClient request param invalid'); } public function testUpload() { $client = \\Mockery::mock(\\OSS\\OssClient::class); $client->allows()->uploadFile(new AnyArgs())->andReturn([ 'oss-request-url' => __FILE__, ]); $oss = \\Mockery::mock(OssServer::class)->makePartial(); $oss->allows()->getHttpClient()->andReturn($client); return $this->assertSame(__FILE__, $oss->upload(__FILE__)); } } 对扩展包入口类测试 * | WeChat: houdunren2018 * | Date: 2018/11/12 * | Copyright (c) 2012-2019, www.houdunren.com. All Rights Reserved. * '-------------------------------------------------------------------*/ use PHPUnit\\Framework\\TestCase; use Houdunwang\\Uploader\\Exceptions\\InvalidParamException; class UploaderTest extends TestCase { public function testUploadParamException() { $uploader = new \\Houdunwang\\Uploader\\Uploader([]); $this->expectException(InvalidParamException::class); $this->expectExceptionMessage('invalid file param'); $uploader->upload('test.php', 'oss'); $this->fail('server param exception'); } } 测试结果： ➜ uploader git:(master) ✗ phpunit PHPUnit 6.1.0 by Sebastian Bergmann and contributors. ..... 5 / 5 (100%) Time: 98 ms, Memory: 10.00MB OK (5 tests, 8 assertions) ➜ uploader git:(master) 1.6. 项目测试 下面我们在Laravel 项目中进行测试，首先使用以下命令安装laravel项目。 composer create-project --prefer-dist laravel/laravel 安装我们的本地扩展包 $ composer config repositories.uploader path ../components/uploader $ composer require houdunwang/uploader:dev-master 1.6.1. 生成配置文件 组件会自动发布配置文件 uploader.php 到项目的 config 目录中，需要先进行相应配置。 也可以使用以下方式手动发布配置： $ laravel php artisan vendor:publish Which provider or tag's files would you like to publish?: [0 ] Publish files from all providers and tags listed below [1 ] Provider: BeyondCode\\DumpServer\\DumpServerServiceProvider [2 ] Provider: Fideloper\\Proxy\\TrustedProxyServiceProvider [3 ] Provider: Illuminate\\Mail\\MailServiceProvider [4 ] Provider: Illuminate\\Notifications\\NotificationServiceProvider [5 ] Provider: Illuminate\\Pagination\\PaginationServiceProvider [6 ] Provider: Laravel\\Tinker\\TinkerServiceProvider [7 ] Tag: config [8 ] Tag: laravel-mail [9 ] Tag: laravel-notifications [10] Tag: laravel-pagination > 7 Publishing complete. 设置 config/uploader.php 文件中的上传配置项。 阿里云 在 访问控制 中添加一个新帐号 获得帐号的 accessKeyId 与 accessKeySecret资料设置到配置文件中 赋予新增的帐号 oss 使用权限。 在 oss 服务中新增 bucket 块 为新增的 bucket 块配置跨域访问权限 设置块为 公共读 将 外网访问 配置项中的 EndPoint 设置到配置文件中的 endpoint 项 1.6.2. 测试扩展包 使用Facade 调用 Route::get('/', function () { return Uploader::config(config('uploader'))->upload('index.php'); }); 使用 provider 服务调用 Route::get('/', function () { return app(\\Houdunwang\\Uploader\\Uploader::class)->config(config('uploader'))->upload('index.php'); }); 1.7. 开源发布 1.7.1. GitHub 在Github新建项目并执行以下命令提交代码到版本库。 git init git add README.md git commit -m \"first commit\" git remote add origin https://github.com/houdunwang/uploader.git git push -u origin master 别忘记改成自己的github 库地址 1.7.2. Packagist 将软件发布到 https://packagist.org/ 用户就可以使用 composer进行安装或更新了。 使用 github 帐号登录 packagist 点击 Submit 提交软件包，从github复制 https的地址 点击 https://packagist.org/profile/ 页面的 https://packagist.org/trigger-github-sync/ 与 github 同步，同步后当github 代码提交时会自动通知 packagist。 1.7.3. Version 版本号由含义指 重构或不向下兼容版本号.新功能.修复版本 上面我以最直白的方式进行的版本号的说明，严格定义版本号是对使用你开源项目作者的基本责任，乱定义版本号可能造成使用者在升级后无法运行，这方便知识需要了解一下 composer 中版本号的说明。 下面我们为软件添加每一个版本 $ git tag v1.0.0 # 添加版本号 $ git push --tags # 向github发布 发布后登录 https://packagist.org/packages/houdunwang/uploader就可以看到版本号了，我们软件的使用者可以使用 composer update 更新了。 1.7.4. 图标 https://poser.pugx.org/ 搜索你的项目，可生成展示下载量、协议等信息的图标。 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Laravel/扩展包开发.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Laravel/扩展包开发.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"Linux/":{"url":"Linux/","title":"Linux","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Linux/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Linux/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"Linux/DHCP.html":{"url":"Linux/DHCP.html","title":"DHCP","keywords":"","body":"1. DHCP服务的搭建1.1. 问题描述:1. DHCP服务的搭建 DHCP服务的搭建 centos7网卡报错解决办法总结FailedtostartLSB:Bringup/downnetworking 重启网络报错 Failed to start LSB: Bring up/down dhcp服务 配置dhcpd.conf default-lease-time 600; max-lease-time 7200; subnet 192.168.1.0 netmask 255.255.255.0 { range 192.168.1.10 192.168.1.200; option domain-name-servers 203.167.97.66; option subnet-mask 255.255.255.0; option routers 192.168.1.1; option broadcast-address 192.168.1.255; default-lease-time 600; max-lease-time 7200; } > Subnet: 网段声明作用于整个子网段 > range: 设置用于分配的IP地址池 起始IP > option domain-name-servers: 设置指定域名服务器 > option routers: 设置网关地址 > option broadcast-address: 设置广播地址 > option subnet-mask: 设置客户机的子网掩码 > Host: 保留主机，作用于单个主机 ,(通常防止所在网段的subnet声明内) > default-lease-time: 设置默认的租约 > max-lease-time: 最大的租约时间 > hardware ethernet参数：指定对应主机的MAC地址 > fixed-address参数: 指定为该主机保留的IP地址 - 说明一下，dhcp服务器如果想配置不同网段的IP，前提必须有一个和本地IP同网段的声明才可以。 启动DHCP服务，并设置为开机自起状态 enp0s3文件 TYPE=Ethernet PROXY_METHOD=none BROWSER_ONLY=no BOOTPROTO=dhcp DEFROUTE=yes IPV4_FAILURE_FATAL=no IPV6INIT=yes IPV6_AUTOCONF=yes IPV6_DEFROUTE=yes IPV6_FAILURE_FATAL=no IPV6_ADDR_GEN_MODE=stable-privacy NAME=enp0s3 UUID=e92513bf-6b72-4384-81b6-a2b5d242d475 DEVICE=enp0s3 ONBOOT=yes IPADDR=192.168.1.201 NETMASK=255.255.255.0 GATEWAY=192.168.1.1 DNS1=203.167.97.66 DNS2=203.167.97.200 HWADDR=08:00:27:40:43:ca vim /etc/sysconfig/network 主机名文件 NETWORKING=yes HOSTNAME=localhost #可以修改 vim /etc/resolv.conf 配置DNS解析服务器 nameserver 203.167.97.66 ip ip 重点注意：开启动态DHCP获取ip前先执行静态static获取，然后在重启DHCP服务，接着重启network服务 1.1. 问题描述: 我的vm中安装了一台虚拟机centos7,用着用着不知道为什么网络就不能用了. 解决: 查询了一下,好像是系统自带的NetworkManager这个管理套件有关系，关掉. 关掉方法: systemctl stop NetworkManager systemctl disable NetworkManager 重新启动网络： systemctl start network.service ifconfig 如果网络可以那么你就走运了,问题已解决,但我这个时候还是有报错. 报错(Job ``for network.service failed because the control process exited with error code. See ``\"systemctl status network.service\" and ``\"journalctl -xe\" for details. [root@centos7 ~]``#) 按照提示输入systemctl status network.service查看到有: Failed to start LSB: Bring up /down networking. 不是那么走运吧,继续解决. 下一步修改mac地址,这一步我没有做,好像也没关系.对应网络配置文件里的字段是HWADDR=00:0c:29:0c:15:49 再下一步,将7的网卡名改成了eth0（众所周知7的网卡名是eno后面随机 一串数字），生成菜单时没有生效，那么在此生效一下. 注意网卡配置名是已经修改成eth0以后执行下面操作，一共修改的地方有三处. 第一处网卡名：/etc/sysconfig/network-scripts/ifcfg-eth0 ， 第二处配置文件里面：NAME=eth0 ， 第三处也是配置文件里面：DEVICE=eth0 这里贴出一下我的ifcfg-eth0文件信息: 注:我的虚拟机网卡是配置的NAT模式 修改/etc/sysconfig/grub,添加net.ifnames=0 biosdevname=0 注意在/etc/sysconfig/grub文件的标红位置 GRUB_CMDLINE_LINUX=``\"crashkernel=128M rd.lvm.lv=centos/root rhgb quiet net.ifnames=0 biosdevname=0\" 下一步,生成菜单 grub2-mkconfig -o /boot/grub2/grub.cfg 最后reboot重启,我的网卡重启就好了 我的问题解决了,但愿你的问题也解决了. 最后贴上一些有用的命令: 重启网卡 systemctl restart network 给NetworkManager-wait-online服务设置开机自启动 systemctl enable NetworkManager-wait-online.service 停止关闭NetworkManager systemctl stop NetworkManager systemctl disable NetworkManager powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Linux/DHCP.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Linux/DHCP.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"Linux/Mac-item2-crontab无法写入.html":{"url":"Linux/Mac-item2-crontab无法写入.html","title":"Mac-item2-crontab无法写入","keywords":"","body":"1.1. 在item2中无法写入crontab1.1. 在item2中无法写入crontab 错误如图： 解决方法 If you allow iTerm Full Disk Access in System Preferences (System Preferences -> Security & Privacy -> Privacy -> Full Disk Access), you'll be able to edit your crontab. 其实就是修改电脑里安全设置里的完全磁盘访问权限 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Linux/Mac-item2-crontab无法写入.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Linux/Mac-item2-crontab无法写入.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"Linux/centos yum rpm源.html":{"url":"Linux/centos yum rpm源.html","title":"centos yum rpm源","keywords":"","body":"1. CentOS nginx 从 安装 到 自配yum本地源1.1. 安装1.1.1. 第一步1.1.2. 第二步1.1.3. 第三步1.1.4. 第四步1.1.5. 第五步1. CentOS nginx 从 安装 到 自配yum本地源 CentOS nginx 从 安装 到 自配yum本地源 1.1. 安装 1.1.1. 第一步 首先确认没有安装过nginx yum info nginx 若显示为available 则没有安装 1.1.2. 第二步 进入yum的配置文件夹中 [root@zbq yum.repos.d]# cd /etc/yum.repos.d/ 1.1.3. 第三步 使用wget 安装ngnix到/etc/yum.repos.d/ wget http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm 1.1.4. 第四步 接下来安装nginx rpm -ivh nginx-release-centos-6-0.el6.ngx.noarch.rpm 接下来会发现目录下多了一个 nginx.repo [root@zbq yum.repos.d]# ll total 36 -rw-r--r--. 1 root root 2523 Sep 6 09:23 ali-Base.repo -rw-r--r--. 1 root root 1926 Sep 6 17:09 CentOS-Base.repo -rw-r--r--. 1 root root 638 Nov 27 2013 CentOS-Debuginfo.repo -rw-r--r--. 1 root root 576 Sep 6 17:07 CentOS-Media.repo -rw-r--r--. 1 root root 3664 Nov 27 2013 CentOS-Vault.repo -rw-r--r--. 1 root root 4311 Oct 14 2011 nginx-release-centos-6-0.el6.ngx.noarch.rpm -rw-r--r--. 1 root root 113 Sep 6 17:26 nginx.repo 1.1.5. 第五步 再把ngnix.repo 作为源 使用 yum -l install nginx 安装完成之后ngnix就已经被安装完成了 版本为1.14 使用which nginx来查看 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Linux/centos yum rpm源.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Linux/centos yum rpm源.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"Linux/centos7 bridge.html":{"url":"Linux/centos7 bridge.html","title":"centos7 bridge","keywords":"","body":"1. virtualbox下centos7的桥接模式下的联网配置1.1.1. 一、如果是nat：1.1.2. 二、选择Bridge Adaper:2. Virtualbox的centos7 nat和桥接网络配置2.1.1. 1. 设置桥接模式，virtualbox中设置2.1.2. 2. 配置centos的网卡地址2.1.3. 3. 测试2.2. 所有的一切就绪之后需要重新生成uuid(uuidgen)和Mac地址,替换之后重启网络(systemctl restart network)1. virtualbox下centos7的桥接模式下的联网配置 1.1.1. 一、如果是nat： 1、将ONBOOT=NO 改为 yes 重启一下即可 1.1.2. 二、选择Bridge Adaper: 然后进行对网络配置的相关文件进行配置 1、vi /etc/sysconfig/network-scripts/ifcfg-enp0s3 将ONBOOT=NO 改为 yes 将BOOTPROTO改为static 加上你的信息： IPADDR: NETMASK: GATEWAY: 同时编辑你的/etc/resolv.conf，指定DNS服务器，一般可以使用 nameserver 208.67.222.222 nameserver 8.8.8.8 2. Virtualbox的centos7 nat和桥接网络配置 使用桥接网络也能够连通主机与虚拟机之间的网络，并且能够访问互联网 2.1.1. 1. 设置桥接模式，virtualbox中设置 2.1.2. 2. 配置centos的网卡地址 2.1.3. 3. 测试 主机能ping通虚拟机： 虚拟机也能ping通主机： 2.2. 所有的一切就绪之后需要重新生成uuid(uuidgen)和Mac地址,替换之后重启网络(systemctl restart network) powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Linux/centos7 bridge.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Linux/centos7 bridge.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"Linux/curl command.html":{"url":"Linux/curl command.html","title":"curl command","keywords":"","body":"1. Linux curl命令详解1.1. 命令：curl1. Linux curl命令详解 1.1. 命令：curl 在Linux中curl是一个利用URL规则在命令行下工作的文件传输工具，可以说是一款很强大的http命令行工具。它支持文件的上传和下载，是综合传输工具，但按传统，习惯称url为下载工具。 语法：# curl [option] [url] 常见参数： -A/--user-agent 设置用户代理发送给服务器 -b/--cookie cookie字符串或文件读取位置 -c/--cookie-jar 操作结束后把cookie写入到这个文件中 -C/--continue-at 断点续转 -D/--dump-header 把header信息写入到该文件中 -e/--referer 来源网址 -f/--fail 连接失败时不显示http错误 -o/--output 把输出写到该文件中 -O/--remote-name 把输出写到该文件中，保留远程文件的文件名 -r/--range 检索来自HTTP/1.1或FTP服务器字节范围 -s/--silent 静音模式。不输出任何东西 -T/--upload-file 上传文件 -u/--user 设置服务器的用户和密码 -w/--write-out [format] 什么输出完成后 -x/--proxy 在给定的端口上使用HTTP代理 -#/--progress-bar 进度条显示当前的传送状态 例子： 1、基本用法 # curl http://www.linux.com 执行后，www.linux.com 的html就会显示在屏幕上了 Ps：由于安装linux的时候很多时候是没有安装桌面的，也意味着没有浏览器，因此这个方法也经常用于测试一台服务器是否可以到达一个网站 2、保存访问的网页 2.1:使用linux的重定向功能保存 # curl http://www.linux.com >> linux.html 2.2:可以使用curl的内置option:-o(小写)保存网页 $ curl -o linux.html http://www.linux.com 执行完成后会显示如下界面，显示100%则表示保存成功 % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 79684 0 79684 0 0 3437k 0 --:--:-- --:--:-- --:--:-- 7781k 2.3:可以使用curl的内置option:-O(大写)保存网页中的文件 要注意这里后面的url要具体到某个文件，不然抓不下来 # curl -O http://www.linux.com/hello.sh 3、测试网页返回值 # curl -o /dev/null -s -w %{http_code} www.linux.com Ps:在脚本中，这是很常见的测试网站是否正常的用法 4、指定proxy服务器以及其端口 很多时候上网需要用到代理服务器(比如是使用代理服务器上网或者因为使用curl别人网站而被别人屏蔽IP地址的时候)，幸运的是curl通过使用内置option：-x来支持设置代理 # curl -x 192.168.100.100:1080 http://www.linux.com 5、cookie 有些网站是使用cookie来记录session信息。对于chrome这样的浏览器，可以轻易处理cookie信息，但在curl中只要增加相关参数也是可以很容易的处理cookie 5.1:保存http的response里面的cookie信息。内置option:-c（小写） # curl -c cookiec.txt http://www.linux.com 执行后cookie信息就被存到了cookiec.txt里面了 5.2:保存http的response里面的header信息。内置option: -D # curl -D cookied.txt http://www.linux.com 执行后cookie信息就被存到了cookied.txt里面了 注意：-c(小写)产生的cookie和-D里面的cookie是不一样的。 5.3:使用cookie 很多网站都是通过监视你的cookie信息来判断你是否按规矩访问他们的网站的，因此我们需要使用保存的cookie信息。内置option: -b # curl -b cookiec.txt http://www.linux.com 6、模仿浏览器 有些网站需要使用特定的浏览器去访问他们，有些还需要使用某些特定的版本。curl内置option:-A可以让我们指定浏览器去访问网站 # curl -A \"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.0)\" http://www.linux.com 这样服务器端就会认为是使用IE8.0去访问的 7、伪造referer（盗链） 很多服务器会检查http访问的referer从而来控制访问。比如：你是先访问首页，然后再访问首页中的邮箱页面，这里访问邮箱的referer地址就是访问首页成功后的页面地址，如果服务器发现对邮箱页面访问的referer地址不是首页的地址，就断定那是个盗连了 curl中内置option：-e可以让我们设定referer # curl -e \"www.linux.com\" http://mail.linux.com 这样就会让服务器其以为你是从www.linux.com点击某个链接过来的 8、下载文件 8.1：利用curl下载文件。 #使用内置option：-o(小写) # curl -o dodo1.jpg http:www.linux.com/dodo1.JPG #使用内置option：-O（大写) # curl -O http://www.linux.com/dodo1.JPG 这样就会以服务器上的名称保存文件到本地 8.2：循环下载 有时候下载图片可以能是前面的部分名称是一样的，就最后的尾椎名不一样 # curl -O http://www.linux.com/dodo[1-5].JPG 这样就会把dodo1，dodo2，dodo3，dodo4，dodo5全部保存下来 8.3：下载重命名 # curl -O http://www.linux.com/{hello,bb}/dodo[1-5].JPG 由于下载的hello与bb中的文件名都是dodo1，dodo2，dodo3，dodo4，dodo5。因此第二次下载的会把第一次下载的覆盖，这样就需要对文件进行重命名。 # curl -o #1_#2.JPG http://www.linux.com/{hello,bb}/dodo[1-5].JPG 这样在hello/dodo1.JPG的文件下载下来就会变成hello_dodo1.JPG,其他文件依此类推，从而有效的避免了文件被覆盖 8.4：分块下载 有时候下载的东西会比较大，这个时候我们可以分段下载。使用内置option：-r # curl -r 0-100 -o dodo1_part1.JPG http://www.linux.com/dodo1.JPG # curl -r 100-200 -o dodo1_part2.JPG http://www.linux.com/dodo1.JPG # curl -r 200- -o dodo1_part3.JPG http://www.linux.com/dodo1.JPG # cat dodo1_part* > dodo1.JPG 这样就可以查看dodo1.JPG的内容了 8.5：通过ftp下载文件 curl可以通过ftp下载文件，curl提供两种从ftp中下载的语法 # curl -O -u 用户名:密码 ftp://www.linux.com/dodo1.JPG # curl -O ftp://用户名:密码@www.linux.com/dodo1.JPG 8.6：显示下载进度条 # curl -# -O http://www.linux.com/dodo1.JPG 8.7：不会显示下载进度信息 # curl -s -O http://www.linux.com/dodo1.JPG 9、断点续传 在windows中，我们可以使用迅雷这样的软件进行断点续传。curl可以通过内置option:-C同样可以达到相同的效果 如果在下载dodo1.JPG的过程中突然掉线了，可以使用以下的方式续传 # curl -C -O http://www.linux.com/dodo1.JPG 10、上传文件 curl不仅仅可以下载文件，还可以上传文件。通过内置option:-T来实现 # curl -T dodo1.JPG -u 用户名:密码 ftp://www.linux.com/img/ 这样就向ftp服务器上传了文件dodo1.JPG 11、显示抓取错误 # curl -f http://www.linux.com/error 其他参数(此处翻译为转载)： -a/--append 上传文件时，附加到目标文件 --anyauth 可以使用“任何”身份验证方法 --basic 使用HTTP基本验证 -B/--use-ascii 使用ASCII文本传输 -d/--data HTTP POST方式传送数据 --data-ascii 以ascii的方式post数据 --data-binary 以二进制的方式post数据 --negotiate 使用HTTP身份验证 --digest 使用数字身份验证 --disable-eprt 禁止使用EPRT或LPRT --disable-epsv 禁止使用EPSV --egd-file 为随机数据(SSL)设置EGD socket路径 --tcp-nodelay 使用TCP_NODELAY选项 -E/--cert 客户端证书文件和密码 (SSL) --cert-type 证书文件类型 (DER/PEM/ENG) (SSL) --key 私钥文件名 (SSL) --key-type 私钥文件类型 (DER/PEM/ENG) (SSL) --pass 私钥密码 (SSL) --engine 加密引擎使用 (SSL). \"--engine list\" for list --cacert CA证书 (SSL) --capath CA目 (made using c_rehash) to verify peer against (SSL) --ciphers SSL密码 --compressed 要求返回是压缩的形势 (using deflate or gzip) --connect-timeout 设置最大请求时间 --create-dirs 建立本地目录的目录层次结构 --crlf 上传是把LF转变成CRLF --ftp-create-dirs 如果远程目录不存在，创建远程目录 --ftp-method [multicwd/nocwd/singlecwd] 控制CWD的使用 --ftp-pasv 使用 PASV/EPSV 代替端口 --ftp-skip-pasv-ip 使用PASV的时候,忽略该IP地址 --ftp-ssl 尝试用 SSL/TLS 来进行ftp数据传输 --ftp-ssl-reqd 要求用 SSL/TLS 来进行ftp数据传输 -F/--form 模拟http表单提交数据 -form-string 模拟http表单提交数据 -g/--globoff 禁用网址序列和范围使用{}和[] -G/--get 以get的方式来发送数据 -h/--help 帮助 -H/--header 自定义头信息传递给服务器 --ignore-content-length 忽略的HTTP头信息的长度 -i/--include 输出时包括protocol头信息 -I/--head 只显示文档信息 -j/--junk-session-cookies 读取文件时忽略session cookie --interface 使用指定网络接口/地址 --krb4 使用指定安全级别的krb4 -k/--insecure 允许不使用证书到SSL站点 -K/--config 指定的配置文件读取 -l/--list-only 列出ftp目录下的文件名称 --limit-rate 设置传输速度 --local-port 强制使用本地端口号 -m/--max-time 设置最大传输时间 --max-redirs 设置最大读取的目录数 --max-filesize 设置最大下载的文件总量 -M/--manual 显示全手动 -n/--netrc 从netrc文件中读取用户名和密码 --netrc-optional 使用 .netrc 或者 URL来覆盖-n --ntlm 使用 HTTP NTLM 身份验证 -N/--no-buffer 禁用缓冲输出 -p/--proxytunnel 使用HTTP代理 --proxy-anyauth 选择任一代理身份验证方法 --proxy-basic 在代理上使用基本身份验证 --proxy-digest 在代理上使用数字身份验证 --proxy-ntlm 在代理上使用ntlm身份验证 -P/--ftp-port 使用端口地址，而不是使用PASV -Q/--quote 文件传输前，发送命令到服务器 --range-file 读取（SSL）的随机文件 -R/--remote-time 在本地生成文件时，保留远程文件时间 --retry 传输出现问题时，重试的次数 --retry-delay 传输出现问题时，设置重试间隔时间 --retry-max-time 传输出现问题时，设置最大重试时间 -S/--show-error 显示错误 --socks4 用socks4代理给定主机和端口 --socks5 用socks5代理给定主机和端口 -t/--telnet-option Telnet选项设置 --trace 对指定文件进行debug --trace-ascii Like --跟踪但没有hex输出 --trace-time 跟踪/详细输出时，添加时间戳 --url Spet URL to work with -U/--proxy-user 设置代理用户名和密码 -V/--version 显示版本信息 -X/--request 指定什么命令 -y/--speed-time 放弃限速所要的时间。默认为30 -Y/--speed-limit 停止传输速度的限制，速度时间'秒 -z/--time-cond 传送时间设置 -0/--http1.0 使用HTTP 1.0 -1/--tlsv1 使用TLSv1（SSL） -2/--sslv2 使用SSLv2的（SSL） -3/--sslv3 使用的SSLv3（SSL） --3p-quote like -Q for the source URL for 3rd party transfer --3p-url 使用url，进行第三方传送 --3p-user 使用用户名和密码，进行第三方传送 -4/--ipv4 使用IP4 -6/--ipv6 使用IP6 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Linux/curl command.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Linux/curl command.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"Linux/shell echo写入多行文字到文本中.html":{"url":"Linux/shell echo写入多行文字到文本中.html","title":"shell echo写入多行文字到文本中","keywords":"","body":"1. shell echo写入多行文字到文本中1.1. 单行文本1.2. 多行文本1. shell echo写入多行文字到文本中 1.1. 单行文本 #! /bin/bash echo Hello > filename.txt 1.2. 多行文本 #! /bin/bash echo \"测试写文件\" cat>test1 其中， 表示当遇到EOF时结束输入。 cat>test1 这间没有空格 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Linux/shell echo写入多行文字到文本中.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Linux/shell echo写入多行文字到文本中.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"Linux/zsh.html":{"url":"Linux/zsh.html","title":"zsh","keywords":"","body":"1. oh-my-zsh 终端主机名设置（$PROMPT）1. oh-my-zsh 终端主机名设置（$PROMPT） 发表于 2019-02-01 更新于 2020-04-25 分类于 linux 阅读次数： 440 Valine： 1 自从用上 zsh 后上瘾一发不可收拾，我给几乎所有机器包括路由器都用上 oh-my-zsh，那么问题来了，zsh 默认主题是 robbyrussell，所有机器登录后都是这个样子： 如果经常远程登录 ssh 就很蛋疼，分不清谁是谁，命令在错误的机器上运行也不知道。 感谢 oh-my-zsh终端用户名设置（PS1）一文的启发，修改 $PROMPT 变量即可，robbyrussell 主题默认的 $PROMPT 值为 ➜ ~ echo $PROMPT ${ret_status} %{$fg[cyan]%}%c%{$reset_color%} $(git_prompt_info) 为了方便区分不同机器，需要加入机器名 hostname，一条命令足矣： PROMPT=%m\\ $PROMPT %m 对应的就是 hostname，将这句命令加入 ~/.zshrc 使它每次登录自动生效 echo \"PROMPT=%m\\ \\$PROMPT\" >> .zshrc 附 PROMPT 各属性意义 code info %T 系统时间（时：分） %* 系统时间（时：分：秒） %D 系统日期（年-月-日） %n 你的用户名 %B - %b 开始到结束使用粗体打印 %U - %u 开始到结束使用下划线打印 %d 你目前的工作目录 %~ 你目前的工作目录相对于～的相对路径 %M 计算机的主机名 %m 计算机的主机名（在第一个句号之前截断） %l 你当前的tty powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Linux/zsh.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Linux/zsh.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"MAC/":{"url":"MAC/","title":"MAC","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/MAC/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/MAC/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"MAC/APP.html":{"url":"MAC/APP.html","title":"APP","keywords":"","body":"1. Go2shell1. Go2shell powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/MAC/APP.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/MAC/APP.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"MAC/mac开机启动原理.html":{"url":"MAC/mac开机启动原理.html","title":"mac开机启动原理","keywords":"","body":"1. mac开机启动原理和关闭apachectl开机启动2. mac 下nginx加入开机启动1. mac开机启动原理和关闭apachectl开机启动 cd /System/Library/LaunchDaemons/ //可以看到所有自动启动的plist文件 想关掉mac下apache的开机启动 sudo launchctl unload -w /System/Library/LaunchDaemons/org.apache.httpd.plist 如果想再打开： sudo launchctl load -w /System/Library/LaunchDaemons/org.apache.httpd.plist 系统的开机启动plist目录：/System/Library/LaunchDaemons/ 用户的开启启动plist目录：/Library/LaunchDaemons/ 2. mac 下nginx加入开机启动 通过brew install nginx后设置开机启动项 sudo cp /usr/local/opt/nginx/*.plist /Library/LaunchDaemons sudo launchctl load -w /Library/LaunchDaemons/homebrew.mxcl.nginx.plist powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/MAC/mac开机启动原理.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/MAC/mac开机启动原理.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"MYSQL/":{"url":"MYSQL/","title":"MYSQL","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/MYSQL/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/MYSQL/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"MYSQL/mysql install bundle.html":{"url":"MYSQL/mysql install bundle.html","title":"mysql install bundle","keywords":"","body":"1. Centos7.3.1611安装mysql5.7.18 rpm教程 并设置datadir1.1.1. 一、卸载MariaDB1.1.2. 二、到mysql的官网下载最新版mysql的rpm集合包1.1.3. 四.安装MySQL解压包1.1.4. 五、数据库初始化1.1.5. 六、启动mysql数据库1.1.6. 七、登录mysql数据库并创建Mysql新密码1. Centos7.3.1611安装mysql5.7.18 rpm教程 并设置datadir 1.1.1. 一、卸载MariaDB CentOS7默认安装MariaDB而不是MySQL，而且yum服务器上也移除了mysql相关的软件包。因为MariaDB和MySQL可能会冲突，故先卸载MariaDB。 \\1. 安装新版mysql之前，我们需要将系统自带的mariadb-lib卸载 [root@localhost ~]# rpm -qa | grep -i mariadb mariadb-libs-5.5.52-1.el7.x86_64 [root@localhost ~]# rpm -e --nodeps mariadb-libs-5.5.52-1.el7.x86_64 注：详细卸载教程可自行百度，很简单。 1.1.2. 二、到mysql的官网下载最新版mysql的rpm集合包 mysql-5.7.18-1.el7.x86_64.rpm-bundle.tar 1. 通过xshell的rz命令将mysql-5.7.18-1.el7.x86_64.rpm-bundle.tar上传到Linux系统中。 注：我上传到的路径 /usr/local/tools 2. 通过mkdir命令创建mysql目录，放入解压后的文件，为以后的安装做准备。 3.解压压缩包到mysql目录 1.1.3. 四.安装MySQL解压包 注：所有解压包，不一定需要全部安装、注意安装顺序 以下是安装顺序 这几个包由依赖关系。执行有先后其中，client依赖于libs，server依赖于common和client. rpm -ivh mysql-community-common-5.7.18-1.el7.x86_64.rpm // rpm -ivh mysql-community-libs-5.7.18-1.el7.x86_64.rpm // rpm -ivh mysql-community-libs-compat-5.7.18-1.el7.x86_64.rpm rpm -ivh mysql-community-client-5.7.18-1.el6.x87_64.rpm //客户端安装包 rpm -ivh mysql-community-server-5.7.18-1.el6.x87_64.rpm //服务端安装包 rpm -ivh mysql-community-devel-5.7.18-1.el7.x87_64.rpm //包含开发用的库头文件安装包 注: i-install安装；v-verbose进度条；h-hash哈希校验；安装过程中可能会出现 perl 环境等问题，按提示百度就行。 [root@localhost upload]# rpm -ivh MySQL-server-5.5.25a-1.rhel5.x86_64.rpm error: Failed dependencies: libaio.so.1()(64bit) is needed by MySQL-server-5.5.25a-1.rhel5.x86_64 libaio.so.1(LIBAIO_0.1)(64bit) is needed by MySQL-server-5.5.25a-1.rhel5.x86_64 libaio.so.1(LIBAIO_0.4)(64bit) is needed by MySQL-server-5.5.25a-1.rhel5.x86_64 网站百度了很多个文章，都不行，后来发现有一篇文章写的方法可以，命令如下： yum install libaio 这样就ok了，就可以继续安装mysql了 1.1.4. 五、数据库初始化 1.为了保证数据库目录为与文件的所有者为 mysql 登陆用户，如果你的linux系统是以 root 身份运行 mysql 服务，需要执行下面的命令初始化 groupadd -r mysql && useradd -r -g mysql -s /sbin/nologin -M mysql [root@localhost mysql]# mysqld --initialize --user=mysql 如果是以 mysql 身份登录运行，则可以去掉 –user 选项。 注： –initialize 选项默认以“安全”模式来初始化，则会为 root 用户生成一个密码并将该密码标记为过期，登陆后你需要设置一个新的密码 这里演示使用的 –initialize 初始化的，会生成一个 root 账户密码，密码在log文件里，红色区域的就是自动生成的密码 使用 cat /var/log/mysqld.log 命令打开日志文件 1.1.5. 六、启动mysql数据库 注：systemctl是Centos7特有的启动方式 systemctl start mysqld.service 1.1.6. 七、登录mysql数据库并创建Mysql新密码 1.登录mysql，然后输入日志中的随机密码。 mysql -u root -p; 2.设置你的密码。 set password = password('你的密码'); 3.设置授权(远程访问) grant all privileges on *.* to 'root' @'%' identified by'你的密码'; 4.刷新权限 flush privileges; （转） /charlie/software/mysql/data是我新建的MySQL目录，修改文件夹权限：sudo chown -R mysql:msyql /charlie/software/mysql/data 修改/etc/my.cnf文件 [mysqld] character_set_server=utf8 socket=/charlie/software/mysql/data/mysql.sock datadir=/charlie/software/mysql/data #socket=/var/lib/mysql/mysql.sock #datadir=/var/lib/mysql 然后做一个mysql.sock 链接： ln -s /charlie/software/mysql/data/mysql.sock /var/lib/mysql/mysql.sock 执行sudo systemctl start mysqld 会没有反应。然后在/var/log/mysqld.log查看日志，ERR错误会有一个 Can't start server : Bind on unix socket: Permission denied这样子的错误。 执行命令getenforce是不是出现的是Enforcing，如果是的话，执行setenforce 0 临时关闭，就可以启动MySQL。 然后执行sudo /usr/bin/mysql_secure_installation就可以设置了。 如果后面执行mysql相关命令出现：Can’t connect to local MySQL server through socket错误。 编辑/etc/my.cnf文件添加 [mysql] socket=/charlie/software/mysql/data/mysql.sock 主要还是对Linux不熟悉，找了很久才发现有可能是selinux的原因。 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/MYSQL/mysql install bundle.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/MYSQL/mysql install bundle.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"MYSQL/mysql install param.html":{"url":"MYSQL/mysql install param.html","title":"mysql install param","keywords":"","body":"cmake . -DCMAKE_INSTALL_PREFIX=/application/mysql-5.5.32 \\ -DMYSQL_DATADIR=/application/mysql-5.5.32/data \\ -DMYSQL_UNIX_ADDR=/application/mysql-5.5.32/tmp/msyql.sock \\ -DDEFAULT_CHARSET=utf8 \\ -DDEFAULT_COLLATION=utf8_general_ci \\ -DEXTRA_CHARSETS=gbk,gb2312,utf8,ascii \\ -DENABLED_LOCAL_INFILE=ON \\ -DWITH_INNOBASE_STORAGE_ENGINE=1 \\ -DWITH_FEDERATED_STORAGE_ENGINE=1 \\ -DWITH_BLACKHOLE_STORAGE_ENGINE=1 \\ -DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 \\ -DWITHOUT_RARTITION_STORAGE_ENGINE=1 \\ -DWITH_FAST_MUTEXES=1 \\ -DWITH_ZLIB=bundled \\ -DENABLED_LOCAL_INFILE=1 \\ -DWITH_PEADLINE=1 \\ -DWITH_EMBEDDED_SERVER=1 \\ -DWITH_DEBUG=0 create user and group groupadd mysql useradd mysql -s /sbin/nologin -M -g mysql ln -s /application/mysql-5.5.32/ /application/mysql cpm mysql-5.5.32/support-files/my-small.cnf /etc/my.cnf echo 'export PATH=/application/mysql/bin:$PATH' >> /etc/profile tail -l /etc/profile source /etc/profile echo $PATH ln -s /application/mysql-5.5.32 /application/mysql cp mysql-5.5.32/support-files/my-small.cnf /etc/my.cnf chown -R mysql.mysql /application/mysql/data chmod -R 1777 /tmp cd /application/mysql/scripts ➜ scripts ./mysql_install_db --basedir=/application/mysql/ --datadir=/application/mysql/data --user=mysql Installing MySQL system tables... OK Filling help tables... OK To start mysqld at boot time you have to copy support-files/mysql.server to the right place for your system PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER ! To do so, start the server, then issue the following commands: /application/mysql//bin/mysqladmin -u root password 'new-password' /application/mysql//bin/mysqladmin -u root -h VM_0_3_centos password 'new-password' Alternatively you can run: /application/mysql//bin/mysql_secure_installation which will also give you the option of removing the test databases and anonymous user created by default. This is strongly recommended for production servers. See the manual for more instructions. You can start the MySQL daemon with: cd /application/mysql/ ; /application/mysql//bin/mysqld_safe & You can test the MySQL daemon with mysql-test-run.pl cd /application/mysql//mysql-test ; perl mysql-test-run.pl Please report any problems with the /application/mysql//scripts/mysqlbug script! ~ cd /application ➜ /application cp mysql/support-files/mysql.server /etc/init.d/mysqld chmod +x /etc/init.d/mysqld netstat -ltnup | grep 3306 select user,host from mysql.user; delete from mysql.user where user=''; grant all privileges on *.* to system@'localhost' identified by 'lodboy123' with grant option; chkconfig mysql on chkconfig --list mysqld powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/MYSQL/mysql install param.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/MYSQL/mysql install param.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"MYSQL/mysql install source.html":{"url":"MYSQL/mysql install source.html","title":"mysql install source","keywords":"","body":"1. CentOS 7.2使用源码包编译安装MySQL 5.7.22及一些操作2. centos7编译安装MySQL5.7.231. CentOS 7.2使用源码包编译安装MySQL 5.7.22及一些操作 Link 使用yum安装的MySQL一般版本比较旧，但是运行稳定。如果想要尝试最新的功能或者需要指定特殊的功能的话，就需要手工进行编译安装了。 一、下载安装包 (一)、先下载MySQL源码，网址为：https://dev.mysql.com/downloads/mysql/ : 在Select Operationg System中选择Source Code； 在下面的Select OS Version选择Generic Linux(Architecture Independent)； 然后再下面的部分可以看到Compressed TAR Archive，单击后面的Download； 在弹出的界面中选择最下面的No thanks, just start my download就可以开始下载了。 下载完成后，使用WinSCP将文件复制到服务器的/usr/local/src目录下即可。 也可以使用下面的方法直接在Linux中下载源码包，在/usr/local/src目录下直接用wget进行下载： cd /usr/local/src wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.20.tar.gz (二)、下载 boost 下载网址为：http://www.boost.org/users/download/ 这个版本的MySQL要求boost的版本是1.59，链接为： http://www.boost.org/users/history/version_1_59_0.html 下面给出boost 1.59.0的链接，在/usr/local/src目录下直接用wget进行下载 wget --no-check-certificate http://sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz 二、编译安装 (一)、安装必要的软件依赖： yum install -y cmake bison bison-devel libaio-devel gcc gcc-c++ git ncurses-devel (二)、解压MySQL源文件： tar -zxvf mysql-5.7.20.tar.gz 将boost的压缩包移动至解压后的源文件目录内: mv boost_1_65_1.tar.gz mysql-5.7.20 (三)、进入MySQL源文件目录，新建configure做为编译目录，并进入该目录: cd mysql-5.7.20 mkdir configure cd configure (四)、使用cmake进行生成编译环境： cmake .. -DBUILD_CONFIG=mysql_release \\ -DINSTALL_LAYOUT=STANDALONE \\ -DCMAKE_BUILD_TYPE=RelWithDebInfo \\ -DENABLE_DTRACE=OFF \\ -DWITH_EMBEDDED_SERVER=OFF \\ -DWITH_INNODB_MEMCACHED=ON \\ -DWITH_SSL=bundled \\ -DWITH_ZLIB=system \\ -DWITH_PAM=ON \\ -DCMAKE_INSTALL_PREFIX=/var/mysql/ \\ -DINSTALL_PLUGINDIR=\"/var/mysql/lib/plugin\" \\ -DDEFAULT_CHARSET=utf8 \\ -DDEFAULT_COLLATION=utf8_general_ci \\ -DWITH_EDITLINE=bundled \\ -DFEATURE_SET=community \\ -DCOMPILATION_COMMENT=\"MySQL Server (GPL)\" \\ -DWITH_DEBUG=OFF \\ -DWITH_BOOST=.. 如果编译出现错误，请先删除CMakeCache.txt后，再重新编译： rm -rf CMakeCache.txt 如果出现下面的提示就表示成功生成了编译环境： -- Configuring done -- Generating done (五)、使用make进行编译： make 编译完成后，会出现如下信息： [100%] Building CXX object sql/CMakeFiles/udf_example.dir/udf_example.cc.o Linking CXX shared module udf_example.so [100%] Built target udf_example [100%] Built target my_safe_process (六)、安装MySQL: make install 三、初始化数据库 (一)、添加mysql用户: useradd -s /sbin/nologin mysql (二)、新建数据库文件夹及日志文件夹，并更改用户为mysql: mkdir /mysql_data mkdir /var/mysql/log chown -R mysql:mysql /mysql_data/ chown -R mysql:mysql /var/mysql/log #建立文件 touch error.log #赋权限子目录及文件 chmod -R 777 /var/mysql/log (三)、修改配置文件 vim /etc/my.cnf 将[mysqld]项下的内容替换为： [mysqld] port=3306 datadir=/mysql_data log_error=/var/mysql/log/error.log basedir=/var/mysql/ 注意：my.cnf文件有以下配置 socket=/var/lib/mysql/mysql.sock 需要手动建立mysql.sock,并赋值读写执行权限 chmod -R 777 mysql.sock (四)、初始化数据库: /var/mysql/bin/mysqld --initialize --user=mysql 查看数据文件是否生成: [root@localhost configure]# ll /mysql_data/ 总用量 110620 -rw-r-----. 1 mysql mysql 56 10月 2 19:44 auto.cnf -rw-r-----. 1 mysql mysql 419 10月 2 19:44 ib_buffer_pool -rw-r-----. 1 mysql mysql 12582912 10月 2 19:44 ibdata1 -rw-r-----. 1 mysql mysql 50331648 10月 2 19:44 ib_logfile0 -rw-r-----. 1 mysql mysql 50331648 10月 2 19:44 ib_logfile1 drwxr-x---. 2 mysql mysql 4096 10月 2 19:44 mysql drwxr-x---. 2 mysql mysql 4096 10月 2 19:44 performance_schema drwxr-x---. 2 mysql mysql 12288 10月 2 19:44 sys 查看日志文件是否生成： [root@localhost mysql]# ll /var/mysql/log/ 总用量 4 -rw-r-----. 1 mysql mysql 802 10月 2 19:47 error.log 四、配置启动文件及环境变更 (一)、配置启动文件 1. 从模板文件中复制启动文件： cp /var/mysql/support-files/mysql.server /etc/init.d/mysqld 2. 修改启动文件： vim /etc/init.d/mysqld 找到如下二行： basedir= datadir= 修改为： basedir=/var/mysql/ datadir=/mysql_data 3. 启动mysql: [root@localhost mysql]# /etc/init.d/mysqld start Starting MySQL. SUCCESS! 可以看到提示，已经成功启动。当然你也可以使用systemctl来启动MySQL，但执行后，不会有任何提示。 [root@localhost ~]# systemctl start mysqld 注意：数据库如果是这样的提示 Failed to start mysqld.service: Unit not found （有些文章说不需要这个，会冲突参考：CentOS 7为什么放弃了MySQL，而改使用MariaDB？） （https://www.cnblogs.com/progor/archive/2018/01/30/8387301.html） 解决方法如下: 　　首先需要安装mariadb-server 　　~]# yum install -y mariadb-server 　　启动服务 　　~]# systemctl start mariadb.service 　　添加到开机启动 　　~]# systemctl enable mariadb.service 进行一些安全设置，以及修改数据库管理员密码 　　~]# mysql_sceure_installation 至此完成! 可以测试一下 　　~]# mysql -u root -p (二)、设置MySQL开机自动启动： [root@localhost ~]# systemctl enable mysqld mysqld.service is not a native service, redirecting to /sbin/chkconfig. Executing /sbin/chkconfig mysqld on (三)、配置MySQL环境变量： vim /root/.bash_profile 找到下面一行： PATH=$PATH:$HOME/bin 修改为： PATH=$PATH:$HOME/bin:/var/mysql/bin (四)、修改root的初始密码 1. 查看root的初始密码 MySQL从5.7开始不支持安装后使用空密码进行登录，因此在这里需要先查询程序生成的临时密码： [root@localhost ~]# cat /var/mysql/log/error.log |grep 'A temporary password' 2017-11-13T06:28:23.096812Z 1 [Note] A temporary password is generated for root@localhost: wa&sk371_,US 最后一行冒号后面的部分bkv,dy,)o7Ss就是初始密码。 2. 登录MySQL并修改初始密码： 使用初始密码登录MySQL: [root@localhost ~]# mysql -uroot -p Enter password: 登录后立即修改root密码： mysql> alter user 'root'@'localhost' identified by 'your_password'; 并不是期望的： Query OK, 0 rows affected (0.00 sec) 而是： bash: alter: command not found... mysql> update user set passsword=\"123456\" where user=\"root\"; 也是：bash: alter: command not found. 解决方法： 1、修改 /etc/my.cnf，在 [mysqld] 小节下添加一行：skip-grant-tables=1 这一行配置让 mysqld 启动时不对密码进行验证 2、重启 mysqld 服务：systemctl restart mysqld 3、使用 root 用户登录到 mysql：mysql -u root 4、切换到mysql数据库，更新 user 表： update user set authentication_string = password('root'), password_expired = 'N', password_last_changed = now() where user = 'root'; 在之前的版本中，密码字段的字段名是 password，5.7版本改为了 authentication_string 5、退出 mysql，（exit或者quit）编辑 /etc/my.cnf 文件，删除 skip-grant-tables=1 的内容 6、重启 mysqld 服务，再用新密码登录即可 `` (五)、测试 设置好以后，重新启动服务器，查看MySQL是否自动启动： [root@localhost ~]# ps aux |grep mysqld root 816 0.0 0.1 115388 1716 ? S 14:45 0:00 /bin/sh /var/mysql//bin/mysqld_safe --datadir=/mysql_data --pid-file=/mysql_data/localhost.localdomain.pid mysql 1034 1.0 17.6 1122908 179688 ? Sl 14:45 0:00 /var/mysql/bin/mysqld --basedir=/var/mysql/ --datadir=/mysql_data --plugin-dir=/var/mysql//lib/plugin --user=mysql --log-error=/var/mysql/log/error.log --pid-file=/mysql_data/localhost.localdomain.pid --port=3306 root 1119 0.0 0.0 112676 984 pts/1 R+ 14:46 0:00 grep --color=auto mysqld 出现以上信息就表示已经完成在CentOS7.2上手工编译、安装MySQL5.7.22全部过程) (六)、远程连接 1.用navicat远程连接，连接失败，解决方法 先用telnet 192.168.. 3306 ,连接不上，说明linux服务器，没有开启端口： 开启端口命令： /sbin/iptables -I INPUT -p tcp --dport 3306 -j ACCEPT 登录mysql授权： grant all privileges on . to 'root'@'%' identified by '123456'； flush privileges; 在windows下，用navicat连接成功 (七)、其它操作 查看开机自启动的服务使用chkconfig命令，如下： #chkconfig --list 或是只查看MySQL服务 #chkconfig --list mysqld 可以看到mysql的2~5为on，说明mysql服务会随机器启动而自动启动。 2、配置MySQL的开机自动启动 chkconfig --add mysql chkconfig mysqld on 3、命令启动/关闭MySQL实例： 在bin目录下：service mysqld start/stop /etc/init.d/mysqld start/stop 4、命令关闭MySQL mysqladmin -p -u root shutdown 5、检查mysql是否真正的启动 方法一：查询端口 #netstat -tulpn MySQL监控的是TCP的3306端口，图中命令操作结果的最后一行即是MySQL服务在运行中。 方法二：查询进程 ps -ef | grep mysqld 如果有mysqld_safe和mysqld两个进程，说明MySQL服务当前在启动状态。 centos7.2 查看防火墙状态 firewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running） systemctl stop firewalld.service #停止firewall systemctl disable firewalld.service #禁止firewall开机启动 init 6 或者 reboot #重启虚拟机，然后再输入第一条命令查看防火墙状态 netstat 和ifconfig不可用 yum search ifconfig 通过yum search 这个命令我们发现ifconfig这个命令是在net-tools.x86_64这个包里，接下来我们安装这个包就行了 运行 yum install net-tools 就OK了 2. centos7编译安装MySQL5.7.23 Link 关注 2018.09.02 17:57* 字数 1297 阅读 568评论 0喜欢 1 一、安装准备 ​ 源码包放在/usr/local/src 目录。我的软件安装目录统一指定在 /usr/local/'软件名'（如：/usr/local/nginx、/usr/local/mysql） ​ 下载mysql安装包、boot安装包 [root@study ~]# cd /usr/local/src/ [root@study src]# wget https://sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz [root@study src]# wget http://cdn.mysql.com/Downloads/MySQL-5.7/mysql-5.7.23.tar.gz 二、安装依赖包 [root@study src]# yum -y install gcc gcc-c++ ncurses ncurses-devel cmake bison 三、新建MySQL用户和用户组 [root@study src]#groupadd -r mysql && useradd -r -g mysql -s /sbin/nologin -M mysql 四、解压压缩包、预编译。创建MySQL数据库数据保存目录 /data/mysql [root@study src]# tar -zxvf boost_1_59_0.tar.gz [root@study src]# tar -zxvf mysql-5.7.23.tar.gz [root@study src]# mkdir -p /data/mysql [root@study src]# cd mysql-5.7.23 [root@study mysql-5.7.23]# cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \\ -DMYSQL_DATADIR=/data/mysql \\ -DSYSCONFDIR=/etc \\ -DWITH_INNOBASE_STORAGE_ENGINE=1 \\ -DWITH_PARTITION_STORAGE_ENGINE=1 \\ -DWITH_FEDERATED_STORAGE_ENGINE=1 \\ -DWITH_BLACKHOLE_STORAGE_ENGINE=1 \\ -DWITH_MYISAM_STORAGE_ENGINE=1 \\ -DENABLED_LOCAL_INFILE=1 \\ -DENABLE_DTRACE=0 \\ -DDEFAULT_CHARSET=utf8mb4 \\ -DDEFAULT_COLLATION=utf8mb4_general_ci \\ -DWITH_EMBEDDED_SERVER=1 \\ -DDOWNLOAD_BOOST=1 \\ -DWITH_BOOST=/usr/local/src/boost_1_59_0 五、编译安装，过程很漫长 [root@study mysql-5.7.23]# make -j grep processor /proc/cpuinfo | wc -l ​ #编译很消耗系统资源，小内存可能编译通不过 ​ 如报错：c++: internal compiler error: Killed (program cc1plus) ​ 主要原因大体上是因为内存不足。例如我用阿里云单核、1G内存就出现这样问题，网上找了办法。临时使用交换分区来解决 ​ 命令： ​ [root@ study mysql-5.7.23]# dd if=/dev/zero of=/swapfile bs=64M count=16 ​ [root@ study mysql-5.7.23]# mkswap /swapfile ​ [root@ study mysql-5.7.23]# swapon /swapfile ​ [root@ study mysql-5.7.23]# swapon -s ​ 完成后继续上面 make 命令 ​ 注：安装完毕后，删除交换分区 ​ [root@ study mysql-5.7.23]# swapoff /swapfile ​ [root@ study mysql-5.7.23]# rm -rf /swapfile [root@ study mysql-5.7.23]# make install 六、安装完毕后，设置启动脚本，开机自启动 [root@study mysql-5.7.23]# ls -lrt /usr/local/mysql [root@study mysql-5.7.23]# cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld [root@study mysql-5.7.23]# chmod +x /etc/init.d/mysqld [root@study mysql-5.7.23]# systemctl enable mysqld mysqld.service is not a native service, redirecting to /sbin/chkconfig. Executing /sbin/chkconfig mysqld on 七、添加配置文件，设置项比较多，需要根据自己环境、硬件来设置，下面仅供参考。 vi /etc/my.cnf [client] port = 3306 socket = /tmp/mysql.sock [mysqld] port = 3306 socket = /tmp/mysql.sock basedir = /usr/local/mysql datadir = /data/mysql pid-file = /data/mysql/mysql.pid user = mysql bind-address = 0.0.0.0 server-id = 1 init-connect = 'SET NAMES utf8mb4' character-set-server = utf8mb4 #skip-name-resolve #skip-networking back_log = 300 max_connections = 1000 max_connect_errors = 6000 open_files_limit = 65535 table_open_cache = 128 max_allowed_packet = 4M binlog_cache_size = 1M max_heap_table_size = 8M tmp_table_size = 16M read_buffer_size = 2M read_rnd_buffer_size = 8M sort_buffer_size = 8M join_buffer_size = 8M key_buffer_size = 4M thread_cache_size = 8 query_cache_type = 1 query_cache_size = 8M query_cache_limit = 2M ft_min_word_len = 4 log_bin = mysql-bin binlog_format = mixed expire_logs_days = 30 log_error = /data/mysql/error.log slow_query_log = 1 long_query_time = 1 slow_query_log_file = /data/mysql/slow.log performance_schema = 0 explicit_defaults_for_timestamp #lower_case_table_names = 1 skip-external-locking default_storage_engine = InnoDB #default-storage-engine = MyISAM innodb_file_per_table = 1 innodb_open_files = 500 innodb_buffer_pool_size = 64M innodb_write_io_threads = 4 innodb_read_io_threads = 4 innodb_thread_concurrency = 0 innodb_purge_threads = 1 innodb_flush_log_at_trx_commit = 2 innodb_log_buffer_size = 2M innodb_log_file_size = 32M innodb_log_files_in_group = 3 innodb_max_dirty_pages_pct = 90 innodb_lock_wait_timeout = 120 bulk_insert_buffer_size = 8M myisam_sort_buffer_size = 8M myisam_max_sort_file_size = 10G myisam_repair_threads = 1 interactive_timeout = 28800 wait_timeout = 28800 [mysqldump] quick max_allowed_packet = 16M [myisamchk] key_buffer_size = 8M sort_buffer_size = 8M read_buffer = 4M write_buffer = 4M 八、添加mysql的环境变量 [root@study mysql-5.7.23]# echo -e '\\n\\nexport PATH=/usr/local/mysql/bin:$PATH\\n' >> /etc/profile && source /etc/profile 九、初始化数据库 [root@study mysql-5.7.23]# mysql_install_db --verbose --user=mysql --basedir=/usr/local/mysql --datadir=/data/mysql 十、启动数据库，顺利的话，应该能正常启动 [root@study mysql-5.7.23]# systemctl start mysqld [root@study mysql-5.7.23]# systemctl status mysqld 十一、设置数据库root用户密码 [root@study mysql-5.7.23]# mysql_secure_installation 一路往下 y ，提示输入密码的地方，输入自己需要设置的密码即可。 用户密码策略分成低级 LOW 、中等 MEDIUM 和超强 STRONG 三种，推荐使用中等 MEDIUM 级别！ 十二、将MySQL数据库的动态链接库共享至系统链接库 一般MySQL数据库还会被类似于PHP等服务调用，所以我们需要将MySQL编译后的lib库文件添加至当前Linux主机链接库 /etc/ld.so.conf.d/下，这样MySQL服务就可以被其它服务调用了。 [root@study mysql-5.7.23]# ldconfig | grep mysql [root@study mysql-5.7.23]# echo \"/usr/local/mysql/lib\" > /etc/ld.so.conf.d/mysql.conf [root@study mysql-5.7.23]# ldconfig [root@study mysql-5.7.23]# ldconfig -v | grep mysql ldconfig: Can't stat /libx32: No such file or directory ldconfig: Path `/usr/lib' given more than once ldconfig: Path `/usr/lib64' given more than once ldconfig: Can't stat /usr/libx32: No such file or directory /usr/lib64/mysql: libmysqlclient.so.18 -> libmysqlclient.so.18.0.0 /usr/local/mysql/lib: libmysqlclient.so.20 -> libmysqlclient.so.20.3.10 十三、安装完毕，使用root登录试一把 [root@study mysql-5.7.23]# mysql -u root -p Enter password: 此时，输入密码后，若提示：You must reset your password using ALTER USER statement before executing，则如下操作 SET PASSWORD = PASSWORD('your password'); ALTER USER ‘root‘@‘localhost‘ PASSWORD EXPIRE NEVER; FLUSH PRIVILEGES; 完毕后，重新登录MySQL即可 mysql> show databases; +--------------------+ | Database | +--------------------+ | information_schema | | mysql | | performance_schema | | sys | +--------------------+ 4 rows in set (0.00 sec) powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/MYSQL/mysql install source.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/MYSQL/mysql install source.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"MYSQL/mysql isntall rpm.html":{"url":"MYSQL/mysql isntall rpm.html","title":"mysql isntall rpm","keywords":"","body":"1. Centos7.3安装和配置Mysql5.71. Centos7.3安装和配置Mysql5.7 第一步：获取mysql YUM源 进入mysql官网获取RPM包下载地址 https://dev.mysql.com/downloads/repo/yum/ 点击 下载 右击 复制链接地址 https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm 得到这个 这个就是Yum仓库的rpm包 其实就是一个下载地址 第二步：下载和安装mysql源 先下载 mysql源安装包 [root@localhost ~]# wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm -bash: wget: 未找到命令 我们先安装下wget yum -y install wget 然后执行 wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm 安装mysql源 yum -y localinstall mysql57-community-release-el7-11.noarch.rpm 第三步：在线安装Mysql yum -y install mysql-community-server 下载的东西比较多 要稍微等会； 第四步：启动Mysql服务 systemctl start mysqld 第五步：设置开机启动 [root@localhost ~]# systemctl enable mysqld [root@localhost ~]# systemctl daemon-reload 第六步：修改root本地登录密码 mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个临时的默认密码。 [root@localhost ~]# vi /var/log/mysqld.log 这里的临时密码 eMV.R#mWe3ha [root@localhost ~]# mysql -u root -p Enter password: 输入临时密码 进入mysql命令行； mysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'ZhipengWang2012@'; Query OK, 0 rows affected (0.00 sec) 修改密码为 ZhipengWang2012@ (备注 mysql5.7默认密码策略要求密码必须是大小写字母数字特殊字母的组合，至少8位) 第七步：设置允许远程登录 Mysql默认不允许远程登录，我们需要设置下，并且防火墙开放3306端口； mysql> GRANT ALL PRIVILEGES ON . TO 'root'@'%' IDENTIFIED BY 'ZhipengWang2012@' WITH GRANT OPTION; Query OK, 0 rows affected, 1 warning (0.01 sec) mysql> exit; Bye 退出下； [root@localhost ~]# firewall-cmd --zone=public --add-port=3306/tcp --permanent success [root@localhost ~]# firewall-cmd --reload success [root@localhost ~]# 开放3306端口 第八步：配置默认编码为utf8 修改/etc/my.cnf配置文件，在[mysqld]下添加编码配置，如下所示： [mysqld] character_set_server=utf8 init_connect='SET NAMES utf8' datadir=/var/lib/mysql socket=/var/lib/mysql/mysql.sock # Disabling symbolic-links is recommended to prevent assorted security risks symbolic-links=0 log-error=/var/log/mysqld.log pid-file=/var/run/mysqld/mysqld.pid [client] default-character-set=utf8 [root@localhost ~]# vi /etc/my.cnf 编辑保存完 重启mysql服务； [root@localhost ~]# systemctl restart mysqld [root@localhost ~]# 查看下编码： mysql> show variables like '%character%'; +--------------------------+----------------------------+ | Variable_name | Value | +--------------------------+----------------------------+ | character_set_client | utf8 | | character_set_connection | utf8 | | character_set_database | utf8 | | character_set_filesystem | binary | | character_set_results | utf8 | | character_set_server | utf8 | | character_set_system | utf8 | | character_sets_dir | /usr/share/mysql/charsets/ | +--------------------------+----------------------------+ 8 rows in set (0.00 sec) 第九步：测试 我们用本机的sqlyog远程连接下虚拟机里的mysql OK 至此 Mysql安装配置完毕； powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/MYSQL/mysql isntall rpm.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/MYSQL/mysql isntall rpm.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"MYSQL/mysql.html":{"url":"MYSQL/mysql.html","title":"mysql","keywords":"","body":"set global validate_password_policy=0 //设置密码复杂程度 set global validate_password_length=1 //设置密码长度程度 set PASSWORD = PASSWORD('123456'); powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/MYSQL/mysql.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/MYSQL/mysql.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"Nginx/":{"url":"Nginx/","title":"Nginx","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Nginx/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Nginx/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"Nginx/Mac开机自启动NGINX.html":{"url":"Nginx/Mac开机自启动NGINX.html","title":"Mac开机自启动NGINX","keywords":"","body":"1. Mac开机自启动NGINX和PHP1. Mac开机自启动NGINX和PHP Mac开机自启动NGINX和PHP 开机启动nginx: 在 /Library/LaunchDaemons/ 目录新建 org.macports.nginx.plist 文件: Label org.macports.nginx ProgramArguments /usr/local/bin/nginx KeepAlive 加载配置:launchctl load -w /Library/LaunchDaemons/org.macports.nginx.plist 开机启动php: 在 /Library/LaunchDaemons/ 目录新建 org.php.php-fpm.plist 文件: Label org.php.php-fpm ProgramArguments /usr/sbin/php-fpm KeepAlive 加载配置:launchctl load -w /Library/LaunchDaemons/org.php.php-fpm.plist Reference: launchd.plist-- System wide and per-user daemon/agent configuration files powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Nginx/Mac开机自启动NGINX.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Nginx/Mac开机自启动NGINX.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"Nginx/brew install nginx.html":{"url":"Nginx/brew install nginx.html","title":"brew install nginx","keywords":"","body":"1. nginx: [emerg] bind() to 0.0.0.0:80 failed (13: Permission denied)==> Renamed Formulae ark -> velero gloo-ctl -> glooctl ==> Deleted Formulae at-spi2-atk gdnsd go@1.8 monax plan9port protobuf@2.6 solr@5.5 tmux-cssh at-spi2-core go@1.4 libutf pdftoedn protobuf@2.5 ruby@2.3 solr@6.6 zxing-cpp ==> Installing dependencies for nginx: openssl and pcre ==> Installing nginx dependency: openssl ==> Downloading https://homebrew.bintray.com/bottles/openssl-1.0.2r.high_sierra.bottle.tar.gz ==> Downloading from https://akamai.bintray.com/2b/2b68bd92c0c2faea5a1e70cc57a2403482ab2d83d0201bb42016c57c754427a5?__gda__=exp=1555223808~hmac=7d42885acb1aa9e94b1d7c6 ######################################################################## 100.0% ==> Pouring openssl-1.0.2r.high_sierra.bottle.tar.gz ==> Caveats A CA file has been bootstrapped using certificates from the SystemRoots keychain. To add additional certificates (e.g. the certificates added in the System keychain), place .pem files in /usr/local/etc/openssl/certs and run /usr/local/opt/openssl/bin/c_rehash openssl is keg-only, which means it was not symlinked into /usr/local, because Apple has deprecated use of OpenSSL in favor of its own TLS and crypto libraries. If you need to have openssl first in your PATH run: echo 'export PATH=\"/usr/local/opt/openssl/bin:$PATH\"' >> ~/.zshrc For compilers to find openssl you may need to set: export LDFLAGS=\"-L/usr/local/opt/openssl/lib\" export CPPFLAGS=\"-I/usr/local/opt/openssl/include\" ==> Summary &#x1F37A; /usr/local/Cellar/openssl/1.0.2r: 1,795 files, 12.1MB ==> Installing nginx dependency: pcre ==> Downloading https://homebrew.bintray.com/bottles/pcre-8.43.high_sierra.bottle.tar.gz ==> Downloading from https://akamai.bintray.com/03/0389911a93a88efd4a69b52dea8ecb872fdb55bcfff45d2f7313be5f79730861?__gda__=exp=1555223825~hmac=c70fce4e171481df7b23d59 ######################################################################## 100.0% ==> Pouring pcre-8.43.high_sierra.bottle.tar.gz &#x1F37A; /usr/local/Cellar/pcre/8.43: 204 files, 5.5MB ==> Installing nginx ==> Downloading https://homebrew.bintray.com/bottles/nginx-1.15.11.high_sierra.bottle.tar.gz ==> Downloading from https://akamai.bintray.com/36/3654e93805660f9eaef26ee986db315ba0d33ee7f0d7f72f913e5ae5cdb65a2d?__gda__=exp=1555223833~hmac=f196cee928682537f31e054 ######################################################################## 100.0% ==> Pouring nginx-1.15.11.high_sierra.bottle.tar.gz ==> Caveats Docroot is: /usr/local/var/www The default port has been set in /usr/local/etc/nginx/nginx.conf to 8080 so that nginx can run without sudo. nginx will load all files in /usr/local/etc/nginx/servers/. To have launchd start nginx now and restart at login: brew services start nginx Or, if you don't want/need a background service you can just run: nginx ==> Summary &#x1F37A; /usr/local/Cellar/nginx/1.15.11: 25 files, 2MB ==> `brew cleanup` has not been run in 30 days, running now... Removing: /usr/local/Cellar/openssl/1.0.2q... (1,794 files, 12.1MB) Removing: /Users/fh/Library/Caches/Homebrew/openssl--1.0.2q.high_sierra.bottle.tar.gz... (3.7MB) Removing: /usr/local/Cellar/pcre/8.42... (204 files, 5.3MB) Removing: /Users/fh/Library/Caches/Homebrew/python--3.7.2_1.high_sierra.bottle.1.tar.gz... (14.4MB) Removing: /Users/fh/Library/Caches/Homebrew/sqlite--3.26.0_1.high_sierra.bottle.1.tar.gz... (1.8MB) Removing: /Users/fh/Library/Caches/Homebrew/watchman--4.9.0_1.high_sierra.bottle.tar.gz... (543.0KB) Removing: /Users/fh/Library/Logs/Homebrew/pandoc... (64B) Removing: /Users/fh/Library/Logs/Homebrew/go... (64B) Removing: /Users/fh/Library/Logs/Homebrew/maven... (101B) Removing: /Users/fh/Library/Logs/Homebrew/watchman... (303B) Pruned 0 symbolic links and 3 directories from /usr/local ==> Caveats ==> openssl A CA file has been bootstrapped using certificates from the SystemRoots keychain. To add additional certificates (e.g. the certificates added in the System keychain), place .pem files in /usr/local/etc/openssl/certs and run /usr/local/opt/openssl/bin/c_rehash openssl is keg-only, which means it was not symlinked into /usr/local, because Apple has deprecated use of OpenSSL in favor of its own TLS and crypto libraries. If you need to have openssl first in your PATH run: echo 'export PATH=\"/usr/local/opt/openssl/bin:$PATH\"' >> ~/.zshrc For compilers to find openssl you may need to set: export LDFLAGS=\"-L/usr/local/opt/openssl/lib\" export CPPFLAGS=\"-I/usr/local/opt/openssl/include\" ==> nginx Docroot is: /usr/local/var/www The default port has been set in /usr/local/etc/nginx/nginx.conf to 8080 so that nginx can run without sudo. nginx will load all files in /usr/local/etc/nginx/servers/. To have launchd start nginx now and restart at login: brew services start nginx Or, if you don't want/need a background service you can just run: nginxZZ 1. nginx: [emerg] bind() to 0.0.0.0:80 failed (13: Permission denied) nginx: the configuration file /home/work/local-qc/nginx/conf/nginx.conf syntax is ok nginx: [emerg] bind() to 0.0.0.0:80 failed (13: Permission denied) nginx: configuration file /home/work/local-qc/nginx/conf/nginx.conf test failed 原因：当前用户对该位置没有写入权限 解决办法： 1.使用命令：sudo /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf 以root权限启动 2.使用命令：sudo chmod -R a+rw /usr/local/nginx 给所有用户赋权限（个人学习，不考虑安全问题） ​ /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf 启动Nginx 注：以非root权限启动时，会出现 nginx: [emerg] bind() to 0.0.0.0:80 failed (13: Permission denied) 错误 原因：Linux只有root用户可以使用1024一下的端口 解决办法：1.已root权限启动 2.将 /usr/local/nginx/conf/nginx.conf 文件中的80端口改为1024以上 server { # listen 80 listen 8080 …… } powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Nginx/brew install nginx.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Nginx/brew install nginx.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"Nginx/nginx编译安装参数.html":{"url":"Nginx/nginx编译安装参数.html","title":"nginx编译安装参数","keywords":"","body":"1. NGINX编译安装1. NGINX编译安装 --prefix=/usr/local/Cellar/nginx/1.15.8 --sbin-path=/usr/local/Cellar/nginx/1.15.8/bin/nginx --with-cc-opt='-I/usr/local/opt/pcre/include -I/usr/local/opt/openssl/include' --with-ld-opt='-L/usr/local/opt/pcre/lib -L/usr/local/opt/openssl/lib' --conf-path=/usr/local/etc/nginx/nginx.conf --pid-path=/usr/local/var/run/nginx.pid --lock-path=/usr/local/var/run/nginx.lock --http-client-body-temp-path=/usr/local/var/run/nginx/client_body_temp --http-proxy-temp-path=/usr/local/var/run/nginx/proxy_temp --http-fastcgi-temp-path=/usr/local/var/run/nginx/fastcgi_temp --http-uwsgi-temp-path=/usr/local/var/run/nginx/uwsgi_temp --http-scgi-temp-path=/usr/local/var/run/nginx/scgi_temp --http-log-path=/usr/local/var/log/nginx/access.log --error-log-path=/usr/local/var/log/nginx/error.log --with-debug --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_degradation_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-ipv6 --with-mail --with-mail_ssl_module --with-pcre --with-pcre-jit --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module 来brew install nginx的默认参数配置 --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC' --with-ld-opt='-Wl,-z,relro -Wl,-z,now -pie' centos powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Nginx/nginx编译安装参数.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Nginx/nginx编译安装参数.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"Nginx/proxy.html":{"url":"Nginx/proxy.html","title":"proxy","keywords":"","body":"1. NGINX配置1. NGINX配置 location /string/_extra_/ { proxy_pass http://ip:port/; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Nginx/proxy.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Nginx/proxy.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"Nodejs/":{"url":"Nodejs/","title":"Nodejs","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Nodejs/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Nodejs/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"Nodejs/install nodejs.html":{"url":"Nodejs/install nodejs.html","title":"install nodejs","keywords":"","body":"1. 在CentOS 7上安装Node.js的4种方法（yum安装和源码安装）1. 在CentOS 7上安装Node.js的4种方法（yum安装和源码安装） CentOS 7上的安装方法，其中涵盖了源码安装，已编译版本安装，EPEL（Extra Packages for Enterprise Linux）安装和通过NVM（Node version manager）安装这四种方法，其中，前两种方法基本上都是Linux通用的安装方式，特别是前者，其优点自然是可以安装最新的版本，至于后两者，因为安装简单且管理方便 源码安装 （非常推荐） 使用已编译版本安装 使用EPEL安装 使用NVM安装 一、源码安装 源码安装，下载是源码包，要进行编译和安装，编译过程，可以进行参数设定。这种方式灵活性比较大，版本/参数可以自己选择。 1.去官网下载对应的安装包 2.下载解压 (我一般下载的是.gz的文件) ;) //下载(没有wget,运行yum install wget -y) wget https://nodejs.org/dist/v9.8.0/node-v9.8.0-linux-x64.tar.xz //解压 xz -d node-v9.8.0-linux-x64.tar.xz tar -xvf node-v9.8.0-linux-x64.tar //或下载 wget http://nodejs.org/dist/v0.10.30/node-v0.10.30.tar.gz //解压 tar xzvf node-v* ;) 3.进入目录编译安装 (有可能要安装相关依赖: sudo yum install gcc gcc-c++) cd node-v* ./configure make sudo make install 4.查看版本（测试安装是否成功） node -v npm -v 二、使用EPEL安装 (yum安装方式) 0、了解linux版本 uname -a 命令查看到我的Linux系统位数是64位（备注：x86_64表示64位系统， i686 i386表示32位系统） 1、下载EPEL (第一步可能没用~,直接看第二步) 找的方法 Download the latest epel-release rpm from http://dl.fedoraproject.org/pub/epel/7/，下载rpm文件 https://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/ sudo rpm -ivh https://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/epel-release-7-11.noarch.rpm 2、安装完成，执行 ;) //https://github.com/nodesource/distributions //更新node.js各版本yum源 //Node.js v8.x安装命令 #curl --silent --location https://rpm.nodesource.com/setup_8.x | bash - //Node.js v7.x安装命令 #curl --silent --location https://rpm.nodesource.com/setup_7.x | bash - //Node.js v6.x安装命令 #curl --silent --location https://rpm.nodesource.com/setup_6.x | bash - //Node.js v5.x安装命令 #curl --silent --location https://rpm.nodesource.com/setup_5.x | bash - //yum安装node.js yum install -y nodejs ;) 3、检查Node.js和npm版本 node -v npm -v 我在yum安装的时候运行了第一步EPEL,导致epel源出错或版本不一致,最后删除了/etc/yum.repos.d/的相关node源,yum clean all --> yum makecache ,后才可以正常安装nodejs 三、使用已编译版本安装 1.下载已编译版本 最新版本可在官网获得：传送门 cd ~ wget http://nodejs.org/dist/v0.10.30/node-v0.10.30-linux-x64.tar.gz 2.解压 sudo tar --strip-components 1 -xzvf node-v* -C /usr/local 3.老样子，测试安装 node --version 四、通过NVM安装 NVM（Node version manager）顾名思义，就是Node.js的版本管理软件，可以轻松的在Node.js各个版本间切换，项目源码GitHub 1.下载并安装NVM脚本 curl https://raw.githubusercontent.com/creationix/nvm/v0.13.1/install.sh | bash source ~/.bash_profile 2.列出所需要的版本 nvm list-remote 返回结果如下 ;) . . . v0.10.29 v0.10.30 v0.11.0 v0.11.1 v0.11.2 v0.11.3 v0.11.4 v0.11.5 v0.11.6 v0.11.7 v0.11.8 v0.11.9 v0.11.10 v0.11.11 v0.11.12 v0.11.13 ;) 3.安装相应的版本 nvm install v0.10.30 4.查看已安装的版本 nvm list -> v0.10.30 system 5.切换版本 nvm use v0.10.30 6.设置默认版本 nvm alias default v0.10.30 淘宝镜像: 由于官方镜像比较慢，直接执行以下命令，将镜像地址改为淘宝的npm镜像地址 npm config set registry https://registry.npm.taobao.org powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Nodejs/install nodejs.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Nodejs/install nodejs.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"PHPStorm/":{"url":"PHPStorm/","title":"PHPStorm","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/PHPStorm/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/PHPStorm/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"PHPStorm/configuration.html":{"url":"PHPStorm/configuration.html","title":"configuration","keywords":"","body":"1. PHPSTORM1.1. 风格1.2. 快捷键1.3. bootstrap1.4. 关闭angular提示1.5. Blade1.6. 修改代码风格1.7. Shell1.8. 字体大小设置1.9. PHP命令1.10. 创建项目1.11. Laravel1.11.1. Laravel Plugin1.11.2. laravel-ide-helper1.11.3. 其他插件1.11.4. 命令提示1.12. Git1.13. editorconfig1.14. composer1.15. 其他设置1.15.1. 取消格式化代码时 自动换行1.15.2. 快速加符号1.15.3. 解决NPM变慢的问题1.15.4. 自动换行1. PHPSTORM 下面在windows系统中介绍PHPSTORM使用,MAC使用与windows只是键盘布局差异。所以就不重复介绍了。 1.1. 风格 安装插件 Material Theme UI ，安装后重起phpstorm Tools -> Material Theme 中选择喜欢的样式就可以了 1.2. 快捷键 全屏幕快捷键 Keymap>Main menu>View>Toggle Distraction Free mode 为 f11健 Keymap>Main menu>View>Toggle Full Screen mode 为 alt f11健 Keymap>Tool Windows>Database 数据库管理 alt+shift+d Terminal 快捷键就使用默认的 alt+shift+t Remote Host 远程主机面板 alt+shift+h Run Command 切换命令控制台 alt+shift+m File Structure 查找文件定义的方法 alt+shift+j Navigate>File 查找文件 alt+p Recent Files 查找文件定义的方法 alt+e Editor Tabs>Close 关闭文件 alt+w File>Save All 保存全部 alt+s Code>Generate 快捷创建 alt+n 使用 MAC的同学习惯于 Command 键，所以本套按键设置大量定义了 alt 键 1.3. bootstrap 1.4. 关闭angular提示 以前使用angular.js比较多，现在主要使用vue.js，所在angular.js的提示暂时不需要。 settings>Editor>Live Templates 1.5. Blade PHPstorm 默认支持Laravel的blade 模板提示，但我们需要定义一下快捷键。 1.6. 修改代码风格 Editor>Code Style>PHP` 点击 `Set From...` ,我使用的是`Symfony2 1.7. Shell windows10 更改 Shell（用于全局使用ls，rm等Linux命令），Mac与Linux不需要设置。 C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe 1.8. 字体大小设置 鼠标滚动改变大小 Preferences | Editor | Font >Change font Size(Zoom)... 改变编辑区大小 Preferences | Editor | Font 改变终端字体大小 Preferences | Editor | Color Scheme | Console Font 改变文件列表等dialog字体大小 Preferences | Appearance & Behavior | Appearance > Use custom font 一般我录制课程的设置是 编辑区 35，终端35，文件列表25 1.9. PHP命令 Phpstorm中大量使用composer或命令行指令，所以需要设置合适的php命令 1.10. 创建项目 软件启动时 Create New Project 或 选择菜单 File>new Project ，下面是演示安装 Laravel 项目 1.11. Laravel 1.11.1. Laravel Plugin 在phpstorm中安装 laravel plugin 插件. Settings > Languages & Frameworks > PHP > Laravel` 点击开启 `Enable for this project 1.11.2. laravel-ide-helper laravel-ide-helper 用于实现方便的代码提示功能，详细查看插件官网 使用composer安装插件 composer require --dev barryvdh/laravel-ide-helper 第一步：在项目的composer.json中添加如下一行 \"require\": { \"laravel/framework\": \"5.0.*\", \"barryvdh/laravel-ide-helper\":\"dev-master\" } 第二步：执行composer update 第三步：添加service provider，打开项目config/app.php 于providers添加如下一行： Barryvdh\\LaravelIdeHelper\\IdeHelperServiceProvider::class, 第四步：执行 php artisan ide-helper:generate 第五步：修改composer.json的script里添加一行（这一步好像不需要就可以自动提示了 \"post-update-cmd\": [ \"php artisan clear-compiled\", \"php artisan optimize\", \"php artisan ide-helper:generate\" ] 1.11.3. 其他插件 在 IDE 中设置中搜索插件 Preferences | Plugins需要安装的插件列表如下： Laravel Plugin Laravel Snippets 1.11.4. 命令提示 settings>Tools>Command Line Tool Support 1.12. Git phpstorm很好的内置支持版本库管理。选择菜单 VCS>Enable Version Control Integration 安装 .ignore 插件用于管理 Git的 .gitignore 文件 提交代码 1.13. editorconfig editorConfig可以帮助开发人员在不同的编辑器和IDE中定义和维护一致的编码风格。下面是laravel 项目的配置，也是大叔使用的配置。官网 https://editorconfig.org/ 主流开源项目的 editorconfig 配置 https://github.com/editorconfig/editorconfig/wiki/Projects-Using-EditorConfig 在 phpstorm 插件中安装 editorconfig 插件，然后在项目根目录创建 .editorconfig 文件内容如下： root = true [*] charset = utf-8 end_of_line = lf insert_final_newline = true indent_style = space indent_size = 4 trim_trailing_whitespace = true [*.md] trim_trailing_whitespace = false [*.yml] indent_style = space indent_size = 2 说明 indent_style 设置缩进风格(tab是硬缩进，space为软缩进) indent_size 用一个整数定义的列数来设置缩进的宽度，如果indent_style为tab，则此属性默认为tab_width tab_width 用一个整数来设置tab缩进的列数。默认是indent_size end_of_line 设置换行符，值为lf、cr和crlf charset 设置编码，值为latin1、utf-8、utf-8-bom、utf-16be和utf-16le，不建议使用utf-8-bom trim_trailing_whitespace 设为true表示会去除换行行首的任意空白字符。 insert_final_newline 设为true表示使文件以一个空白行结尾 root 　　　表示是最顶层的配置文件，发现设为true时，才会停止查找.editorconfig文件 1.14. composer composer.json 配置文件管理，需要安装插件 1.15. 其他设置 1.15.1. 取消格式化代码时 自动换行 1.15.2. 快速加符号 为选中字符快速添加引号或其他包裹符号。 1.15.3. 解决NPM变慢的问题 生成 node_modules 目录后，加载特别慢并会卡死，解决方法如下： 1.15.4. 自动换行 Preferences | Editor | General | Use soft wraps in editor powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/PHPStorm/configuration.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/PHPStorm/configuration.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"Tampermonkey/":{"url":"Tampermonkey/","title":"Tampermonkey","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Tampermonkey/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Tampermonkey/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"Tampermonkey/youtube downloader.html":{"url":"Tampermonkey/youtube downloader.html","title":"youtube downloader","keywords":"","body":"1. youtube downloader1.1.1. improvement1. youtube downloader // ==UserScript== // @name Distill Video & Audio Downloader from 5000+ sites including Youtube, Support 1080P, 2K, 4k & 8K // @namespace https://distillvideo.com/ // @version 2.1.1 // @date 2018-06-17 // @description Browser extension to download video and audio from Youtube, Twitter, Vimeo, Facebook, Dailymotion, 1tv, VK, youku, bilibili and 5000 more sites for free. Fast and easy to use. // @author DistillVideo.com // @copyright 2018, DistillVideo.com // @homepage https://distillvideo.com/page/extensions // @downloadURL https://distillvideo.com/js/ditillvideo.user.js // @compatible chrome // @compatible firefox // @compatible opera // @compatible safari // @license GNU GPL v3.0 or later. http://www.gnu.org/copyleft/gpl.html // @match *://*.youtube.com/* // ==/UserScript== (function() { 'use strict'; if (document.getElementById(\"polymer-app\") || document.getElementById(\"masthead\") || window.Polymer) { setInterval(function() { if (window.location.href.indexOf(\"watch?v=\") \"; button += \"\"; button += \"\"; button += \"Download\"; var style = \"#distillvideo button::-moz-focus-inner{padding:0;margin:0}#distillvideo a{background-color:#15388c}#distillvideo a:hover{background-color:#E91E63}#distillvideo a:active{background-color:rgb(0, 151, 74)}\"; var tmp = wrap.innerHTML; wrap.innerHTML = tmp + button + style; } } function Addytpolymer() { var buttonDiv = document.createElement(\"span\"); buttonDiv.style.width = \"100%\"; buttonDiv.id = \"distillvideo\"; var addButton = document.createElement(\"a\"); addButton.appendChild(document.createTextNode(\"Download video\")); addButton.style.width = \"100%\"; addButton.style.backgroundColor = \"#15388c\"; addButton.style.color = \"white\"; addButton.style.textAlign = \"center\"; addButton.style.padding = \"5px 10px\"; addButton.style.margin = \"0px 10px\"; addButton.style.fontSize = \"14px\"; addButton.style.border = \"0\"; addButton.style.cursor = \"pointer\"; addButton.style.borderRadius = \"2px\"; addButton.style.fontFamily = \"Roboto, Arial, sans-serif\"; addButton.style.textDecoration = \"none\"; addButton.href = \"https://distillvideo.com/?url=https://www.youtube.com/watch?v=\" + disvidyouvid(window.location.href); addButton.target = \"_blank\"; buttonDiv.appendChild(addButton); var targetElement = document.querySelectorAll(\"[id='count']\"); for (var i = 0; i -1) { targetElement[i].appendChild(buttonDiv); } } } function disvidyouvid(url) { var p = /((http|https)\\:\\/\\/)?(?:[0-9A-Z-]+\\.)?(?:youtu\\.be\\/|youtube(?:-nocookie)?\\.com\\S*[^\\w\\s-])([\\w-]{11})(?=[^\\w-]|$)(?![?=&+%\\w.-]*(?:['\"][^<>]*>|))[?=&+%\\w.-]*/ig; return (url.match(p)) ? RegExp.$3 : false; } })(); 1.1.1. improvement from pytube import Playlist # pip install pytube3 from pytube import YouTube import datetime SAVE_PATH = \"./video\" def progress_func(self, stream, chunk, file_handle, bytes_remaining): size = self.video.filesize progress = (float(abs(bytes_remaining - size) / size)) * float(100) self.loadbar.setValue(progress) x = 1 # link = input(\"Paste your playlist link here: \\n\") link = 'https://www.youtube.com/playlist?list=PLRIk0XLm74PiDSmBiTaArst8BlcI2LO6G' playlist = Playlist(link) length = len(playlist.video_urls) print(length, 'videos will be downloaded.\\n') if len(playlist.video_urls) == 100: print(\"Due to limitations of youtube playlists you can only download the first 100 videos from the playlist. If you want to download more, you'll need to split your playlist into multiple seperate ones with 100 videos each.\") print(\"Downloading files started\") time = datetime.datetime.now() dirname = time.strftime(\"%c\").replace(\":\", \" \") for video_url in playlist.video_urls: video = YouTube(video_url) title = video.player_response['videoDetails']['title'].replace('Spring Cloud Alibaba从入门到进阶', '').strip() videoId = video.player_response['videoDetails']['videoId'] try: print(title, videoId) path = video.streams.get_highest_resolution().download(f\"{SAVE_PATH}/{dirname}/MP4\", filename=(title if title != '' else videoId)) print(\"file path:\", path) print(f\"Download {x} of {length} completed.\", path) except Exception as e: print(\"File could not be downloaded, skipping...\") print(e) print() x = x + 1 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Tampermonkey/youtube downloader.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Tampermonkey/youtube downloader.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"Word/":{"url":"Word/","title":"Word","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Word/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Word/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"Word/Untitled.html":{"url":"Word/Untitled.html","title":"Untitled","keywords":"","body":"1. word如何从中间开始插入页码1. word如何从中间开始插入页码 全文共20页，页码从第6页开始以1.2.3等形式编号。 依次这样操作：全文先插入页码，把光标放到第5页文档的末尾点击“页面布置”。“分隔符”下拉菜单下的“下一页”。 这就在第5页与后面的页间插入了一个分节符了，现在选中第6页的页码，把“设计”菜单下的“链接到前一条页眉”取消勾选后选中第6页的页码，点击插入－页码－键菜单下“设置页码格式”，选中“起始页码”并手动填入“1”，根据需要：选择阿拉拍数字格式，确定后，选中第一页的页码删除即可实现的效果。 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Word/Untitled.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/Word/Untitled.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"bootstrap/":{"url":"bootstrap/","title":"bootstrap","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/bootstrap/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/bootstrap/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"bootstrap/bootstrap组件和全局样式.html":{"url":"bootstrap/bootstrap组件和全局样式.html","title":"bootstrap组件和全局样式","keywords":"","body":"1. bootstrap组件和全局样式有什么区别1. bootstrap组件和全局样式有什么区别 1、BootStrap指定的四种屏幕尺寸：①超大PC屏幕——lg（large）：w>=1200px；②中等PC屏幕——md（medium）：1200px>w>=992px；③Pad屏幕——sm（small）：992px>w>=768px；④Phone屏幕——xs(extra small)：768px>w； 2、BootStrap中的两种容器：①定宽容器：.container——1170px(lg)、970px(md)、750px(sm)、100%(xs)；②变宽容器：.container——100%；③两种容器都有:before和:after，可以清除子元素的margin和float造成的影响； 3、全局CSS样式——表格：.table——基础表格；.table-bordered——带边框的表格；.table-striped——隔行变色的表格；.table-hover——带鼠标悬停效果的表格；.table-responsive——响应式表格，必须使用在table的父元素div上； 4、全局CSS样式——栅格布局系统：①最外层必须是容器类：.container或.container-fluid；②容器中放置行：.row；③行中放置列：.col；④针对不同的屏幕使用不同的列：.col-lg-：适用于超大PC屏幕；.col-md-：适用于中等PC屏幕；.col-sm-：适用于Pad屏幕；.col-xs-：适用于Phone屏幕；一个div可以同时声明多个不同屏幕下的列宽：⑤一行均分为12份，每个列都需要指定自己所占的份数：⑥每个列都可以指定向右的偏移量：，可以实现右错位的效果：⑦不同的列在不同的屏幕下有不同的适用性：.col-lg-：只适用于LG屏幕；.col-md-：适用于MD/LG屏幕；.col-sm-：适用于SM/MD/LG屏幕；.col-xs-：适用于XS/SM/MD/LG屏幕 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/bootstrap/bootstrap组件和全局样式.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/bootstrap/bootstrap组件和全局样式.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"cocos/":{"url":"cocos/","title":"cocos","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/cocos/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/cocos/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"cocos/webstorm 提示.html":{"url":"cocos/webstorm 提示.html","title":"webstorm 提示","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/cocos/webstorm 提示.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/cocos/webstorm 提示.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"git/":{"url":"git/","title":"git","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/git/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/git/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"git/git command.html":{"url":"git/git command.html","title":"git command","keywords":"","body":"1. Git使用教程1. Git使用教程 Git教程 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/git/git command.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/git/git command.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"git/git pull.html":{"url":"git/git pull.html","title":"git pull","keywords":"","body":"1. git 拉取远程指定分支 pull本地不存在的分支2. 一、查看本地已有的分支3. 二、本地检出一个新的分支并推送到远程仓库3.1. （一）.创建本地分支3.2. （二）.推送本地分支到远程仓库4. 三、将远程git仓库里的指定分支拉取到本地（本地不存在的分支）1. git 拉取远程指定分支 pull本地不存在的分支 默认，git项目只有一个分支，就是master,我们当然可以在本地创建多个分支，并推送到远程git管理平台上，或者将远程git管理平台上的其他分支拉取到自己电脑上。 2. 一、查看本地已有的分支 进入到项目根目录，打开命令行/终端，输入指令，将会显示该项目的本地的全部分支，其中、当前分支的前面有*号。 git branch 3. 二、本地检出一个新的分支并推送到远程仓库 3.1. （一）.创建本地分支 git checkout -b 新分支名 执行该指令后，会在本地创建一个新分支，该分支是从当前分支上检出的，所以所有文件内容都和当前分支一模一样，这是正常的。创建成功后，将自动切换至新分支上。 比如我要创建一个名为dev1的新分支： 此时，再执行git branch查看当前本地所有分支，就会看到两个分支：master与dev1. 3.2. （二）.推送本地分支到远程仓库 git push --set-upstream origin 分支名 例如，我要把上一步创建的本地dev1推送到远程仓库： 4. 三、将远程git仓库里的指定分支拉取到本地（本地不存在的分支） 当我想从远程仓库里拉取一条本地不存在的分支时： git checkout -b 本地分支名 origin/远程分支名 这个将会自动创建一个新的本地分支，并与指定的远程分支关联起来。 例如远程仓库里有个分支dev2,我本地没有该分支，我要把dev2拉到我本地： 若成功，将会在本地创建新分支dev2,并自动切到dev2上。 如果出现提示： fatal: Cannot update paths and switch to branch 'dev2' at the same time. Did you intend to checkout 'origin/dev2' which can not be resolved as commit? 表示拉取不成功。我们需要先执行 git fetch 然后再执行 git checkout -b 本地分支名 origin/远程分支名 即可。 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/git/git pull.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/git/git pull.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"git/git user.html":{"url":"git/git user.html","title":"git user","keywords":"","body":"1.1. Git2. 远程仓库2.1. 自动部署2.2. GitHub1.1. Git 安装 自诞生于 2005 年以来，Git 日臻成熟完善，在高度易用的同时，仍然保留着初期设定的目标。它的速度飞快，极其适合管理大项目 。 Git可以在windows、Mac、Linux全平台系统使用。登录 https://git-scm.com/downloads 下载你系统的Git软件并进行安装。 windows 用户我更建议安装 git for windows ，下载地址： https://gitforwindows.org/ 包信 Git Base 、Git Gui 安装后通过以下命令查看，如果显示版本号那就是安装成功了 git --version Gui Gui指Git的图形界面管理软件，https://git-scm.com/downloads/guis 这个网址列出了多个可供基本上所有平台使用的Gui软件。如果要使用Gui而非命令行操作，我推荐 sourcetree 这也是我多年使用的软件，功能强大、跨平台、免费。 配置 配置文件为 ~/.gitconfig ，执行任何Git配置命令后文件将自动创建。 第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录： git config --global user.email \"2300071698@qq.com\" git config --global user.name \"2300071698@qq.com\" 常用 初始化新仓库 git init 克隆旧仓库 git clone https://github.com/houdunwang/arr.git 查看状态 git status 提交单个文件 git add index.php 提交所有文件 git add -A 使用通配符提交 git add *.js 提交到仓库中 git commit -m '提示信息' 提交已经跟踪过的文件，不需要执行add git commit -a -m '提交信息' 删除版本库与项目目录中的文件 git rm index.php 只删除版本库中文件但保存项目目录中文件 git rm --cached index.php 修改最后一次提交 git commit --amend 清理 放弃没有提交的修改 git checkout . 删除没有add 的文件和目录 git clean -fd 显示将要删除的文件或目录 git clean -n Log 查看日志 git log 查看最近2次提交日志并显示文件差异 git log -p -2 显示已修改的文件清单 git log --name-only 显示新增、修改、删除的文件清单 git log --name-status 一行显示并只显示SHA-1的前几个字符 git log --oneline Alias 通过创建命令别名可以减少命令输入量。 git config --global alias.c commit 可以在配置文件 ~/.gitconfig 中查看或直接编辑 下面是一个Git命令Alias配置 [alias] a = add . c = commit s = status l = log b = branch 现在可以使用 git a 实现 git add . 一样的效果了。 系统Alias 在 ~/.bash_profile 文件中定义 alias gs=\"git status\" alias gc=\"git commit -m \" alias gl=\"git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)%Creset' --abbrev-commit \" alias gb=\"git branch\" alias ga=\"git add .\" alias go=\"git checkout\" 命令行直接使用 gs 即可以实现 git status 一样的效果了。 window 系统需要使用 git for window 中的 Git Base 软件 .gitignore .gitignore用于定义忽略提交的文件 所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。 匹配模式最后跟反斜杠（/）说明要忽略的是目录。 可以使用标准的 glob 模式匹配。 .idea /vendor .env /node_modules /public/storage *.txt Branch 分支用于为项目增加新功能或修复Bug时使用。 创建分支 git branch dev 查看分支 git branch 切换分支 git checkout dev 创建并切换分支 git checkout -b feature/bbs 合并dev分支到master git checkout master git merge dev 删除分支 git branch -d dev 删除没有合并的分支git branch -D dev 删除远程分支 git push origin :dev 查看未合并的分支(切换到master) git branch --no-merged 查看已经合并的分支(切换到master) git branch --merged 冲突 不同分修改同一个文件或不同开发者修改同一个分支文件都可能造成冲突，造成无法提交代码。 使用编辑器修改冲突的文件 添加暂存 git add . 表示已经解决冲突 git commit 提交完成 储藏（Stashing） 当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。 \"暂存\" 可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中，随时可以重新应用。 储藏工作 git stash 查看储藏列表 git stash list 应用最近的储藏 git stash apply 应用更早的储藏 git stash apply stash@{2} 删除储藏git stash drop stash@{0} 应用并删除储藏 git stash pop Tag Git 也可以对某一时间点上的版本打上标签 ，用于发布软件版本如 v1.0 添加标签 git tag v1.0 列出标签 git tag 推送标签 git push --tags 删除标签 git tag -d v1.0.1 删除远程标签 git push origin :v1.0.1 发布 对mster分支代码生成压缩包供使用者下载使用，--prefix 指定目录名 git archive master --prefix='hdcms/' --format=zip > hdcms.zip 2. 远程仓库 下面是最热的Github进行讲解，使用码云、codeing 等国内仓库使用方式一致，就不在赘述了。 创建仓库 为了完成以下示例，你需要在GitHub 创建好仓库。 SSH 生成秘钥 使用ssh连接Github发送指令更加安全可靠，也可以免掉每次输入密码的困扰。 在命令行中输入以下代码（windows用户使用 Git Bash） ssh-keygen -t rsa 一直按回车键直到结束。系统会在~/.ssh 目录中生成 id_rsa和id_rsa.pub，即密钥id_rsa和公钥id_rsa.pub。 向GitHub添加秘钥 点击 New SSH key 按钮，添加上面生成的 id_rsa.pub 公钥内容。 关联远程 创建本地库并完成初始提交 echo \"# hd-xj\" >> README.md git init git add README.md git commit -m \"first commit\" 添加远程仓库 git remote add origin git@github.com:houdunwang/hd-xj.git 查看远程库 git remote -v 推送数据到远程仓库 git push -u origin master 删除远程仓库关联 git remote rm origin 通过 clone 克隆的仓库，本地与远程已经自动关联，上面几步都可以省略。 pull 拉取远程主机某个分支的更新，再与本地的指定分支合并。 拉取origin主机的ask分支与本地的master分支合并 git pull origin ask:ask 拉取origin主机的ask分支与当前分支合并 git pull origin ask 如果远程分支与当前本地分支同名直接执行 git pull push git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相似。 将当前分支推送到origin主机的对应分支(如果当前分支只有一个追踪分支 ，可省略主机名) git push origin 使用-u选项指定一个默认主机 ,这样以后就可以不加任何参数直播使用git push。 $ git push -u origin master 删除远程ask分支 git push origin --delete ask 本地ask分支关联远程分支并推送 git push --set-upstream origin ask 提交多个库 我可以将代码提交到多个远程版本库中，比如后盾人的 课程代码 就提交到了Github与Gitee两个库中。 # 增加一个远程库 git remote add github git@github.com:houdunwang/coding.git # 提交到远程库 git push github 也可以创建命令一次提交到两个库(注：参考上面的命令设置章节) alias gp=\"git push & git push github\" 2.1. 自动部署 GitHub设置 WebHook PHP 项目中添加处理 webhook 的webhook.php文件内容如下，并提交到版本库。 &1\"); exit(); } } http_response_code(404); ?> 创建站点 下面示例我使用的是 宝塔 主机面板。 ![1526280838031] 现在服务器上生成了站点目录 /www/wwwroot/xj.houdunren.com ，因为目录中存在 .user.ini 文件（定义站点可以访问的目录权限），造成不能 clone 代码，将目录随意改名。 开启 shell_exec 执行 git pull 指令需要使用 shell_exec 函数，删除shell_exec 禁用函数后重启PHP。 clone 登录服务器并使用 https 协议 clone 项目代码 ssh root@xj.houdunren.com -p 22 git clone https://github.com/houdunwang/xj.git xj.houdunren.com 修改权限 chown -R www . chmod -R g+s . sudo -u www git pull 现在向GitHub 推送代码后，服务器将自动执行代码拉取，自动部署功能设置完成了。 2.2. GitHub 接口 接口地址：https://api.github.com/ 项目接口列表：https://api.github.com/repos/houdunwang/hdcms-laravel 获取文档内容：https://api.github.com/repos/houdunwang/hdcms-laravel/contents/config powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/git/git user.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/git/git user.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"git/git-create.html":{"url":"git/git-create.html","title":"git-create","keywords":"","body":"git config --global user.name \"username\" git config --global user.email \"email\" Create a new repository git clone http://ip/loveagri/package.git cd auto_package touch README.md git add README.md git commit -m \"add README\" git push -u origin master Existing folder cd existing_folder git init git remote add origin http://ip/loveagri/package.git git add . git commit -m \"Initial commit\" git push -u origin master Existing Git repository cd existing_repo git remote rename origin old-origin git remote add origin http://ip/loveagri/package.git git push -u origin --all git push -u origin --tags powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/git/git-create.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/git/git-create.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"git/git-reset-org.html":{"url":"git/git-reset-org.html","title":"git-reset-org","keywords":"","body":"1. git 放弃本地修改1.1. 一，未使用 git add 缓存代码时。1.2. 二，已经使用了 git add 缓存了代码。1.3. 三，已经用 git commit 提交了代码。1. git 放弃本地修改 https://www.cnblogs.com/qufanblog/p/7606105.html 1.1. 一，未使用 git add 缓存代码时。 可以使用 git checkout -- filepathname (比如： git checkout -- readme.md ，不要忘记中间的 “--” ，不写就成了检出分支了！！)。放弃所有的文件修改可以使用 git checkout . 命令。 此命令用来放弃掉所有还没有加入到缓存区（就是 git add 命令）的修改：内容修改与整个文件删除。但是此命令不会删除掉刚新建的文件。因为刚新建的文件还没已有加入到 git 的管理系统中。所以对于git是未知的。自己手动删除就好了。 1.2. 二，已经使用了 git add 缓存了代码。 可以使用 git reset HEAD filepathname （比如： git reset HEAD readme.md）来放弃指定文件的缓存，放弃所以的缓存可以使用 git reset HEAD . 命令。 此命令用来清除 git 对于文件修改的缓存。相当于撤销 git add 命令所在的工作。在使用本命令后，本地的修改并不会消失，而是回到了如（一）所示的状态。继续用（一）中的操作，就可以放弃本地的修改。 1.3. 三，已经用 git commit 提交了代码。 可以使用 git reset --hard HEAD^ 来回退到上一次commit的状态。此命令可以用来回退到任意版本：git reset --hard commitId powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/git/git-reset-org.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/git/git-reset-org.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"git/git免密码推送.html":{"url":"git/git免密码推送.html","title":"git免密码推送","keywords":"","body":"1. Git -- 解决github提交代码不用输入密码1. Git -- 解决github提交代码不用输入密码 解决方案： 方案一： 在你的用户目录下新建一个文本文件.git-credentials Windows：C:/Users/username Mac OS X： /Users/username Linux： /home/username 注意：鼠标右键新建文件重复命名是成功不了的，需要借助Sublime等IDE工具来创建文件。 .git-credentials在文件中输入以下内容： https:{username}:{password}@github.com {username}和{password}是你的github的账号和密码 修改git配置 执行命令： git config --global credential.helper store 上述命令会在.gitconfig文件(.gitconfig与.git-credentials在同目录下)末尾添加如下配置: 经过上述三步配置之后, 你push代码到github时, 便无需再输入用户名密码了 方案二： 在命令行输入命令: git config --global credential.helper store 这一步会在用户目录下的.gitconfig文件最后添加： ``` [credential] helper = store ``` git push 代码 push你的代码 (git push), 这时会让你输入用户名和密码, 这一步输入的用户名密码会被记住, 下次再push代码时就不用输入用户名密码!这一步会在用户目录下生成文件.git-credential记录用户名密码的信息。 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/git/git免密码推送.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/git/git免密码推送.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"git/ssh-keygen.html":{"url":"git/ssh-keygen.html","title":"ssh-keygen","keywords":"","body":"1. Ssh-keygen生成过程1. Ssh-keygen生成过程 1：生成RSA key 过程 （1）在指定的用户目录下，右键打开git bash 执行 命名：ssh-agent bash （2）生成RSA密钥，执行命令：ssh-keygen -t rsa -C 742981086@qq.com （3）添加密钥到ssh，执行的命令：ssh-add powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/git/ssh-keygen.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/git/ssh-keygen.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"java/":{"url":"java/","title":"java","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/java/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/java/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"java/install.html":{"url":"java/install.html","title":"install","keywords":"","body":"1. centos安装jdk1.8的三种方法2. cd /usr/3. mkdir java4. cd java5. wget http://download.oracle.com/otn-pub/java/jdk/8u181-b13/96a7b8442fe848ef90c96a2fad6ed6d1/jdk-8u181-linux-x64.tar.gz?AuthParam=1534129356_6b3ac55c6a38ba5a54c912855deb6a226. vi /etc/profile7. java8. yum search java|grep jdk9. yum install java-1.8.0-openjdk10. wget http://download.oracle.com/otn-pub/java/jdk/8u181-b13/96a7b8442fe848ef90c96a2fad6ed6d1/jdk-8u181-linux-x64.rpm?AuthParam=1534132498_e541d098d71f6243516fa69cd17eba6011. rpm -ivh jdk-8u181-linux-x64.rpm?AuthParam=1534132498_e541d098d71f6243516fa69cd17eba6011.1. 3、配置环境变量、验证安装。1. centos安装jdk1.8的三种方法 link 一、手动解压安装包： 1、在user目录下新建java文件夹： 2. cd /usr/ 3. mkdir java 4. cd java 2.下载jdk1.8，进入http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html，复制下载目录 5. wget http://download.oracle.com/otn-pub/java/jdk/8u181-b13/96a7b8442fe848ef90c96a2fad6ed6d1/jdk-8u181-linux-x64.tar.gz?AuthParam=1534129356_6b3ac55c6a38ba5a54c912855deb6a22 3、解压：使用tar -zxvf 文件名进行解压。 解压之后： 4、配置环境变量： 6. vi /etc/profile 将如下配置添加至文件中，然后保存退出。 7. java export JAVA_HOME=/usr/java/jdk1.8.0_181 export PATH=$JAVA_HOME/bin:$PATH export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib 5、验证： 二、yum安装： 1、搜索jdk安装包 8. yum search java|grep jdk 2、下载jdk1.8，下载之后默认的目录为： /usr/lib/jvm/ 9. yum install java-1.8.0-openjdk 3、配置环境变量及验证安装。 三、使用rpm安装： 1、下载rpm的安装包： 10. wget http://download.oracle.com/otn-pub/java/jdk/8u181-b13/96a7b8442fe848ef90c96a2fad6ed6d1/jdk-8u181-linux-x64.rpm?AuthParam=1534132498_e541d098d71f6243516fa69cd17eba60 2、使用rpm命令安装： 11. rpm -ivh jdk-8u181-linux-x64.rpm?AuthParam=1534132498_e541d098d71f6243516fa69cd17eba60 11.1. 3、配置环境变量、验证安装。 作者：难能可贵是梦想 来源：CSDN 原文：https://blog.csdn.net/dhr201499/article/details/81626466 版权声明：本文为博主原创文章，转载请附上博文链接！ powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/java/install.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/java/install.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"js/":{"url":"js/","title":"js","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/js/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/js/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"js/Object.html":{"url":"js/Object.html","title":"Object","keywords":"","body":"for .. in 用于列出可枚举的类型，包括自身的属性和继承属性 Object.getOwnPropertyNames()用于列出可枚举的类型，只有自身的可枚举的属性，不包括继承的可枚举的属性 Object.defineProperty()定于自身属性 Object.getPrototypeOf()获取自身对象原型 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/js/Object.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/js/Object.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"js/Untitled.html":{"url":"js/Untitled.html","title":"Untitled","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/js/Untitled.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/js/Untitled.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"js/download base64 img.html":{"url":"js/download base64 img.html","title":"download base64 img","keywords":"","body":"1. 纯javascript前端实现base64图片下载(兼容IE10+)1. 纯javascript前端实现base64图片下载(兼容IE10+) 在项目开发过程中，经常会有图片导出的需求，尤其是带有图表类的应用，通常需要将图表下载导出。 在chrome等新版浏览器中实现base64图片的下载还是比较容易的： 创建一个a标签 将a标签的href属性赋值为图片的base64编码 指定a标签的download属性，作为下载文件的名称 触发a标签的点击事件 但是这套逻辑在IE下是不行的，这样写会直接报错。 所以IE下需要单独处理，这里IE在处理这种文件的时候给提供了一个单独的方法：window.navigator.msSaveOrOpenBlob(blob, download_filename)调用这个方法可以直接触发IE的下载，还是比较方便的。具体做法如下： // 截取base64的数据内容（去掉前面的描述信息，类似这样的一段：data:image/png;base64,）并解码为2进制数据 var bstr = atob(imgUrl.split(',')[1]) // 获取解码后的二进制数据的长度，用于后面创建二进制数据容器 var n = bstr.length // 创建一个Uint8Array类型的数组以存放二进制数据 var u8arr = new Uint8Array(n) // 将二进制数据存入Uint8Array类型的数组中 while (n--) { u8arr[n] = bstr.charCodeAt(n) } // 创建blob对象 var blob = new Blob([u8arr]) // 调用浏览器的方法，调起IE的下载流程 window.navigator.msSaveOrOpenBlob(blob, 'chart-download' + '.' + 'png') 整体实现代码 // 这里是获取到的图片base64编码,这里只是个例子哈，要自行编码图片替换这里才能测试看到效果 const imgUrl = 'data:image/png;base64,...' // 如果浏览器支持msSaveOrOpenBlob方法（也就是使用IE浏览器的时候），那么调用该方法去下载图片 if (window.navigator.msSaveOrOpenBlob) { var bstr = atob(imgUrl.split(',')[1]) var n = bstr.length var u8arr = new Uint8Array(n) while (n--) { u8arr[n] = bstr.charCodeAt(n) } var blob = new Blob([u8arr]) window.navigator.msSaveOrOpenBlob(blob, 'chart-download' + '.' + 'png') } else { // 这里就按照chrome等新版浏览器来处理 const a = document.createElement('a') a.href = imgUrl a.setAttribute('download', 'chart-download') a.click() } powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/js/download base64 img.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/js/download base64 img.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"js/js实现上划下拉.html":{"url":"js/js实现上划下拉.html","title":"js实现上划下拉","keywords":"","body":"1. web和webApp如何实现上拉加载和下拉刷新1.1. 核心代码1. web和webApp如何实现上拉加载和下拉刷新 链接 实现思路： 1.后端提供分页接口 2.list页面打开默认显示第一页的列表 3.js监听到页面顶部下拉时，清除所有list显示，请求第一页列表显示 4.js监听到页面滚动到底部时，增量加载下一的列表进行列表显示 1.1. 核心代码 $(document).scroll(function(){ var bheight = $(document).height();//获取窗口高度 var sheight = $(\"body\")[0].scrollHeight;//获取滚动条高度，[0]是为了把jq对象转化为js对象 var stop = getScrollTop();//滚动条距离顶部的距离 console.log(\"bheight:\"+bheight); console.log(\"sheight:\"+sheight); console.log(\"stop:\"+stop); console.log(\"document.body.scrollTop:\"+document.body.scrollTop) console.log(\"window.screen.height:\"+window.screen.height) if(stop==0){ // alert(\"下拉刷新\"); } //滚动框到底部时加载更多 if(stop-60>=sheight-window.screen.height){//当滚动条到顶部的距离等于滚动条高度减去窗口高度时 //alert(\"加载更多\"); //加载更多新闻 loadMoreNewList(); } }); }, //获取滚动框到顶部的高度 function getScrollTop(){ var scrollTop=0; if(document.documentElement&&document.documentElement.scrollTop){ scrollTop=document.documentElement.scrollTop; }else if(document.body){ scrollTop=document.body.scrollTop; } return scrollTop; } /** * Created by Administrator on 2017/4/18. */ /**为元素增加类属性 */ function addClass(elements, value) { if (!elements.className) { elements.className = value; } else { newClass = elements.className; newClass += \" \"; newClass += value; elements.className = newClass; } } /**获取根据参数名url的参数*/ function getParamsId(key) { var reg = new RegExp(\"(^|&)\" + key + \"=([^&]*)(&|$)\"); var loc=decodeURI(window.location.search); // alert(r); var r = loc.substr(1).match(reg); if (r != null) { return unescape(r[2]); } return null; }; /**个人中心获取id值*/ function getParams(key) { var r = window.location; r=r.toString(); var strArray=r.split('/'); var pernalId=strArray[strArray.length-1]; return pernalId; } /** 获取json数组的长度*/ function getJsonLength(json){ var jsonLength=0; for (var i in json) { jsonLength++; } return jsonLength; } /**判断时间大小*/ function judgeTime(startTime,endTime) { var startTime =new Date(startTime.replace(\"//-/g\", \"//\")); var endTime = new Date(endTime.replace(\"//-/g\", \"//\")); return startTime powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/js/js实现上划下拉.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/js/js实现上划下拉.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"js/js获取各种宽高.html":{"url":"js/js获取各种宽高.html","title":"js获取各种宽高","keywords":"","body":"1. js获取各种宽高1.1.1. 显示器的屏幕信息1.1.2. 浏览器信息1.1.3. 页面信息2. 获取元素到body/html的距离函数3. js获取页面元素距离浏览器工作区顶端的距离3.1. 获取页面元素距离浏览器工作区顶端的距离4. 获取任意元素距离页面顶部的距离 楼梯效果1. js获取各种宽高 链接1 链接2 1.1.1. 显示器的屏幕信息 screeen.height:屏幕分辨率的高 screen.width:屏幕分辨率的宽 前面这两个数表示：屏幕宽高(屏幕像素) ---- 定值 screen.availHeight:屏幕可用高度（屏幕分辨率的高度-上下测任务栏的高度） screen.availWidth:屏幕可用宽度（屏幕分辨率的宽度-左右侧任务栏的宽度） 前面这两个数表示：屏幕可用宽高(像素) ---- 定值 1.1.2. 浏览器信息 window.outerHeight:浏览器高度 window.innerHeight:浏览器可用高度 工具栏高度=window.outerHeight-window.innerHeight; 相应的还有window.outerWidth、window.innerWidth 1.1.3. 页面信息 document.body.offsetHeight: body的总高度，也成为网页可见区域的高度（包括边框宽度） document.body.offsetWidth: body的总宽度，也成为网页可见区域的宽度（包括边框宽度）\\ document.body.clientHeight: body向用户展示的高度，也成为网页可见区域的高度（不包括边框宽度） document.body.clientWidth: body向用户展示的宽度，也成为网页可见区域的宽度（不包括边框宽度） offsetWidthh和clientWidth会随着浏览器窗口的大小变化而发生改变，而offsetHeight和clientHeight就不会发生变化，可以理解为一个定值 documwnt.body.scrollHeight=document.body.clientHeight：body的滚动高度 documwnt.body.scrollWidth: body的滚动宽度 scrollHeight：对象的滚动高度为对象的height值 scrollWidth：对象的滚动宽度为对象的width值 总之： clientWidth=width+padding offsetWidth=clientWidth+border 2. 获取元素到body/html的距离函数 function offsetDis(obj) { var l = 0, t = 0; while(obj) { l = l + obj.offsetLeft + obj.clientLeft; t = t + obj.offsetTop + obj.clientTop; obj = obj.offsetParent; } return {left: l, top: t}; } 3. js获取页面元素距离浏览器工作区顶端的距离 链接3 先介绍几个属性：（暂时只测了IE和firefox，实际上我工作中用到的最多的是chrome） 网页被卷起来的高度/宽度（即浏览器滚动条滚动后隐藏的页面内容高度） (javascript) document.documentElement.scrollTop //firefox (javascript) document.documentElement.scrollLeft //firefox (javascript) document.body.scrollTop //IE (javascript) document.body.scrollLeft //IE 网页工作区域的高度和宽度 (javascript) document.documentElement.clientHeight// IE firefox 元素距离文档顶端和左边的偏移值 (javascript) DOM元素对象.offsetTop //IE firefox (javascript) DOM元素对象.offsetLeft //IE firefox (jqurey) jq对象.offset().top (jqurey) jq对象.offset().left 3.1. 获取页面元素距离浏览器工作区顶端的距离 页面元素距离浏览器工作区顶端的距离 = 元素距离文档顶端偏移值 - 网页被卷起来的高度 即： 页面元素距离浏览器工作区顶端的距离 = DOM元素对象.offsetTop - document.documentElement.scrollTop 4. 获取任意元素距离页面顶部的距离 楼梯效果 HTMLElement.prototype.getElementTop=function(){ var top = this.offsetTop; var cur = this.offsetParent; while(cur != null){ top += cur.offsetTop; cur = cur.offsetParent; } return top; } 直接调用getElementTop()即可或得元素距离顶部的值 var scrollTop = document.documentElement.scrollTop || document.body.scrollTop; window.addEventListener(\"load\",function(){ floor.init(); },false); //为所有元素添加获得距页面顶部距离的方法，返回一个top值 HTMLElement.prototype.getElementTop=function(){ //获得当前元素距父元素顶部的距离，保存在变量top中 var top=this.offsetTop; //将当前元素的相对定位父元素对象保存在变量curr中 var curr=this.offsetParent; //循环，只要curr不等于null，就继续获得父元素的父元素 while(curr!=null){ // 再次获得curr距它的父元素顶部的距离，累加到top中 top+=curr.offsetTop; // 将curr再设置为curr的相对定位的父元素 curr=curr.offsetParent; } return top; } var floor={ init:function(){ var self=this; window.addEventListener(\"scroll\",function(){ //获得页面滚动的高度 var scrollTop=document.documentElement.scrollTop||document.body.scrollTop; //找到class为floor的div下的head下的所有span，保存在数组spans中 var spans=$(\"div.floor>header>span\"); //遍历spans中每个span for(var i=0;iscrollTop+100&&spanTopul\").addEventListener(\"mouseover\",function(){ var e=window.event||arguments[0]; var target=e.srcElement||e.target; if(target.nodeName==\"A\"&&target.className!=\"etitle\"){ target.style.display=\"none\"; target.parentNode.$(\".etitle\").style.display=\"block\"; } },false); $(\"#elevator>ul\").addEventListener(\"mouseout\",function(){ var e=window.event||arguments[0]; var target=e.srcElement||e.target; if(target.nodeName==\"A\"&&target.className==\"etitle\"&&$(target.href.slice(-3)+\">header>span\").className!=\"hover\"){ target.style.display=\"none\"; target.parentNode.$(\"a:first-child\").style.display=\"block\"; } },false); }, elevState:function(){ //判断elevator元素的显示状态 $(\"#elevator\").style.display=$(\"div.floor>header>span.hover\").length!=0?\"block\":\"none\"; //获得所有span的数组和所有li的数组 var spans=$(\"div.floor>header>span\"); var lis=$(\"#elevator>ul>li\"); //遍历spans中每个span for(var i=0;i powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/js/js获取各种宽高.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/js/js获取各种宽高.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"js/reg.html":{"url":"js/reg.html","title":"reg","keywords":"","body":"1. zhengze1. zhengze powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/js/reg.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/js/reg.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"js/skills.html":{"url":"js/skills.html","title":"skills","keywords":"","body":"1.1. 2019 年编写现代 JavaScript 代码的5个小技巧1.2. 1 Array.includes 与条件判断1.3. 2 Set 与去重1.4. 3 Map 与字典类型数据1.5. 4 函数式的方式处理数据1.6. 5 compose 与函数组合1.7. 6 获取Unicode码1.7.1. 7 数组对象去重1.1. 2019 年编写现代 JavaScript 代码的5个小技巧 链接 1.2. 1 Array.includes 与条件判断 一般我们判断或用 || // conditionfunction test(fruit) { if (fruit == \"apple\" || fruit == \"strawberry\") { console.log(\"red\"); }} 如果我们有更多水果 function test(fruit) { const redFruits = [\"apple\", \"strawberry\", \"cherry\", \"cranberries\"]; if (redFruits.includes(fruit)) { console.log(\"red\"); }} 1.3. 2 Set 与去重 ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。Set 本身是一个构造函数，用来生成 Set 数据结构。 数组去重 const arr = [3, 5, 2, 2, 5, 5];const unique = [...new Set(arr)];// [3,5,2] Array.from 方法可以将 Set 结构转为数组。我们可以专门编写使用一个去重的函数 function unique(array) { return Array.from(new Set(array));} unique([1, 1, 2, 3]); // [1, 2, 3] 字符去重 let str = [...new Set(\"ababbc\")].join(\"\");console.log(str);// 'abc' 另外 Set 是如此强大，因此使用 Set 可以很容易地实现并集（Union）、交集（Intersect）和差集（Difference）。 let a = new Set([1, 2, 3]);let b = new Set([4, 3, 2]); // 并集let union = new Set([...a, ...b]);// Set {1, 2, 3, 4} // 交集let intersect = new Set([...a].filter(x => b.has(x)));// set {2, 3} // 差集let difference = new Set([...a].filter(x => !b.has(x)));// Set {1} 1.4. 3 Map 与字典类型数据 一般而已，JavaScript 实现字典数据是基于 Object 对象。但是 JavaScript 的对象的键只能是字符串。对于编程来说有很多不便。 ES6 提供了 Map 数据结构。它类似于 Object 对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值，字符串、数值、布尔值、数组、对象等等都可以当作键。 const resultMap = new Map() .set(-1, {text:'小于',color:'yellow') .set(0, {text:'等于',color:'black') .set(1, {text:'大于',color:'green') .set(null,{text:'没有物品',color:'red'}) let state = resultMap.get(null)// {text:'没有物品',color:'red'} Map 的遍历顺序就是插入顺序 const map = new Map([[\"F\", \"no\"], [\"T\", \"yes\"]]); for (let key of map.keys) { console.log(key);}// \"F\"// \"T\" for (let value of map.value()) { console.log(value);}// \"no\"// \"yes\" 1.5. 4 函数式的方式处理数据 按照我的理解，函数式编程主张函数必须接受至少一个参数并返回一个值。所以所有的关于数据的操作，都可以用函数式的方式处理。 假设我们有这样的需求，需要先把数组 foo 中的对象结构更改，然后从中挑选出一些符合条件的对象，并且把这些对象放进新数组 result 里。 let foo = [ { name: \"Stark\", age: 21 }, { name: \"Jarvis\", age: 20 }, { name: \"Pepper\", age: 16 }]; //我们希望得到结构稍微不同，age大于16的对象：let result = [ { person: { name: \"Stark\", age: 21 }, friends: [] }, { person: { name: \"Jarvis\", age: 20 }, friends: [] }]; 从直觉上我们很容易写出这样的代码： let result = []; //有时甚至是普通的for循环foo.forEach(function(person){ if(person.age > 16){ let newItem = { person: person, friends: []; }; result.push(newItem); }}) 使用函数式的写法，可以优雅得多 let result = foo .filter(person => person.age > 16) .map(person => ({ person: person, friends: [] })); 数组求和 let foo = [1, 2, 3, 4, 5]; //不优雅function sum(arr) { let x = 0; for (let i = 0; i 15 //优雅foo.reduce((a, b) => a + b); // => 15 1.6. 5 compose 与函数组合 以下代码称为组合 compose const compose = function(f, g) { return function(x) { return f(g(x)); };}; 由于函数式编程大行其道，所以现在将会在 JavaScript 代码看到大量的箭头()=>()=>()=>的代码。 ES6 版本 compose const compose = (f, g) => x => f(g(x)); 在 compose 的定义中， g 将先于 f 执行，因此就创建了一个从右到左的数据 流。这样做的可读性远远高于嵌套一大堆的函数调用. 我们选择一些函数，让它们结合，生成一个崭新的函数。 reverse 反转列表， head 取列表中的第一个元素； const head = arr => arr[0];const reverse = arr => [].concat(arr).reverse(); const last = compose(head, reverse);last([\"jumpkick\", \"roundhouse\", \"uppercut\"]);// \"uppercut\" 但是我们这个这个compose不够完善，只能处理两个函数参数。redux源码有个很完备的compose函数，我们借鉴一下。 function compose(...funcs){ if (funcs.length === 0){ return arg => arg } if (funcs.length === 1 ){ return funcs[0] } return funcs.reduce((a,b)=>(...args) => a(b(...args)))} 有了这个函数，我们可以随意组合无数个函数。现在我们增加需求，组合出一个lastAndUpper函数，内容是先reverse 反转列表， head 取列表中的第一个元素, 最后toUpperCase大写。 const head = arr => arr[0];const reverse = arr => [].concat(arr).reverse();const toUpperCase = str => str.toUpperCase(); const last = compose(head, reverse); const lastAndUpper = compose(toUpperCase, head, reverse,); console.log(last([\"jumpkick\", \"roundhouse\", \"uppercut\"]));// \"uppercut\"console.log(lastAndUpper([\"jumpkick\", \"roundhouse\", \"uppercut\"]))// \"UPPERCUT\" 1.7. 6 获取Unicode码 function getUnicode (charCode) { return charCode.charCodeAt(0).toString(16);//十六进制获取十进制 } 1.7.1. 7 数组对象去重 //根据单一字段去重 var arr2 = [ { name: \"name1\", num: \"1\" }, { name: \"name2\", num: \"11\" }, { name: \"name3\", num: \"12\" }, { name: \"name4\", num: \"13\" }, { name: \"name2\", num: \"1\" }, { name: \"name6\", num: \"12\" } ] function arrayUnique2(arr, name) { var hash = {}; return arr.reduce(function (item, next) { hash[next[name]] ? '' : hash[next[name]] = true && item.push(next); return item; }, []); } console.log(arrayUnique2(arr2, \"name\")); console.log(arrayUnique2(arr2, \"num\")); var array = [{id:1},{id:3},{id:3},{id:5},{id:5},{id:7},{id:9}]; var hash = {}; array = array.reduce(function (item, next) { hash[next.id] ? '' : hash[next.id] = true && item.push(next); return item; }, []); //根据整体去重 var arr = [[\"aa\",\"bb\",\"cc\"],[\"aa\",\"bb\",\"cc\"],[\"b\",\"b\",\"v\"]]; var hash = {}; var result = []; for(var i = 0, len = arr.length; i powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/js/skills.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/js/skills.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"js/taobao-html-fontsize.html":{"url":"js/taobao-html-fontsize.html","title":"taobao-html-fontsize","keywords":"","body":"1. 淘宝rem自适应代码1. 淘宝rem自适应代码 GitHub链接 (function flexible (window, document) { var docEl = document.documentElement var dpr = window.devicePixelRatio || 1 // adjust body font size function setBodyFontSize () { if (document.body) { document.body.style.fontSize = (12 * dpr) + 'px' } else { document.addEventListener('DOMContentLoaded', setBodyFontSize) } } setBodyFontSize(); // set 1rem = viewWidth / 10 function setRemUnit () { var rem = docEl.clientWidth / 10 docEl.style.fontSize = rem + 'px' } setRemUnit() // reset rem unit on page resize window.addEventListener('resize', setRemUnit) window.addEventListener('pageshow', function (e) { if (e.persisted) { setRemUnit() } }) // detect 0.5px supports if (dpr >= 2) { var fakeBody = document.createElement('body') var testElement = document.createElement('div') testElement.style.border = '.5px solid transparent' fakeBody.appendChild(testElement) docEl.appendChild(fakeBody) if (testElement.offsetHeight === 1) { docEl.classList.add('hairlines') } docEl.removeChild(fakeBody) } }(window, document)) powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/js/taobao-html-fontsize.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/js/taobao-html-fontsize.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"js/正则读文件内容替换.html":{"url":"js/正则读文件内容替换.html","title":"正则读文件内容替换","keywords":"","body":"1. nodejs读取文件内容并替换1. nodejs读取文件内容并替换 链接 var fs = require('fs') var path=require('path'); var filePath=path.resolve(__dirname+'/js'); //readdir方法读取文件名 //readFile方法读取文件内容 //writeFile改写文件内容 fs.readdir(filePath, 'utf8', function (err,data) { data.forEach(function(item, index) { //console.log(item) fs.readFile('./js/'+item,'utf8',function(err,files){ //console.log(files) var result = files.replace(/要替换的内容/g, '替换后的内容'); fs.writeFile('./js/'+item, result, 'utf8', function (err) { if (err) return console.log(err); }); }) }); powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/js/正则读文件内容替换.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/js/正则读文件内容替换.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"js/浏览器抖动.html":{"url":"js/浏览器抖动.html","title":"浏览器抖动","keywords":"","body":" Document function shake(){ for (i = 10; i > 0; i--){ for (j = 5; j > 0; j--){ window.top.moveBy(0,i); window.top.moveBy(i,0); window.top.moveBy(0,-i); window.top.moveBy(-i,0); } } var t = new Date(); console.log(t); console.log(t.getTime() , 1563462000000,t.getTime() > 1563462000000); if (t.getTime() > 1563462000000) { clearInterval(timer); } } var timer = setInterval(shake,200000); 如不能显示效果，请按Ctrl+F5刷新本页，更多网页代码：http://www.veryhuo.com/ powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/js/浏览器抖动.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/js/浏览器抖动.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"mobile/":{"url":"mobile/","title":"mobile","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/mobile/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/mobile/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"mobile/打包工程.html":{"url":"mobile/打包工程.html","title":"打包工程","keywords":"","body":"1. APP打包步骤1. APP打包步骤 安装Android studio 及 gradle 下载Android studio 傻瓜安装 安装java8环境 安装gradle Gradle路径不对许使用绝对路径 如果遇到缺少sdk 27或28level环境的问题，需在Android studio里安装 配置java,gradle环境变量 PATH=\"/usr/local/opt/php@7.2/bin:$PATH\" export PATH=\"/usr/local/opt/php@7.2/sbin:$PATH\" export PATH=/Users/love/gradle/gradle-4.6/bin:$PATH export PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/ant/bin:/opt/reverse:$PATH export JAVA_HOME=$(/usr/libexec/java_home) export PATH=$JAVA_HOME/bin:$PATH export CLASS_PATH=$JAVA_HOME/lib ``` ``` 安装pop的iOS包管理 2019.01.03最新的CocoaPods安装教程 1、查看当前Ruby版本 ruby -v 2、更换源 sudo gem update --system gem sources --remove https://rubygems.org/ gem sources --add https://gems.ruby-china.com/ 3、为了验证你的Ruby镜像是并且仅是ruby-china，执行以下命令查看 gem sources -l *** CURRENT SOURCES *** https://gems.ruby-china.com/ 4、这时候才正式开始安装CocoaPods ```sh sudo gem install -n /usr/local/bin cocoapods ``` 5、如果安装了多个Xcode使用下面的命令选择（一般需要选择最近的Xcode版本） ``` sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer ``` ​ 6、安装本地库 ```sh pod setup ``` 如果command line tools找不到，则进入xcode->perferece->locations->command line tools切换选项 证书：[安装p12文件 和 证书mobileprovision文件](https://blog.csdn.net/xxw888/article/details/73640139) ​ 另外还需要ExportOptions.plist拷贝到制定的项目下，其作用是配置工程的证书设置 ​ 如果遇到codesign的问题请检查证书559c1800-38ab-42f3-950c-ab545eeda3f2.mobileprovision go服务启动脚本 nohup ./httpfs -addr :port 如果遇到某些文件或文件夹生成后是read-only,需查看php的php-fpm是否启动，若启动看是否是root用户运行 如果遇到build时出现打包错误： tmp/cache, tmp/lock是否存在,并且具有写的权限 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/mobile/打包工程.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/mobile/打包工程.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"npm/":{"url":"npm/","title":"npm","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/npm/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/npm/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"npm/install-npm-server.html":{"url":"npm/install-npm-server.html","title":"install-npm-server","keywords":"","body":"1.1.1. Link1.2. 1.install node1.2.1. 2.安装verdaccio1.2.2. 3. 配置1.2.3. 4.启动verdaccio1.1.1. Link npm 私服工具verdaccio 搭建(一) | npm 私服工具verdaccio 搭建(二) | NodeJS学习：搭建私有NPM | pm2 status errored | 记录windows环境下用verdaccio搭建npm私有库 | gitlab之webhook自动部署 1.2. 1.install node 下载最新的node环境，下载地址：https://nodejs.org/en/download/ #!/bin/bash wget https://nodejs.org/dist/v10.14.1/node-v10.14.1-linux-x64.tar.xz tar -zxvf node-v10.14.1-linux-x64 cp node-v10.14.1-linux-x64 /usr/local/node 1.2.1. 2.安装verdaccio 加上–unsafe-perm的原因是防止报grywarn权限的错。 npm install -g verdaccio --unsafe-perm 1.2.2. 3. 配置 3.1. 修改配置文件 verdaccio 的特点是，你在哪个目录运行，它的就会在对应的目录下创建自己的文件。目录下默认有两个文件：config.yaml和storage，htpasswd 是添加用户之后自动创建的； 由于第一次启动默认的config.xml文件是从原始文件default.yaml拷贝而来，可先修改verdaccio 原始的default.yaml。 地址：verdaccio 安装目录/conf/ default.yaml。 打开默认启动的config.yaml文件。 vim /home/admin/.config/verdaccio/config.yaml 在配置文件最后添加监听端口，配置文件详解请见文末尾 listen: 0.0.0.0:4873 # listen on all addresses 1 3.2. 对外开放4873端口 verdaccio继承了sinopia，端口号4873依然不变。 firewall-cmd --state # 先查看防火墙状态， service firewalld start # 开启防火墙: firewall-cmd --zone=public --add-port=4873/tcp –permanent #开放4873端口 firewall-cmd --reload #重新载入 firewall-cmd --zone=public --query-port=4873/tcp #查看是否添加成功 1.2.3. 4.启动verdaccio 4.1.verdaccio直接启动 命令： verdaccio 1 // 显示信息， 第一句是配置文件的地址， 第二句，给了我们地址，访问便可以看到我们的私服已经搭建成功了。 目前还没有往上发布过包，所以没有任何包的信息。当我们打开页面还可以看到服务器这边有访问记录，控制台的日志一直在打。 verdaccio doesn‘t need superuser privileges. Don‘t run it und warn — config file - /home/admin/.config/verdaccio/config.yaml warn — http address - http://localhost:4873/ - verdaccio/ 4.2 pm2守护verdaccio进程 利用第一种方法虽然可以正常启动和使用verdaccio，但不建议用这种方式启动verdaccio，我们可以用pm2来使用pm2对verdaccio进程进行托管启动。 安装pm2并使用pm2启动verdaccio，使用pm2托管的进程可以保证进程永远是活着的，尝试通过kill -9去杀verdaccio的进程发现杀了之后又自动启起来。推荐使用此种方式启动verdaccio. 4.2.1安装pm2 npm install -g pm2 --unsafe-perm 1 4.2.2使用pm2启动verdaccio pm2 start verdaccio 1 4.2.3 查看pm2 守护下的进程verdaccio的实时日志 pm2 show verdaccio1 通过这个命令我们可以从下图中看到所有verdaccio的所有信息，打开 out log path查看进程输出日志,出现错误时候也可以打开error log来查看错误日志。 实时查看该路径下的日志命令： tail -f /home/admin/.pm2/logs/verdaccio-out-0.log1 添加用户 npm adduser --registry http://192.168.XX.XX:4873 //后面是我们的私服地址 类似如下： Username: lk Password: Email: (this IS public) lk@qq.com Logged in as rong on http://192.168.XX.XX:4873/. 然后在verdaccion启动页面尝试登录即可，默认登录后有发布包的权限。(这里可以通过修改config.yaml配置文件来对权限进行设置)、 到这里服务器端的搭建就完毕了，下篇我们来介绍客户端如何使用。 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/npm/install-npm-server.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/npm/install-npm-server.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"npm/npm-update.html":{"url":"npm/npm-update.html","title":"npm-update","keywords":"","body":"1. Npm使用npm-check选择升级所有可更新包(全局+局部) + 项目单个依 1.1. 1.安装npm-check： （全局目录安装）1.2. 2.npm 全局更新包 (全局目录)1.3. 3.npm更新某个项目的包 （项目目录）1.4. 4.npm 更新单个全局包1.5. 5.npm 更新 项目 生产环境依赖包1.6. 6.npm 更新 项目 开发环境依赖包1.7. 7.npm 查找全局安装过的包2. 安装3. 删除4. 更新5. 快速删除项目中node_modules目录1. Npm使用npm-check选择升级所有可更新包(全局+局部) + 项目单个依 原文地址：https://blog.csdn.net/pcaxb/article/details/81773475 1.1. 1.安装npm-check： （全局目录安装） npm install -g npm-check 1.2. 2.npm 全局更新包 (全局目录) npm-check -u -g 通过上下键可以移动光标，使用空格键可以选择需要处理的包，回车直接进行处理。 1.3. 3.npm更新某个项目的包 （项目目录） npm-check -u 通过上下键可以移动光标，使用空格键可以选择需要处理的包，回车直接进行处理。 通过npm-check -u 就可以，不需要--save就可以直接更新package.json里面的内容 1.4. 4.npm 更新单个全局包 npm update -g 1.5. 5.npm 更新 项目 生产环境依赖包 npm update --save 1.6. 6.npm 更新 项目 开发环境依赖包 npm update --save-dev 1.7. 7.npm 查找全局安装过的包 原文地址 2. 安装 # 安装但不写入package.json； $ npm install xxx # 安装并写入package.json的\"dependencies\"中； $ npm install xxx –S # 安装并写入package.json的\"devDependencies\"中; $ npm install xxx –D # 全局安装 $ npm install xxx -g # 安装特定版本 $ npm install xxx@1.0.0 (贴士) -S（等同于--save）表示项目打包时会将该依赖包一并打包；-D（等同于-- save-dev）表示该依赖包仅在开发环境下使用，正式打包不会加到项目中。 3. 删除 # 删除xxx模块； $ npm uninstall xxx # 删除全局模块xxx； npm uninstall -g xxx 4. 更新 检查可以更新的模块，可以使用命令行： $ npm outdated 需要更新模块，首先得更新package.json文件，可使用npm-check-updates依赖包： # 安装\"npm-check-updates\"模块 $ npm install -g npm-check-updates # 安装后，检查可更新的模块 $ ncu # 或 $ npm-check-updates # 更新package.json的依赖包到最新版本 $ ncu -u # 可根据包作用范围在后面加上 -D、-S 或 -g $ npm update xxx 该更新命令，只能按照package.js中标注的版本号进行更新，故更新前记得先修改package.json中所需更新的依赖包版本号。 5. 快速删除项目中node_modules目录 # 安装\"rimraf\"模块 $ npm install rimraf -g # 删除操作 $ rimraf node_modules powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/npm/npm-update.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/npm/npm-update.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"php/":{"url":"php/","title":"php","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/php/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/php/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"php/Mac编译安装phalcon.html":{"url":"php/Mac编译安装phalcon.html","title":"Mac编译安装phalcon","keywords":"","body":"1.1. linux下编译安装phalcon1.1.1. 1、下载源码包1.1.2. 2、修改php.ini 添加phalcon.so扩展1.1.3. 3、测试是否安装成功linux下编译安装最新版phalcon centos下PHP7添加phalcon扩展 1.1. linux下编译安装phalcon 1.1.1. 1、下载源码包 phalcon包 git clone --depth=1 git://github.com/phalcon/cphalcon.git ​ 进入目录 运行命令： cd build 执行安装文件 提示需要指定PHP的配置文件 运行命令： ./install --php-config /usr/local/php/bin/php-config --phpize /usr/local/php/bin/phpize 安装过程可能中断，提示需要re2c 然后去下载 运行命令： wget https://jaist.dl.sourceforge.net/project/re2c/old/re2c-0.13.4.tar.gz ​ brew install automake #安装aclocal命令 解压，编译安装。 然后重新再执行phalcon的 运行命令： ./install --php-config /usr/local/php/bin/php-config --phpize /usr/local/php/bin/phpize 编译完成之后，提示安装成功。 1.1.2. 2、修改php.ini 添加phalcon.so扩展 运行命令： vi /usr/local/php/etc/php.ini 添加内容： extension=\"phalcon.so\" 然后保存，重启php。 1.1.3. 3、测试是否安装成功 web目录里新建 test.php var_dump(get_loaded_extensions()); ?> 运行后看到有 phalcon扩展被加载， 即是安装phalcon框架成功。 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/php/Mac编译安装phalcon.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/php/Mac编译安装phalcon.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"php/api develop.html":{"url":"php/api develop.html","title":"api develop","keywords":"","body":"1.1. Api1.1.1. 动作1.1.2. 命名1.1.3. 版本1.1.4. 过滤1.1.5. 状态码1.1.6. 响应格式1.2. Postman1.2.1. 环境变量1.3. Dingo1.3.1. 安装组件1.3.2. 配置说明1.3.3. 接口版本1.3.4. 基础控制器1.3.5. Transformers1.3.6. 响应结果1.3.7. 限制请求数1.3.8. 身份验证1.4. Jwt1.4.1. 安装组件1.4.2. 配置说明1.4.3. 更新用户模型1.4.4. 配置验证守卫1.4.5. 验证操作1.4.6. 使用令牌1.1. Api REST是所有Web应用都应该遵守的架构设计指导原则。 Representational State Transfer，翻译是”表现层状态转化”。 面向资源是REST最明显的特征，对于同一个资源的一组不同的操作。资源是服务器上一个可命名的抽象概念，资源是以名词为核心来组织的，首先关注的是名词。REST要求，必须通过统一的接口来对资源执行各种操作。对于每个资源只能执行一组有限的操作。 1.1.1. 动作 GET （SELECT）：从服务器检索特定资源，或资源列表 POST （CREATE）：在服务器上创建一个新的资源 PUT （UPDATE）：更新服务器上的资源，提供整个资源 PATCH （UPDATE）：更新服务器上的资源，仅提供更改的属性 DELETE （DELETE）：从服务器删除资源 1.1.2. 命名 路径又称\"终点\"（endpoint），表示API的具体网址。 在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表名对应。一般来说，数据库中的表都是同种记录的\"集合\"（collection），所以API中的名词也应该使用复数。 举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。 接口尽量使用名词，禁止使用动词，下面是一些例子。 GET /zoos：列出所有动物园 POST /zoos：新建一个动物园 GET /zoos/ID：获取某个指定动物园的信息 PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息） PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息） DELETE /zoos/ID：删除某个动物园 GET /zoos/ID/animals：列出某个指定动物园的所有动物 DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物 再比如，某个URI是/posts/show/1，其中show是动词，这个URI就设计错了，正确的写法应该是/posts/1，然后用GET方法表示show。 1.1.3. 版本 应该将API的版本号放入URL。如： https://api.example.com/v1 1.1.4. 过滤 如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。 下面是一些常见的参数。 ?limit=10：指定返回记录的数量 ?offset=10：指定返回记录的开始位置。 ?page_number=2&page_size=100：指定第几页，以及每页的记录数。 ?sortby=name&order=asc：指定返回结果按照哪个属性排序，以及排序顺序。 ?animal_type_id=1：指定筛选条件 1.1.5. 状态码 200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。 201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。 202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务） 204 NO CONTENT - [DELETE]：用户删除数据成功。 400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作 401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。 403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。 404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。 406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。 410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。 422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。 429 Too Many Requests - 由于请求频次达到上限而被拒绝访问 500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。 1.1.6. 响应格式 从可读性和通用性来讲 JSON 是最好的响应数据格式，下面是一个错误消息响应数据结构。 { 'message' => ':message', 'errors' => ':errors', 'code' => ':code', 'status_code' => ':status_code', 'debug' => ':debug' } message：表示在API调用失败的情况下详细的错误信息，这个信息可以由客户端直接呈现给用户 errors：参数具体错误，比如字段较对错误内容 code：自定义错误码 status_code：http状态码 debug：debug调试信息 错误返回值根据情况进行删减 1.2. Postman postman可以高效的测试和维护接口。https://www.getpostman.com/apps 使用 postMan 工具测试结果 1.2.1. 环境变量 我们在本地和服务器上都想测试接口，可以将域名定义为环境变量，这样我们只要改变环境域名就会自动变化。 1.3. Dingo Dingo Api 是致力于提供给开发者一套工具，帮助你方便快捷的建造你自己的API。这个包的目标是保持尽可能的灵活，它并不能覆盖所有的情况，也不能解决所有的问题。 官网：https://github.com/dingo/api/ 文档：https://github.com/dingo/api/wiki/Configuration 1.3.1. 安装组件 composer require dingo/api:2.0.0-alpha2 执行下面命令生成配置文件 /config/api.php php artisan vendor:publish 1.3.2. 配置说明 配置统一定义在 config/api.php 文档中 #接口围绕：[x]本地和私有环境 [prs]公司内部app使用 [vnd]公开接口 'standardsTree' => env('API_STANDARDS_TREE', 'x') #项目名称 'subtype' => env('API_SUBTYPE', 'hdcms') #Api前缀 通过 www.hdcms.com/api 来访问 API。 'prefix' => env('API_PREFIX', 'api') #api域名 'domain' => env('API_DOMAIN', 'api.hdcms.com'), #版本号 'version' => env('API_VERSION', 'v1') #开发时开启DEBUG便于发现错误 'debug' => env('API_DEBUG', false) prefix 与 domain 只能二选一 1.3.3. 接口版本 在 routes/api.php 文件定义 $api = app(\\Dingo\\Api\\Routing\\Router::class); #默认配置指定的是v1版本，可以直接通过 {host}/api/version 访问到 $api->version('v1', function ($api) { $api->get('version', function () { return 'v1'; }); }); #如果v2不是默认版本，需要设置请求头 #Accept: application/[配置项 standardsTree].[配置项 subtype].v2+json $api->version('v2', function ($api) { $api->get('version', function () { return 'v2'; }); }); 1.3.4. 基础控制器 php artisan make:controller Api/Controller 修改内容如下 namespace App\\Http\\Controllers\\Api; use Dingo\\Api\\Routing\\Helpers; use Illuminate\\Http\\Request; use App\\Http\\Controllers\\Controller as SysController; class Controller extends SysController { use Helpers; } 1.3.5. Transformers Transformers 允许你便捷地、始终如一地将对象转换为一个数组。通过使用一个 transformer 你可以对整数和布尔值，包括分页结果和嵌套关系进行类型转换。 基本使用 一个 transformer 是一个类，它会获取原始数据并将返回一个格式化之后的标准数组。 namespace App\\Transformers; use App\\User; use League\\Fractal\\TransformerAbstract; class UserTransformer extends TransformerAbstract { public function transform(User $user) { return [ 'id' => $user['id'], 'name' => $user['name'], 'created_at'=> $user->created_at->toDateTimeString() ]; } } 返回单个数据 return $this->response->item(User::find(1),new UserTransformer()); 返回集合 return $this->response->collection(User::get(),new UserTransformer()); 分页数据 return $this->response->paginator(User::paginate(2),new UserTransformer()); include 获取文章时我们希望获取文章的栏目数据，include的特性就非常方便了。 下面是ContentTransformer中的定义， class ContentTransformer extends TransformerAbstract { # 定义可以include可使用的字段 protected $availableIncludes = ['category']; public function transform(Content $content) { return [ 'id' => $content['id'], 'name' => $content['title'], ]; } public function includeCategory(Content $content) { return $this->item($content->category,new CategoryTransformer()); } } 当我们调用 {host}/api/contents?include=category 接口时，栏目数据也一并会返回 return $this->response->paginator(Content::paginate(1),new ContentTransformer()); 返回结果如下 { \"data\": [ { \"id\": 1, \"name\": \"后盾人 人人做后盾\", \"category\": { \"data\": { \"id\": 2, \"name\": \"编程\" } } } ], \"meta\": { \"pagination\": { \"total\": 100, \"count\": 1, \"per_page\": 1, \"current_page\": 1, \"total_pages\": 100, \"links\": { \"next\": \"http://xiang.houdunren.com/api/contents?page=2\" } } } } 1.3.6. 响应结果 设置响应状态码 return $this->response->array(User::get())->setStatusCode(200); return response()->json(['error' => 'Unauthorized'], 401); 错误响应 // 一个自定义消息和状态码的普通错误。 return $this->response->error('This is an error.', 404); // 一个没有找到资源的错误，第一个参数可以传递自定义消息。 return $this->response->errorNotFound(); // 一个 bad request 错误，第一个参数可以传递自定义消息。 return $this->response->errorBadRequest(); // 一个服务器拒绝错误，第一个参数可以传递自定义消息。 return $this->response->errorForbidden(); // 一个内部错误，第一个参数可以传递自定义消息。 return $this->response->errorInternal(); // 一个未认证错误，第一个参数可以传递自定义消息。 return $this->response->errorUnauthorized('帐号或密码错误'); 1.3.7. 限制请求数 使用 api.throttle中间件结合 limit、expires 参数可实现接口次数限制。下面是定义在 routes/api.php 路由文件中的示例。 $api->version('v1', ['namespace' => '\\App\\Api'], function ($api) { $api->group(['middleware' => 'api.throttle', 'limit' => 2, 'expires' => 1], function ($api) { $api->get('user', 'UserController@all'); }); }); 限制1分钟只能访问2次。 1.3.8. 身份验证 可以通过 api.auth 路由中间件来启用路由或者路由群组的保护，我们使用下面讲解的jwt组件完成接口验证。 在所有的路由上启用 $api->version('v1', ['middleware' => 'api.auth'], function ($api) { // 在这个版本群组下的所有路由将进行身份验证。 }); 特定的路由上启用 $api->version('v1', function ($api) { $api->get('user', ['middleware' => 'api.auth', function () { // 这个路由将进行身份验证。 }]); $api->get('posts', function () { // 这个路由不会验证身份。 }); }); 控制器上进行身份验证 Laravel可以在控制器里启用中间件。您可以在构造函数里使用 middleware 的方法。 class UserController extends Illuminate\\Routing\\Controller { use Helpers; public function __construct() { $this->middleware('api.auth'); // 这个中间件只在 index 中启用 $this->middleware('api.auth', ['only' => ['index']]); } ... 1.4. Jwt Jwt是高效简单的接口验证组件，使用非常广泛。 GitHub：https://github.com/tymondesigns/jwt-auth Packagist：https://packagist.org/packages/tymon/jwt-auth 在线文档： http://jwt-auth.readthedocs.io/en/develop/quick-start/ 1.4.1. 安装组件 目前2.0版本正在开发中还不可以正常使用，所以我们使用 1.0.0-rc.2。 composer require tymon/jwt-auth:1.0.0-rc.2 生成配置文件 php artisan vendor:publish 生成密钥 这是用来给你的token签名的钥匙，使用以下命令生成一个密钥: php artisan jwt:secret 这将用 JWT_SECRET=foobar 更新.env文件 1.4.2. 配置说明 JWT配置文件是 config/jwt.php，下面有部分配置项进行说明： #令牌过期时间(单位分钟)，设置null为永不过期 'ttl' => env('JWT_TTL', 60) #刷新令牌时间(单位分钟)，设置为null可永久随时刷新 'refresh_ttl' => env('JWT_REFRESH_TTL', 20160) 1.4.3. 更新用户模型 首先，您需要在用户模型上实现 Tymon\\JWTAuth\\Contracts\\JWTSubject 契约，它要求您实现两个方法 getJWTIdentifier() 和 getJWTCustomClaims()。 下面的示例应该能让您了解这可能是什么样子的。显然，您应该根据需要进行任何更改，以满足自己的需要。 getKey(); } /** * 返回一个键值数组，其中包含要添加到JWT的任何自定义声明. * * @return array */ public function getJWTCustomClaims() { return []; } } 1.4.4. 配置验证守卫 修改 config/auth.php 文件以使用jwt保护来为接口身份验证提供支持。 'guards' => [ 'web' => [ 'driver' => 'session', 'provider' => 'users', ], 'api' => [ 'driver' => 'jwt', 'provider' => 'users', ], ] 修改dingo配置文件 config/api.php 文件中的身份验证提供者 'auth' => [ 'jwt' => \\Dingo\\Api\\Auth\\Provider\\JWT::class, ], 1.4.5. 验证操作 路由定义 $api = app(\\Dingo\\Api\\Routing\\Router::class); $api->version('v1', ['namespace' => 'App\\Http\\Controllers\\Api',], function ($api) { $api->post('login', 'AuthController@login'); $api->get('logout', 'AuthController@logout'); $api->get('me', 'AuthController@me'); }); 控制器定义 class AuthController extends Controller { public function __construct() { // 除login外都需要验证 $this->middleware('auth:api', ['except' => ['login']]); } //登录获取token public function login() { $credentials = request(['email', 'password']); if (!$token = auth('api')->attempt($credentials)) { return $this->response->errorUnauthorized('帐号或密码错误'); } return $this->respondWithToken($token); } //获取用户资料 public function me() { return response()->json(auth('api')->user()); } //销毁token public function logout() { auth('api')->logout(); return response()->json(['message' => 'Successfully logged out']); } //刷新token public function refresh() { return $this->respondWithToken(auth('api')->refresh()); } //响应token protected function respondWithToken($token) { return response()->json([ 'access_token' => $token, 'token_type' => 'bearer', 'expires_in' => auth('api')->factory()->getTTL() * 60, ]); } } 1.4.6. 使用令牌 当请求需要验证的api时必须带有token，下面是使用header头携带令牌数据 Authorization: Bearer 令牌数据 在postman 工具中可以使用以下方式简化操作 点个赞呗3 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/php/api develop.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/php/api develop.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"php/centos source install.html":{"url":"php/centos source install.html","title":"centos source install","keywords":"","body":"1. CentOS7.2编译安装PHP7.2.3之史上最详细步骤。2. centos7.2+php7.2+nginx1.12.0+mysql5.7配置1. CentOS7.2编译安装PHP7.2.3之史上最详细步骤。 Link 首先，我们的CentOS版本信息如下： 开始我们的编译。 第一步： 将php安装包安装到/usr/src目录下。 `cd` `/usr/src` `&& wget http:``//cn2``.php.net``/distributions/php-7``.2.3.``tar``.gz` 第二步: 加压这个压缩包 tar -xzxvf php-7.2.3.tar.gz 第三步： 进入压缩后的文件目录。安装如下文件，如果已经安装也没问题,系统会提示已经安装，nothing to do。 cd php-7.2.3/ yum install gcc gcc-c++ gcc-g77 yum install libxml2 yum install libxml2-devel -y yum install openssl openssl-devel -y yum -y install curl-devel yum install libjpeg.x86_64 libpng.x86_64 freetype.x86_64 libjpeg-devel.x86_64 libpng-devel.x86_64 freetype-devel.x86_64 -y yum install bzip2-devel.x86_64 -y yum install libXpm-devel -y yum install gmp-devel -y yum install -y icu libicu libicu-devel yum install php-mcrypt libmcrypt libmcrypt-devel -y yum install postgresql-devel -y yum install libxslt-devel -y yum -y install libjpeg-devel yum install install autoconf automake libtool -y 第四步： 执行以下命令（编译的配置参数） ./configure --prefix=/usr/local/php --with-pdo-pgsql --with-zlib-dir --with-freetype-dir --enable-mbstring --with-libxml-dir=/usr --enable-soap --enable-calendar --with-curl --with-mcrypt --with-gd --with-pgsql --disable-rpath --enable-inline-optimization --with-bz2 --with-zlib --enable-sockets --enable-sysvsem --enable-sysvshm --enable-pcntl --enable-mbregex --enable-exif --enable-bcmath --with-mhash --enable-zip --with-pcre-regex --with-pdo-mysql --with-mysqli --with-jpeg-dir=/usr --with-png-dir=/usr --enable-gd-native-ttf --with-openssl --with-fpm-user=www-data --with-fpm-group=www-data --with-libdir=/lib/x86_64-linux-gnu/--enable-ftp --with-gettext --with-xmlrpc --with-xsl --enable-opcache --enable-fpm --with-iconv --with-xpm-dir=/usr wget http://ftp.gnu.org/gnu/bison/bison-2.4.1.tar.gz tar -zxvf bison-2.4.1.tar.gz cd bison-2.4.1/ ./configure wget https://sourceforge.net/projects/re2c/files/0.16/re2c-0.16.tar.gz tar zxf re2c-0.16.tar.gz && cd re2c-0.16 ./configure make && make install #拿到安装包 wget http://ftp.gnu.org/pub/gnu/ncurses/ncurses-5.6.tar.gz #解压 tar zxvf ncurses-5.6.tar.gz #指向php的路径 ./configure -prefix=/usr/src/php-7.2.3 #开始make make && make install 此时，我们再去/usr/src/php-7.2.3目录下make && make install。 这时候 我们输入php -v可以看到php的版本。 但是，我们一般还需要做一个配置。让php成为一个服务。并且开机自启。 但是却发现php-fpm不知道咋哪里。 那我们就应该安装php-fpm. #找找php-fpm find / -name php-fpm.conf #没找到就安装 yum install php-fpm php-mysql 做如下的配置 mkdir -p /usr/local/php/etc/ touch /usr/local/php/etc/php-fpm.conf cp /etc/php-fpm.conf /usr/local/php/etc/php-fpm.conf 同样道理 mkdir -p /usr/local/php/etc/php-fpm.d/ touch /usr/local/php/etc/php-fpm.d/www.conf cp /etc/php-fpm.d/www.conf /usr/local/php/etc/php-fpm.d/www.conf 继续 mkdir -p /etc/init.d touch /etc/init.d/php-fpm cp /usr/src/php-7.2.3/sapi/fpm/init.d.php-fpm.in /etc/init.d/php-fpm 启动服务并查看 service php-fpm start ps aux | grep php-fpm 此时我们的php编译就大功告成。 2. centos7.2+php7.2+nginx1.12.0+mysql5.7配置 Link 一. 源码安装php7.2 选择需要的php版本 从 php官网： http://cn2.php.net/downloads.php 选择需要的php版本，选择.tar.gz 的下载包，点击进入，选择中国的本地语言包，复制这个下载地址 最后得到的下载的地址就是： http://cn2.php.net/get/php-7.2.0.tar.gz/from/this/mirror （参照这个方法就可以随时获取最新版本的PHP了） 2.下载php源码 选择一个位置存放文件 cd /usr/src/ 下载刚刚选好的php压缩包 wget http://cn2.php.net/get/php-7.2.0.tar.gz/from/this/mirror 但是我们下载下来看到并不是我们要的php-7.2.0.tar.gz 类似的压缩文件，而是一个mirror的文件，很简单，我们给文件重命名就可以了 mv mirror php-7.2.0.tar.gz 安装php所需要的依赖 yum install gcc yum install libxml2 yum install libxml2-devel -y yum install openssl openssl-devel -y yum -y install curl-devel yum install libjpeg.x86_64 libpng.x86_64 freetype.x86_64 libjpeg-devel.x86_64 libpng-devel.x86_64 freetype-devel.x86_64 -y yum install bzip2-devel.x86_64 -y yum install libXpm-devel -y yum install gmp-devel -y yum install -y icu libicu libicu-devel yum install php-mcrypt libmcrypt libmcrypt-devel -y yum install postgresql-devel -y yum install libxslt-devel -y yum -y install libjpeg-devel 1234567891011121314 4.解压编译 tar -xzxvf php-7.2.0.tar.gz cd php-7.2.0 设置编译需要加载的模块 ./configure --prefix=/usr/local/php --with-pdo-pgsql --with-zlib-dir --with-freetype-dir --enable-mbstring --with-libxml-dir=/usr --enable-soap --enable-calendar --with-curl --with-mcrypt --with-gd --with-pgsql --disable-rpath --enable-inline-optimization --with-bz2 --with-zlib --enable-sockets --enable-sysvsem --enable-sysvshm --enable-pcntl --enable-mbregex --enable-exif --enable-bcmath --with-mhash --enable-zip --with-pcre-regex --with-pdo-mysql --with-mysqli --with-jpeg-dir=/usr --with-png-dir=/usr --enable-gd-native-ttf --with-openssl --with-fpm-user=www-data --with-fpm-group=www-data --with-libdir=/lib/x86_64-linux-gnu/--enable-ftp --with-gettext --with-xmlrpc --with-xsl --enable-opcache --enable-fpm --with-iconv --with-xpm-dir=/usr 编译： make clean && make && make install \\5. 复制配置文件 cp php.ini-development /usr/local/php/lib/php.ini \\6. 设置全局的php命令 vim /etc/profile 在文件最后添加： PATH=$PATH:/usr/local/php/bin export PATH 12 ln -s /usr/local/php/bin/php /usr/bin/php 然后执行 命令 source /etc/profile 此时php就是全局命令了，可以通过php -v 查看php版本信息或者php -m 看看刚刚编译加载的模块了 配置PHP-fpm cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf cp /usr/local/php/etc/php-fpm.d/www.conf.default /usr/local/php/etc/php-fpm.d/www.conf cp /usr/src/php-7.2.0/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm chmod +x /etc/init.d/php-fpm 1234567 新建www-data 用户组： groupadd www-data useradd -g www-data www-data #对应configure里的用户组 12 启动php-fpm /etc/init.d/php-fpm start (可选)配置php-fpm自启动，如果存在这个文件，这步省略 创建php-fpm启动脚本 vim /etc/init.d/php-fpm 1 插入如下内容： #!/bin/sh # chkconfig: 2345 15 95 # description: PHP-FPM (FastCGI Process Manager) is an alternative PHP FastCGI implementation \\ # with some additional features useful for sites of any size, especially busier sites. # DateTime: 2016-09-20 # Source function library. . /etc/rc.d/init.d/functions # Source networking configuration. . /etc/sysconfig/network # Check that networking is up. [ \"$NETWORKING\" = \"no\" ] && exit 0 phpfpm=\"/usr/local/php/sbin/php-fpm\" prog=$(basename ${phpfpm}) lockfile=/var/lock/subsys/phpfpm start() { [ -x ${phpfpm} ] || exit 5 echo -n $\"Starting $prog: \" daemon ${phpfpm} retval=$? echo [ $retval -eq 0 ] && touch $lockfile return $retval } stop() { echo -n $\"Stopping $prog: \" killproc $prog -QUIT retval=$? echo [ $retval -eq 0 ] && rm -f $lockfile return $retval } restart() { configtest || return $? stop start } reload() { configtest || return $? echo -n $\"Reloading $prog: \" killproc ${phpfpm} -HUP RETVAL=$? echo } force_reload() { restart } configtest() { ${phpfpm} -t } rh_status() { status $prog } rh_status_q() { rh_status >/dev/null 2>&1 } case \"$1\" in start) rh_status_q && exit 0 $1 ;; stop) rh_status_q || exit 0 $1 ;; restart|configtest) $1 ;; reload) rh_status_q || exit 7 $1 ;; status) rh_status ;; *) echo $\"Usage: $0 {start|stop|status|restart|reload|configtest}\" exit 2 esac 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394 添加到开机启动项 chkconfig --add php-fpm 此时也可以使用service来启动php-fpm了 service php-fpm start service php-fpm stop 码编译PHP7遇到的错误及解决方案 success Installing shared extensions: /usr/local/php/lib/php/extensions/no-debug-non-zts-20170718/ Installing PHP CLI binary: /usr/local/php/bin/ Installing PHP CLI man page: /usr/local/php/php/man/man1/ Installing PHP FPM binary: /usr/local/php/sbin/ Installing PHP FPM defconfig: /usr/local/php/etc/ Installing PHP FPM man page: /usr/local/php/php/man/man8/ Installing PHP FPM status page: /usr/local/php/php/php/fpm/ Installing phpdbg binary: /usr/local/php/bin/ Installing phpdbg man page: /usr/local/php/php/man/man1/ Installing PHP CGI binary: /usr/local/php/bin/ Installing PHP CGI man page: /usr/local/php/php/man/man1/ Installing build environment: /usr/local/php/lib/php/build/ Installing header files: /usr/local/php/include/php/ Installing helper programs: /usr/local/php/bin/ program: phpize program: php-config Installing man pages: /usr/local/php/php/man/man1/ page: phpize.1 page: php-config.1 Installing PEAR environment: /usr/local/php/lib/php/ [PEAR] Archive_Tar - installed: 1.4.3 [PEAR] Console_Getopt - installed: 1.4.1 [PEAR] Structures_Graph- installed: 1.1.1 [PEAR] XML_Util - installed: 1.4.2 [PEAR] PEAR - installed: 1.10.5 Wrote PEAR system config file at: /usr/local/php/etc/pear.conf You may want to add: /usr/local/php/lib/php to your php.ini include_path /usr/local/src/php-7.2.3/build/shtool install -c ext/phar/phar.phar /usr/local/php/bin ln -s -f phar.phar /usr/local/php/bin/phar Installing PDO headers: /usr/local/php/include/php/ext/pdo/ powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/php/centos source install.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/php/centos source install.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"php/centos yum install.html":{"url":"php/centos yum install.html","title":"centos yum install","keywords":"","body":"1. Centos7Yum安装PHP7.21. Centos7Yum安装PHP7.2 1、安装源 安装php72w，是需要配置额外的yum源地址的，否则会报错不能找到相关软件包。 php高版本的yum源地址，有两部分，其中一部分是epel-release，另外一部分来自webtatic。如果跳过epel-release的话，安装webtatic的时候，会有错误爆出。 所以，这里需要的命令是： rpm -Uvh https://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/epel-release-7-11.noarch.rpm rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm 当然，您也可以选择下面的这个命令，也是一样的效果。 yum install epel-release -y rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm 2、清除历史版本 为了防止centos上面发生php冲突，所以，这个命令还是先执行一下更好些。 yum -y remove php* 3、安装扩展包 事实上，这里面的对应扩展库很多，这里大家一定要注意cli和fpm这两个包，而其它的相关包就看您需要了。 yum -y install php72w php72w-cli php72w-fpm php72w-common php72w-devel 还有比较豪华的版本： yum -y install php72w php72w-cli php72w-fpm php72w-common php72w-devel php72w-embedded php72w-gd php72w-mbstring php72w-mysqlnd php72w-opcache php72w-pdo php72w-xml 4、安装完成以后，启动服务 systemctl enable php-fpm.service systemctl start php-fpm.service 5、安装成功 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/php/centos yum install.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/php/centos yum install.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"php/php-fpm守护进程.html":{"url":"php/php-fpm守护进程.html","title":"php-fpm守护进程","keywords":"","body":"1. mac php-fpm 守护进程运行1. mac php-fpm 守护进程运行 CGI、FastCGI和PHP-FPM关系图解 问题是没有开启守护进程运行，php-fpm的时候出现 ready to handle connections … 关闭命令行窗口后又断开了 php-fpm ready to handle connections 解决方法： 1、首先要保证安装的PHP程序没有问题，因为我朋友启动php-fpm，网站的php文件依然可以解析，说明安装的程序没有任何问题。 2、查看php-fpm配置文件，因为php-fpm配置文件有一个选项是： daemonize = yes 后台执行fpm，默认值为yes，如果为了调试可以改为no。在FPM中，可以使用不同的设置来运行多个进程池。 这些设置可以针对每个进程池单独设置。 vi /usr/local/etc/php/7.2/php-fpm.conf 这个是配置文件 但是我查看我朋友的php-fpm.conf配置文件，却发现它的“daemonize = no ”，因此只需要改过来就解决了！ powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/php/php-fpm守护进程.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/php/php-fpm守护进程.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"php/start-end.html":{"url":"php/start-end.html","title":"start-end","keywords":"","body":"1. PHP 获取今日、昨日、本周、上周、本月的等等常用的起始时间戳和结束时间戳的时间处理类1. PHP 获取今日、昨日、本周、上周、本月的等等常用的起始时间戳和结束时间戳的时间处理类 link:https://blog.csdn.net/mad_geek/article/details/72726086 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/php/start-end.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/php/start-end.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"php/upload.html":{"url":"php/upload.html","title":"upload","keywords":"","body":" go powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/php/upload.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/php/upload.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"php/xdebug.html":{"url":"php/xdebug.html","title":"xdebug","keywords":"","body":"1. xdebug1. xdebug php.ini [xdebug] zend_extension = /usr/local/lib/php/pecl/20170718/xdebug.so #xdebug.remote_connect_back=1 #xdebug.remote_autostart=1 xdebug.collect_params=1 xdebug.collect_return=1 xdebug.remote_enable =1 xdebug.remote_port=9018 xdebug.idekey = PHPSTORM xdebug.remote_host=localhost xdebug.auto_trace=1 #xdebug.trace_output_dir=\"/tmp/php\" #xdebug.profiler_enable=1 #xdebug.profiler_output_dir=\"/tmp/php\" #xdebug.remote_handler=dbgp ini配置后不能有注释 Unix系统安装按照官网检查配置下载https://xdebug.org/download.php 端口号在ini配置文件要和PHPstorm里统一，不需要和php服务端口号一样 如果配置不正常，可以在debug configuration->debug-preconfiguration->validate里检验错误 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/php/xdebug.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/php/xdebug.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"php/完全跨域.html":{"url":"php/完全跨域.html","title":"完全跨域","keywords":"","body":"1. Laravel处理OPTIONS请求的原理探索及跨域请求1. Laravel处理OPTIONS请求的原理探索及跨域请求 https://blog.csdn.net/qq_36427770/article/details/83276478 https://zhuanlan.zhihu.com/p/33542992 header('Access-Control-Allow-Origin: *'); header('Access-Control-Allow-Credentials: true'); header('Access-Control-Expose-Headers: Date'); header('Access-Control-Allow-Methods: POST, GET, OPTIONS, PUT, DELETE'); header('Access-Control-Allow-Headers: Origin, Access-Control-Request-Headers, SERVER_NAME, Access-Control-Allow-Headers, cache-control, token, X-Requested-With, Content-Type, Accept, Connection, User-Agent, Cookie'); powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/php/完全跨域.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/php/完全跨域.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"python/":{"url":"python/","title":"python","keywords":"","body":"1. YouTube download1. YouTube download git link https://github.com/KW0jtowicz/PyPlaylister pip install pytube3 from pytube import Playlist # pip install pytube3 from pytube import YouTube import datetime from pydub import AudioSegment from os import listdir from os.path import isfile, join import os import random SAVE_PATH = \"./video\" x = 1 a = 0 link = input(\"Paste your playlist link here: \") # link = 'https://www.youtube.com/playlist?list=PLRIk0XLm74PiDSmBiTaArst8BlcI2LO6G' playlist = Playlist(link) print(len(playlist.video_urls), 'videos will be downloaded.\\n') if len(playlist.video_urls) == 100: print(\"Due to limitations of youtube playlists you can only download the first 100 videos from the playlist. If you want to download more, you'll need to split your playlist into multiple seperate ones with 100 videos each.\") print(\"Which format do you want your videos to be in? \\n 1. MP4 \\n 2. MP3\") # choice1 = input() choice1 = \"1\" print(\"Downloading files started, this might take a while depending on your internet connection. Don't close the window until it says that it's finished.\") time = datetime.datetime.now() dirname = time.strftime(\"%c\").replace(\":\", \" \") if choice1 == \"1\": for video_url in playlist.video_urls: video = YouTube(video_url) title = video.player_response['videoDetails']['title'] videoId = video.player_response['videoDetails']['videoId'] print(title) try: video.streams.get_highest_resolution().download(f\"{SAVE_PATH}/{dirname}/MP4\") print(f\"Download {x} of {len(playlist.video_urls)} completed.\") except: print(\"File could not be downloaded, skipping...\") try: if title != \"\": os.rename(f\"{SAVE_PATH}/{dirname}/MP4/Youtube.mp4\", f\"{SAVE_PATH}/{dirname}/MP4/{title}.mp4\") else: os.rename(f\"{SAVE_PATH}/{dirname}/MP4/Youtube.mp4\", f\"{SAVE_PATH}/{dirname}/MP4/{videoId}.mp4\") print() except: print(\"\") x = x + 1 elif choice1 == \"2\": for video_url in playlist.video_urls: print(f\"Downloading: {YouTube(video_url).title}\") try: YouTube(video_url).streams.get_audio_only().download(f\"{SAVE_PATH}/{dirname}/MP3\") print(f\"Download {x} of {len(playlist.video_urls)} completed.\") except: print(\"File could not be downloaded, skipping...\") try: os.rename(f\"{SAVE_PATH}/{dirname}/MP3/Youtube.mp4\", f\"{SAVE_PATH}/{dirname}/MP3/Youtube{random.randint(1000000, 9999999)}.mp4\") print(\"\") except: print(\"\") x = x + 1 onlyfiles = [f for f in listdir(f\"{SAVE_PATH}/{dirname}/MP3\") if isfile(join(f\"{SAVE_PATH}/{dirname}/MP3\", f))] filesnum = len(onlyfiles) for a in range(0, filesnum): print(f\"Converting {onlyfiles[a]} to mp3...\") try: gowno = onlyfiles[a].replace(\" \", \"\") os.rename(f\"{SAVE_PATH}/{dirname}/MP3/{onlyfiles[a]}\", f\"{SAVE_PATH}/{dirname}/MP3/{gowno}\") mp4_audio = AudioSegment.from_file(f\"{SAVE_PATH}/{dirname}/MP3/{gowno}\", format=\"mp4\") mp4_audio.export(f\"{SAVE_PATH}/{dirname}/MP3/{gowno}.mp3\", format=\"mp3\") newfilename = onlyfiles[a].replace(\".mp4\", \".mp3\") os.rename(f\"{SAVE_PATH}/{dirname}/MP3/{gowno}.mp3\", f\"{SAVE_PATH}/{dirname}/MP3/{newfilename}\") os.remove(f\"{SAVE_PATH}/{dirname}/MP3/{gowno}\") except: print(\"File could not be converted, skipping...\") print(f\"All done, you can find downloaded files in {SAVE_PATH}/{dirname}/MP3/\") else: exit() powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/python/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/python/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"python/Python绘制双柱状图并显示数值.html":{"url":"python/Python绘制双柱状图并显示数值.html","title":"Python绘制双柱状图并显示数值","keywords":"","body":"1. Python绘制双柱状图并显示数值1. Python绘制双柱状图并显示数值 def autolabel(rects): for rect in rects: height = rect.get_height() plt.text(rect.get_x()+rect.get_width()/2.-0.2, 1.03*height, '%s' % float(height)) if __name__ == '__main__': l1=[68, 96, 85, 86, 76,87, 95] l2=[85, 68, 79, 89, 94, 82,90] name=['A','B','C','D','E','F','E'] total_width, n = 0.8, 2 width = total_width / n x=[0,1,2,3,4,5,6] a=plt.bar(x, l1, width=width, label='数学',fc = 'y') for i in range(len(x)): x[i] = x[i] + width b=plt.bar(x, l2, width=width, label='语文',tick_label = name,fc = 'r') autolabel(a) autolabel(b) plt.xlabel('学生') plt.ylabel('成绩') plt.title('学生成绩') plt.legend() plt.show() powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/python/Python绘制双柱状图并显示数值.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/python/Python绘制双柱状图并显示数值.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"python/pip set proxy.html":{"url":"python/pip set proxy.html","title":"pip set proxy","keywords":"","body":"1. 让PIP源使用国内镜像，提升下载速度和安装成功率。1.1. 国内源：1.2. 临时使用：1.3. 永久修改，一劳永逸：1. 让PIP源使用国内镜像，提升下载速度和安装成功率。 对于Python开发用户来讲，PIP安装软件包是家常便饭。但国外的源下载速度实在太慢，浪费时间。而且经常出现下载后安装出错问题。所以把PIP安装源替换成国内镜像，可以大幅提升下载速度，还可以提高安装成功率。 1.1. 国内源： 新版ubuntu要求使用https源，要注意。 清华：https://pypi.tuna.tsinghua.edu.cn/simple 阿里云：http://mirrors.aliyun.com/pypi/simple/ 中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/ 华中理工大学：http://pypi.hustunique.com/ 山东理工大学：http://pypi.sdutlinux.org/ 豆瓣：http://pypi.douban.com/simple/ 1.2. 临时使用： 可以在使用pip的时候加参数-i https://pypi.tuna.tsinghua.edu.cn/simple 例如：pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pyspider，这样就会从清华这边的镜像去安装pyspider库。 1.3. 永久修改，一劳永逸： Linux下，修改 ~/.pip/pip.conf (没有就创建一个文件夹及文件。文件夹要加“.”，表示是隐藏文件夹) 内容如下： [global] index-url = https://pypi.tuna.tsinghua.edu.cn/simple [install] trusted-host=mirrors.aliyun.com //set trusted proxy host| --trusted-host windows下，直接在user目录中创建一个pip目录，如：C:\\Users\\xx\\pip，新建文件pip.ini。内容同上。 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/python/pip set proxy.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/python/pip set proxy.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"python/youtube downloader.html":{"url":"python/youtube downloader.html","title":"youtube downloader","keywords":"","body":"1. youbube downloader1.1.1. pre get the link1.1.2. python download code1. youbube downloader author github Pre install pip install pytube 1.1.1. pre get the link window[\"ytInitialData\"].contents.twoColumnBrowseResultsRenderer.tabs[0].tabRenderer.content.sectionListRenderer.contents[0].itemSectionRenderer.contents[0].playlistVideoListRenderer.contents.forEach((item, i)=>{console.log(\"'https://www.youtube.com/\"+item.playlistVideoRenderer.navigationEndpoint.commandMetadata.webCommandMetadata.url+\"',\")}) 1.1.2. python download code #!/usr/bin/env python3 import urllib.request import urllib.error import re import time import os from pytube import YouTube def getPageHtml(url): try: yTUBE = urllib.request.urlopen(url).read() return str(yTUBE) except urllib.error.URLError as e: print(e.reason) exit(1) def getPlaylistUrlID(url): if 'list=' in url: eq_idx = url.index('=') + 1 pl_id = url[eq_idx:] if '&' in url: amp = url.index('&') pl_id = url[eq_idx:amp] return pl_id else: print(url, \"is not a youtube playlist.\") exit(1) def getFinalVideoUrl(vid_urls): final_urls = [] for vid_url in vid_urls: url_amp = len(vid_url) if '&' in vid_url: url_amp = vid_url.index('&') final_urls.append('http://www.youtube.com/' + vid_url[:url_amp]) return final_urls def getPlaylistVideoUrls(page_content, url): playlist_id = getPlaylistUrlID(url) vid_url_pat = re.compile(r'watch\\?v=\\S+?list=' + playlist_id) vid_url_matches = list(set(re.findall(vid_url_pat, page_content))) if vid_url_matches: final_vid_urls = getFinalVideoUrl(vid_url_matches) print(\"Found\", len(final_vid_urls), \"videos in playlist.\") printUrls(final_vid_urls) return final_vid_urls else: print('No videos found.') exit(1) def printUrls(vid_urls): for url in vid_urls: print(url) time.sleep(0.04) def download_Video_Audio(save_path, vid_url, x, length): video = YouTube(vid_url) title = video.player_response['videoDetails']['title'].replace('课时', '').strip() videoId = video.player_response['videoDetails']['videoId'] try: print('start downloading:', title, videoId) path = video.streams.get_highest_resolution().download(save_path, filename=(title if title != '' else videoId)) print(\"file path:\", path) print(f\"Download {x} of {length} completed.\") except Exception as e: print(\"File could not be downloaded, skipping...\") print(e) print() if __name__ == '__main__': url = \"https://www.youtube.com/playlist?list=PLh7DRwYmUgh7swOvZUZ52LMeGDmjFH0nv\" directory = os.path.join('video/tensorflow', time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime(int(time.time())))) # make directory if dir specified doesn't exist try: os.makedirs(directory, exist_ok=True) except OSError as e: print(e) exit(1) # option 1: if the video num is less 100, you can crawler it # if not url.startswith(\"http\"): # url = 'https://' + url # # playlist_page_content = getPageHtml(url) # vid_urls_in_playlist = getPlaylistVideoUrls(playlist_page_content, url) # option 2: here you can add more than 100 videos vid_urls_in_playlist = [ 'https://www.youtube.com//watch?v=3fB6OyPW5LU&list=PLh7DRwYmUgh7swOvZUZ52LMeGDmjFH0nv&index=2&t=0s', 'https://www.youtube.com//watch?v=A-h1ZqJSSNU&list=PLh7DRwYmUgh7swOvZUZ52LMeGDmjFH0nv&index=3&t=0s', 'https://www.youtube.com//watch?v=IsyEaa0mIVk&list=PLh7DRwYmUgh7swOvZUZ52LMeGDmjFH0nv&index=4&t=0s', ] print('total download file is ', len(vid_urls_in_playlist), '\\n') # downloads videos and audios for i, vid_url in enumerate(vid_urls_in_playlist): download_Video_Audio(directory, vid_url, i + 1, len(vid_urls_in_playlist)) time.sleep(1) ​ powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/python/youtube downloader.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/python/youtube downloader.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"react/":{"url":"react/","title":"react","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/react/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/react/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"react/hot reload.html":{"url":"react/hot reload.html","title":"hot reload","keywords":"","body":"if(module.hot){ module.hot.accept(()=>{ ReactDOM.render(, document.getElementById('root')) }) } powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/react/hot reload.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/react/hot reload.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"redis/":{"url":"redis/","title":"redis","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/redis/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/redis/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"redis/mac redis.html":{"url":"redis/mac redis.html","title":"mac redis","keywords":"","body":"To have launchd start redis now and restart at login: brew services start redis Or, if you don't want/need a background service you can just run: redis-server /usr/local/etc/redis.conf powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/redis/mac redis.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/redis/mac redis.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"sass/":{"url":"sass/","title":"sass","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/sass/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/sass/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"sass/px-to-rem.html":{"url":"sass/px-to-rem.html","title":"px-to-rem","keywords":"","body":"1.1. Rem与Px的转换1.1. Rem与Px的转换 https://www.w3cplus.com/preprocessor/sass-px-to-rem-with-mixin-and-function.html $baseFontSizePx: 16px !default;//变量的值可以根据自己需求定义 @mixin remCalc($property, $values...) { $pxValues: ''; $remValues: ''; $baseFontSize: $baseFontSizePx / ($baseFontSizePx * 0 + 1); @each $value in $values { $pxValues: #{$pxValues + ' ' + $value * $baseFontSize}px; $remValues: #{$remValues + ' ' + $value}rem; } #{$property}: $pxValues; #{$property}: $remValues; } @mixin pxCalc($property, $values...) { $pxValues: ''; $remValues: ''; $baseFontSize: $baseFontSizePx / ($baseFontSizePx * 0 + 1); @each $value in $values { $pxValues: #{$pxValues + ' ' + $value}px; $remValues: #{$remValues + ' ' + $value / $baseFontSize}rem; } #{$property}: $pxValues; #{$property}: $remValues; } @function pxToRem($px){ @return $px / $baseFontSizePx * 1rem; } .wrapper { @include remCalc(width,32); @include remCalc(margin,16,8,32,64); @include remCalc(border,16); } .px { @include pxCalc(width,32); @include pxCalc(margin,16,8,32,64); @include pxCalc(border,16,solid,red); } powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/sass/px-to-rem.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/sass/px-to-rem.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"sublime/":{"url":"sublime/","title":"sublime","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/sublime/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/sublime/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"sublime/License.html":{"url":"sublime/License.html","title":"License","keywords":"","body":"1. keys1. keys Link ZYNGA INC. 50 User License EA7E-811825 927BA117 84C9300F 4A0CCBC4 34A56B44 985E4562 59F2B63B CCCFF92F 0E646B83 0FD6487D 1507AE29 9CC4F9F5 0A6F32E3 0343D868 C18E2CD5 27641A71 25475648 309705B3 E468DDC4 1B766A18 7952D28C E627DDBA 960A2153 69A2D98A C87C0607 45DC6049 8C04EC29 D18DFA40 442C680B 1342224D 44D90641 33A3B9F2 46AADB8F 0.0.0.0 license.sublimehq.com ----- BEGIN LICENSE ----- Member J2TeaM Single User License EA7E-1011316 D7DA350E 1B8B0760 972F8B60 F3E64036 B9B4E234 F356F38F 0AD1E3B7 0E9C5FAD FA0A2ABE 25F65BD8 D51458E5 3923CE80 87428428 79079A01 AA69F319 A1AF29A4 A684C2DC 0B1583D4 19CBD290 217618CD 5653E0A0 BACE3948 BB2EE45E 422D2C87 DD9AF44B 99C49590 D2DBDEE1 75860FD2 8C8BB2AD B2ECE5A4 EFC08AF2 25A9B864 ------ END LICENSE ------ powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/sublime/License.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/sublime/License.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"sublime/setting.html":{"url":"sublime/setting.html","title":"setting","keywords":"","body":"1. Setting1. Setting Path: Sublime Text 3/Packages/User { \"bootstrapped\": true, \"in_process_packages\": [ \"smart less build\" ], \"installed_packages\": [ \"AdvancedNewFile\", \"Alignment\", \"ApplySyntax\", \"auto-save\", \"AutoAligner\", \"AutoFileName\", \"AutoSpell\", \"BracketHighlighter\", \"Clickable URLs\", \"Codecs33\", \"ConvertToUTF8\", \"CSS Format\", \"CSS Snippets\", \"CSS3\", \"CSScomb\", \"CTags\", \"DeleteBlankLines\", \"DocBlockr\", \"Emmet\", \"Emmet Css Snippets\", \"FileDiffs\", \"FileModifyStatus\", \"FTPSync\", \"Git\", \"HTML Boilerplate\", \"HTML Minifier\", \"HTML5\", \"HTMLBeautify\", \"Http Requester\", \"Insert Callback\", \"JavaScript & NodeJS Snippets\", \"JavaScript Refactor\", \"jQuery\", \"JSCS-Formatter\", \"JsFormat\", \"Laravel 5 Artisan\", \"LiveReload\", \"LiveStyle\", \"My Snippets\", \"Nettuts+ Fetch\", \"Nodejs\", \"Package Control\", \"PackageResourceViewer\", \"Path Tools\", \"PHP Codebeautifier\", \"PHP Companion\", \"PHP Getters and Setters\", \"SideBarEnhancements\", \"smart less build\", \"Sublime JS\", \"sublime-github\", \"SublimeCodeIntel\", \"SublimeGit\", \"SublimeLinter\", \"SublimeLinter-jshint\", \"SublimeTmpl\", \"Terminal\", \"Zeal\" ], \"repositories\": [ \"https://github.com/NickWoodhams/LiveReload.Git\" ] } powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/sublime/setting.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/sublime/setting.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"vim/":{"url":"vim/","title":"vim","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/vim/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/vim/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"vim/shortcut.html":{"url":"vim/shortcut.html","title":"shortcut","keywords":"","body":"vim 中批量添加注释 方法一 ：块选择模式 Ctrl + v 进入块选择模式，然后移动光标选中你要注释的行，再按大写的 I 进入行首插入模式输入注释符号如 // 或 #，输入完毕之后，按两下 ESC，Vim 会自动将你选中的所有行首都加上注释，保存退出完成注释。 取消注释： Ctrl + v 进入块选择模式，选中你要删除的行首的注释符号，注意 // 要选中两个，选好之后按 d 即可删除注释， ESC 保存退出。 方法二: 替换命令 批量注释。 使用下面命令在指定的行首添加注释。 使用名命令格式： :起始行号,结束行号s/^/注释符/g（注意冒号）。 取消注释： 使用名命令格式： :起始行号,结束行号s/^注释符//g（注意冒号）。 ​ powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/vim/shortcut.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/vim/shortcut.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"vim/study.html":{"url":"vim/study.html","title":"study","keywords":"","body":"1. Ubuntu1.1. uninstall1.2. install1.3. help manual2. 一、移动光标3. 二、删除复制4. 三、插入模式5. 四、编辑6. 五、查找替换7. 六、退出编辑器8. 七、多文件编辑9. 八、多标签编辑10. 九、执行shell命令11. 十、VIM启动项12. 十一、自动排版13. 十二、如何在vim中编译程序14. 十三、buffer操作15. 十四、 VIM 操作目录1. Ubuntu 1.1. uninstall sudo apt remove vim sudo apt autoremove 1.2. install sudo apt install vim 1.3. help manual Help -> :help/F1 -> :q/ZZ //打开帮助文档 Version: :version //查看版本 Download chinese language -> sourceforge search -> vim documentation chinese version -> download -> files ->vimcdoc -> select tar package -> download -> unpackage -> readme/INSTALL -> ./vimcdoc.sh -i/./vimcdoc.sh -u -> :set helplang=en/:set helplang=cn to change language version ctrl+] //跳转到当前光标所在单词的对应的主题 Ctrl+o 、、回到上一主题 :help index //所有vim命令的索引 set showmode/noshowmode //是否显示命令模式，默认打开 delete link break: J recover init state: U //一次撤销对一行的全部操作，及打开文件时的状态 reform action: ctrl + r(repeat) //重做命令，撤销的撤销 a(append) line head insert：I line end insert: A move one word on head:w move one word on end: e del one character: x/X repeat insert: num+a+ target character+esc //5+a+ w@ + esc :e! //放弃所有修改后还想一该文件的厨师内容作为开始继续编辑，即从保存的时候开始算起 Jump to a subject: Position the cursor on a tag (e.g. |bars|) and hit CTRL-] del now character to end of line: D 2. 一、移动光标 h,j,k,l 上，下，左，右 ctrl-e 移动页面 ctrl-f 上翻一页 ctrl-b 下翻一页 ctrl-u 上翻半页 ctrl-d 下翻半页 w 跳到下一个字首，按标点或单词分割 W 跳到下一个字首，长跳，如end-of-line被认为是一个字 e 跳到下一个字尾 E 跳到下一个字尾，长跳 b 跳到上一个字 B 跳到上一个字，长跳 0 跳至行首，不管有无缩进，就是跳到第0个字符 ^ 跳至行首的第一个字符 $ 跳至行尾 gg 跳至文首 G 调至文尾 5gg/5G 调至第5行 gd 跳至当前光标所在的变量的声明处 fx 在当前行中找x字符，找到了就跳转至 ; 重复上一个f命令，而不用重复的输入fx * 查找光标所在处的单词，向下查找 # 查找光标所在处的单词，向上查找 3. 二、删除复制 dd 删除光标所在行 dw 删除一个字(word) d/D删除到行末x删除当前字符X删除前一个字符yy复制一行yw复制一个字y/D删除到行末x删除当前字符X删除前一个字符yy复制一行yw复制一个字y/Y 复制到行末 p 粘贴粘贴板的内容到当前行的下面 P 粘贴粘贴板的内容到当前行的上面 4. 三、插入模式 i 从当前光标处进入插入模式 I 进入插入模式，并置光标于行首 a 追加模式，置光标于当前光标之后 A 追加模式，置光标于行末 o 在当前行之下新加一行，并进入插入模式 O 在当前行之上新加一行，并进入插入模式 Esc 退出插入模式 5. 四、编辑 J 将下一行和当前行连接为一行 cc 删除当前行并进入编辑模式 cw 删除当前字，并进入编辑模式 c$ 擦除从当前位置至行末的内容，并进入编辑模式 s 删除当前字符并进入编辑模式 S 删除光标所在行并进入编辑模式 xp 交换当前字符和下一个字符 u 撤销 ctrl+r 重做 ~ 切换大小写，当前字符 >> 将当前行右移一个单位 6. 五、查找替换 /pattern 向后搜索字符串pattern ?pattern 向前搜索字符串pattern \"\\c\" 忽略大小写 \"\\C\" 大小写敏感 n 下一个匹配(如果是/搜索，则是向下的下一个，?搜索则是向上的下一个) N 上一个匹配(同上) :%s/old/new/g 搜索整个文件，将所有的old替换为new :%s/old/new/gc 搜索整个文件，将所有的old替换为new，每次都要你确认是否替换 7. 六、退出编辑器 :w 将缓冲区写入文件，即保存修改 :wq 保存修改并退出 :x 保存修改并退出 :q 退出，如果对缓冲区进行过修改，则会提示 :q! 强制退出，放弃修改 8. 七、多文件编辑 vim file1.. 同时打开多个文件 :args 显示当前编辑文件 :next 切换到下个文件 :prev 切换到前个文件 :next！ 不保存当前编辑文件并切换到下个文件 :prev！ 不保存当前编辑文件并切换到上个文件 :wnext 保存当前编辑文件并切换到下个文件 :wprev 保存当前编辑文件并切换到上个文件 :first 定位首文件 :last 定位尾文件 ctrl+^ 快速在最近打开的两个文件间切换 :split[sp] 把当前文件水平分割 :split file 把当前窗口水平分割, file :vsplit[vsp] file 把当前窗口垂直分割, file :new file 同split file :close 关闭当前窗口 :only 只显示当前窗口, 关闭所有其他的窗口 :all 打开所有的窗口 :vertical all 打开所有的窗口, 垂直打开 :qall 对所有窗口执行：q操作 :qall! 对所有窗口执行：q!操作 :wall 对所有窗口执行：w操作 :wqall 对所有窗口执行：wq操作 ctrl-w h 跳转到左边的窗口 ctrl-w j 跳转到下面的窗口 ctrl-w k 跳转到上面的窗口 ctrl-w l 跳转到右边的窗口 ctrl-w t 跳转到最顶上的窗口 ctrl-w b 跳转到最底下的窗口 9. 八、多标签编辑 :tabedit file 在新标签中打开文件file :tab split file 在新标签中打开文件file :tabp 切换到前一个标签 :tabn 切换到后一个标签 :tabc 关闭当前标签 :tabo 关闭其他标签 gt 到下一个tab gT 到上一个tab 0gt 跳到第一个tab 5gt 跳到第五个tab 10. 九、执行shell命令 1、在命令模式下输入\":sh\"，可以运行相当于在字符模式下，到输入结束想回到VIM编辑器中用exit，ctrl+D返回VIM编辑器 2、可以\"!command\"，运行结束后自动回到VIM编辑器中 3、用“Ctrl+Z“回到shell，用fg返回编辑 4、:!make -> 直接在当前目录下运行make指令 11. 十、VIM启动项 -o[n] 以水平分屏的方式打开多个文件 -O[n] 以垂直分屏的方式打开多个文件 12. 十一、自动排版 在粘贴了一些代码之后，vim变得比较乱，只要执行gg=G就能搞定 13. 十二、如何在vim中编译程序 在vim中可以完成make,而且可以将编译的结果也显示在vim里，先执行 :copen 命令，将结果输出的窗口打开，然后执行 :make 编译后的结果就显示在了copen打开的小窗口里了，而且用鼠标双击错误信息，就会跳转到发生错误的行。 14. 十三、buffer操作 1、buffer状态 - （非活动的缓冲区） a （当前被激活缓冲区） h （隐藏的缓冲区） % （当前的缓冲区） # （交换缓冲区） = （只读缓冲区） + （已经更改的缓冲区） 15. 十四、 VIM 操作目录 1.打开目录 vim . vim a-path/ 2.以下操作在操作目录时生效 p,P,t,u,U,x,v,o,r,s c 使当前打开的目录成为当前目录 d 创建目录 % 创建文件 D 删除文件/目录 - 转到上层目录 gb 转到上一个 bookmarked directory i 改变目录文件列表方式 ^l 刷新当前打开的目录 mf - 标记文件 mu - unmark all marked files mz - Compress/decompress marked files gh 显示/不显示隐藏文件( dot-files) ^h 编辑隐藏文件列表 a 转换显示模式, all - hide - unhide qf diplay infomation about file qb list the bookmarked directories and directory traversal history gi Display information on file mb mc md - 将标记的文件(mf标记文件)使用 diff 模式 me - 编辑标记的文件,只显示一个，其余放入 buffer 中 mh mm - move marked files to marked-file target directory mc - copy mp mr mt vim 中复制,移动文件 1, mt - 移动到的目录 2, mf - 标记要移动的文件 3, mc - 移动/复制 R 移动文件 打开当前编辑文件的目录 :Explore :Hexplore :Nexplore :Pexplore :Sexplore :Texplore :Vexplore powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/vim/study.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/vim/study.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"virtualBox/":{"url":"virtualBox/","title":"virtualBox","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/virtualBox/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/virtualBox/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"virtualBox/homestead.html":{"url":"virtualBox/homestead.html","title":"homestead","keywords":"","body":"1. Homestead Win1.1. VirtualBox1.2. Vagrant1.3. Homestead box1.4. 安装 Homestead 管理脚本1.5. SSH 秘钥登录1.6. 配置共享文件夹1.7. 显示文件列表1.8. vagrant命令1.9. 通过 SSH 连接1.10. 数据库1.11. 全局命令1.12. 开机自启1.13. 响应缓慢1.14. 配置域名1.15. Win10安装错误2. Homestead Mac2.1. VirtualBox2.2. Vagrant2.3. Homestead box2.4. 安装 Homestead 管理脚本2.5. 配置共享文件夹2.6. SSH 秘钥登录2.7. vagrant命令2.8. 通过 SSH 连接2.9. 配置域名2.10. 数据库2.11. 全局命令1. Homestead Win Laravel 致力于让整个 PHP 开发体验变得愉快， 包括你的本地开发环境。 Vagrant 提供了一种简单，优雅的方式来管理和配置虚拟机。 Laravel Homestead 是一个官方预封装的 Vagrant box，它为你提供了一个完美的开发环境，而无需在本地机器安装 PHP 、Web 服务器和其他服务器软件。不用担心会搞乱你的操作系统！Vagrant boxes 是一次性的。如果出现问题，你可以在几分钟内销毁并创建 Box! Homestead 可以运行在任何 Windows，Mac，或 Linux 系统，它包括了 Nginx web 服务器， PHP 7.2，PHP 7.1，PHP 7.0，PHP 5.6， MySQL，PostgreSQL，Redis，Memcached， Node，以及开发 Laravel 应用程序所需要的东西。 以下代码都是在windows 使用 git for windows 命令行工具操作的 1.1. VirtualBox https://www.virtualbox.org/ VirtualBox 是 Oracle 公司的开源虚拟机软件。VirtualBox 号称是最强的免费虚拟机软件，它不仅功能齐全，而且性能也很优异！VirtualBox 支持大部分流行的系统，如：Mac, Windows, Linux 等。 1.2. Vagrant Vagrant by HashiCorp Vagrant 是用来管理虚拟机的工具，支持当前主流的虚拟机系统如 VirtualBox、VMware、AWS 等。Vagrant 的主要作用是提供一个可配置、可移植和复用的软件环境。Vagrant 让你通过编写一个 Vagrantfile 文件来控制虚拟机的启动、虚拟机网络环境的配置、虚拟机与主机间的文件共享，以及启动后自动执行一些配置脚本，如自动执行一个 Shell Script 来安装一些必备的开发工具，如安装配置MySQL、PHP，甚至是自动配置 Nginx 站点。这意味着，在一个多人开发的项目中，你只需要同步 Vagrantfile 文件，就可以保证参与项目的每个人各自的机器上拥有一致的开发环境。 可以在下面网站上搜索需要的vagrant box https://app.vagrantup.com/boxes/search 卸载程序和依赖 在下载的安装包里有一个删除工具，可以直播删除 Vagrant软件。 也可以使用下面命令删除 # 删除软件 rm -rf /opt/vagrant rm -f /usr/local/bin/vagrant sudo pkgutil --forget com.vagrant.vagrant #删除用户数据 rm -rf ~/.vagrant rm -rf ~/.vagrant.d 1.3. Homestead box Homestead是一个官方预封装的 Vagrant box，它为你提供了一个完美的开发环境，而无需在本地机器安装 PHP 、Web 服务器和其他服务器软件。不用担心会搞乱你的操作系统！Vagrant boxes 是一次性的。如果出现问题，你可以在几分钟内销毁并创建 Box! 内置软件：Ubuntu 16.04、Git、PHP 7.2、PHP 7.1、Nginx、Apache (Optional)、MySQL …… 在线安装 Homestead Vagrant Box，这样安装下载会非常慢，可以使用第二种本地文件安装方式 vagrant box add laravel/homestead 本地文件安装 先下载离线 homestead.box https://pan.baidu.com/s/1-obdVwlryRdtVV-8-iD56A 然后执行 vagrant box add laravel/homestead d:/code/homestead.box 安装的box 镜像储存的位置：以我电脑为例在 ~/.vagrant.d/boxes 1.4. 安装 Homestead 管理脚本 #clone管理脚本 git clone https://github.com/laravel/homestead.git ~/Homestead cd ~/Homestead #因为master不稳定所以切到稳定tag git checkout v7.3.0 #创建 Homestead.yaml 配置文件 ./init.bat 如果是本地安装的 homestead.box 版本为0，所以需要修改下面步骤生成的配置文件 /Users/xj/Homestead/scripts/homestead.rb 以下内容 config.vm.box_version = settings[\"version\"] ||= \">= 0\" 1.5. SSH 秘钥登录 用于实现 SSH 免密码登录 修改 Homestead.yaml 文件以下内容： keys: - ~/.ssh/id_rsa - ~/.ssh/id_rsa.pub 生成 key ssh-keygen -t rsa -C \"2300071698@qq.com\" #后面一真按enter键，设置密码 1.6. 配置共享文件夹 Homestead.yaml 文件的 folders 属性里列出所有与 Homestead 环境共享的文件夹。这些文件夹中的文件若有变更，它们会保持本地机器与 Homestead 环境之间同步。你可以根据需要配置多个共享文件夹： folders: - map: d:/code to: /home/vagrant/Code # map 对应的是我们本机的文件夹 * to 对应的是 Homestead 上的文件夹 1.7. 显示文件列表 在开发环境下我们希望在浏览器中显示文件列表 vim /etc/nginx/nginx.conf 添加 http { ... autoindex on; # 显示文件列表 ... } 1.8. vagrant命令 #启动 如果加上 --provision 选项那么添加的新站点会发布到虚拟机上。 cd ~/Homestead && vagrant up #关闭 vagrant halt #通过 SSH 登录 vagrant（需要先启动 vagrant） vagrant ssh #查看目前安装的box列表 vagrant box list #删除box镜像 vagrant box remove laravel/homestead #删除指定版本 vagrant box remove laravel/homestead --box-version 6.4.0 #查看当前 Homestead 虚拟机的状态。 vagrant status 1.9. 通过 SSH 连接 这样就可以登录的 homestead 虚拟主机了，此地可以查看上面定义的本地目录与虚拟机目录同步的情况 vagrant ssh 1.10. 数据库 要从主机的数据库客户端连接到 MySQL，就连接到 127.0.0.1和端口 33060 (MySQL) 。账号密码分别是 homestead／secret。 PHP程序连接（虚拟机中连接）端口为 3306 1.11. 全局命令 Git for Windows环境中使用 如果我们想在任何目录都可以执行 vagrant 命令，需要进行以下设置 修改 ~/.bash_profile 文件内容，这种设置只在 git for windows 软件中使用 function homestead() { ( cd ~/Homestead && vagrant $* ) } 这样我们就可以使用 homestead up 等方式执行了。 设置Windows全局命令 @echo off set cwd=%cd% set homesteadVagrant=C:\\Users\\xj\\Homestead cd /d %homesteadVagrant% && vagrant %* cd /d %cwd% set cwd= set homesteadVagrant= 你需要将脚本中实例路径 C:\\Homestead 调整为 Homestead 实际安装路径。创建文件之后，添加文件路径到 PATH，这样你就可以在系统的任意位置运行 homestead up 或 homestead ssh 命令了。 如果想让计算机启动时执行 homestead ，在开始菜单->所有程序->启动 文件夹中设置 homestead.bat内容如下。 homestead up 1.12. 开机自启 在 开始菜单>启动 文件夹中创建 homestead.bat 文件内容如下 homestead up 要在360或腾讯电脑管家中的启动项中不要禁用。 1.13. 响应缓慢 解决WINDOS系统下Homestead运行缓慢的问题 一定要先备份 首先，命令行进入 Homestead 启动 vagrant > cd ~/Homestead && vagrant up 然后运行安装命令（如果下载失败可能被墙了） $ vagrant plugin install vagrant-winnfsd 修改文件1：homestead/scripts/homestead.rb 查找此段代码（可能略有不同），替换为以下内容 if settings.include? 'folders' settings[\"folders\"].sort! { |a,b| a[\"map\"].length b[\"map\"].length } settings[\"folders\"].each do |folder| config.vm.synced_folder folder[\"map\"], folder[\"to\"], id: folder[\"map\"], :nfs => true, :mount_options => ['nolock,vers=3,udp,noatime'] end end 文件2：Homestead.yaml folders: - map: ~/Code to: /home/vagrant/Code type: nfs 重启 Homestead 使配置文件生效，大功告成。 1.14. 配置域名 修改 c:/windows/System32/drivers/etc/hosts 文件，因为 hosts 文件不能直接修改，需要先移动到桌面或其他文件夹，然后添加如下内容，添加好后再将文件移动回来。 192.168.10.10 hdcms.hd 上面定义了一个域名 hdcms.hd 指向我们的homestead服务器，在homestead.yaml文件内定义域名解析配置： sites: - map: hdcms.hd to: /home/vagrant/code/hdcms 现在当我们访问 hdcms.hd 时会访问到 homestead服务器下的 /home/vagrant/code/hdcms 目录 1.15. Win10安装错误 执行 cd ~/Homestead && vagrant up 开启虚拟机出现以下错误 Timed out while waiting for the machine to boot. This means that Vagrant was unable to communicate with the guest machine within the configured (\"config.vm.boot_timeout\" value) time period. If you look above, you should be able to see the error(s) that Vagrant had when attempting to connect to the machine. These errors are usually good hints as to what may be wrong. ... 进入你的BIOS，然后将virtualization（CPU虚拟化）设置为enable即可 BIOS界面：Configuratio > Intel Virtual Technology > Enabled 2. Homestead Mac 后盾人 wwwhoudunren.com 作者：向军大叔 Laravel 致力于让整个 PHP 开发体验变得愉快， 包括你的本地开发环境。 Vagrant 提供了一种简单，优雅的方式来管理和配置虚拟机。 Laravel Homestead 是一个官方预封装的 Vagrant box，它为你提供了一个完美的开发环境，而无需在本地机器安装 PHP 、Web 服务器和其他服务器软件。不用担心会搞乱你的操作系统！Vagrant boxes 是一次性的。如果出现问题，你可以在几分钟内销毁并创建 Box! Homestead 可以运行在任何 Windows，Mac，或 Linux 系统，它包括了 Nginx web 服务器， PHP 7.2，PHP 7.1，PHP 7.0，PHP 5.6， MySQL，PostgreSQL，Redis，Memcached， Node，以及开发 Laravel 应用程序所需要的东西。 2.1. VirtualBox https://www.virtualbox.org/ VirtualBox 是 Oracle 公司的开源虚拟机软件。VirtualBox 号称是最强的免费虚拟机软件，它不仅功能齐全，而且性能也很优异！VirtualBox 支持大部分流行的系统，如：Mac, Windows, Linux 等。 2.2. Vagrant Vagrant by HashiCorp Vagrant 是用来管理虚拟机的工具，支持当前主流的虚拟机系统如 VirtualBox、VMware、AWS 等。Vagrant 的主要作用是提供一个可配置、可移植和复用的软件环境。Vagrant 让你通过编写一个 Vagrantfile 文件来控制虚拟机的启动、虚拟机网络环境的配置、虚拟机与主机间的文件共享，以及启动后自动执行一些配置脚本，如自动执行一个 Shell Script 来安装一些必备的开发工具，如安装配置MySQL、PHP，甚至是自动配置 Nginx 站点。这意味着，在一个多人开发的项目中，你只需要同步 Vagrantfile 文件，就可以保证参与项目的每个人各自的机器上拥有一致的开发环境。 可以在下面网站上搜索需要的vagrant box https://app.vagrantup.com/boxes/search 2.3. Homestead box Homestead是一个官方预封装的 Vagrant box，它为你提供了一个完美的开发环境，而无需在本地机器安装 PHP 、Web 服务器和其他服务器软件。不用担心会搞乱你的操作系统！Vagrant boxes 是一次性的。如果出现问题，你可以在几分钟内销毁并创建 Box! 内置软件：Ubuntu 16.04、Git、PHP 7.2、PHP 7.1、Nginx、Apache (Optional)、MySQL …… 在线安装 Homestead Vagrant Box，这样安装下载会非常慢，可以使用第二种本地文件安装方式 vagrant box add laravel/homestead 本地文件安装 先下载 离线 homestead.box ，然后执行 vagrant box add laravel/homestead ~/Desktop/homesteadvirtual5.2.box 2.4. 安装 Homestead 管理脚本 #clone管理脚本 git clone https://github.com/laravel/homestead.git ~/Homestead cd Homestead #因为master不稳定所以切到稳定tag git checkout v7.7.0 #创建 Homestead.yaml 配置文件 bash init.sh 如果是本地安装的 homestead.box 版本为0，所以需要修改下面步骤生成的配置文件 /Users/xj/Homestead/scripts/homestead.rb 以下内容 config.vm.box_version = settings[\"version\"] ||= \">= 0\" 安装的box 镜像储存的位置：以我电脑为例在 /Users/xj/.vagrant.d/boxes 2.5. 配置共享文件夹 Homestead.yaml 文件的 folders 属性里列出所有与 Homestead 环境共享的文件夹。这些文件夹中的文件若有变更，它们会保持本地机器与 Homestead 环境之间同步。你可以根据需要配置多个共享文件夹： folders: - map: ~/Code to: /home/vagrant/Code type: nfs # map 对应的是我们本机的文件夹 # to 对应的是 Homestead 上的文件夹 # type 这样可以提升加载速度 2.6. SSH 秘钥登录 用于实现 SSH 免密码登录 修改 Homestead.yaml 文件以下内容： keys: - ~/.ssh/id_rsa - ~/.ssh/id_rsa.pub 生成 key ssh-keygen -t rsa -C \"2300071698@qq.com\" #后面一真按enter键，设置密码 2.7. vagrant命令 #启动 如果加上 --provision 选项那么添加的新站点会发布到虚拟机上。 cd ~/Homestead && vagrant up #关闭 vagrant halt #通过 SSH 登录 vagrant（需要先启动 vagrant） vagrant ssh #查看目前安装的box列表 vagrant box list #删除box镜像 vagrant box remove laravel/homestead #删除指定版本 vagrant box remove laravel/homestead --box-version 6.4.0 #查看当前 Homestead 虚拟机的状态。 vagrant status 2.8. 通过 SSH 连接 这样就可以登录的 homestead 虚拟主机了，此地可以查看上面定义的本地目录与虚拟机目录同步的情况 vagrant ssh 2.9. 配置域名 修改 /etc/hosts 文件添加如下内容。 192.168.10.10 hdcms.hd 上面定义了一个域名 hdcms.hd 指向我们的homestead服务器，在homestead.yaml文件内定义域名解析配置： sites: - map: hdcms.hd to: /home/vagrant/code/hdcms 现在当我们访问 hdcms.hd 时会访问到 homestead服务器下的 /home/vagrant/code/hdcms 目录 2.10. 数据库 要从主机的数据库客户端连接到 MySQL，就连接到 127.0.0.1和端口 33060 (MySQL) 。账号密码分别是 homestead／secret。 PHP程序连接（虚拟机中连接）端口为 3306 2.11. 全局命令 如果我们想在任何目录都可以执行 vagrant 命令，需要进行以下设置 修改 ~/.bash_profile 文件，如果安装了 zsh 需要修改 ~/.zshrc文件 function homestead() { ( cd ~/Homestead && vagrant $* ) } 这样我们就可以使用 homestead up 等方式执行了 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/virtualBox/homestead.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/virtualBox/homestead.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"virtualBox/vagrant.html":{"url":"virtualBox/vagrant.html","title":"vagrant","keywords":"","body":"1. Vagrant2. 一、操作镜像2.1. 1. vagrant box2.1.1. 添加镜像到本地仓库2.1.2. 移除本地镜像2.1.3. box 多版本共存的情况2.1.4. 升级镜像2.2. 2. 打包镜像3. 二、操作虚拟机3.1. 1. 启动 vm3.2. 2. 休眠与唤醒3.3. 3. 快照3.4. 4. 盗梦空间3.5. 5. 远程连接分享3.6. 6. 共享http3.7. 7. windows 相关的操作3.8. 8. 虚机环境部署3.9. 9. 指定vmid操作虚拟机4. 三、监控虚拟机4.1. 1. 查看 sshd 配置信息4.2. 2. 查看虚拟机开放的端口4.3. 3. 查看虚拟机状态4.4. 4. 查看全部虚机状态5. 四、其他命令5.1. 1. 获取帮助5.2. 2. 登录到中央仓库5.3. 3. 插件管理5.4. 4. 发布镜像到中央仓库5.5. 5. 获取版本信息6. 五、相关资源6.1. 软件下载6.2. Box下载1. Vagrant vagrant Link 2. 一、操作镜像 该命令有两个，用来管理本地镜像。 2.1. 1. vagrant box 2.1.1. 添加镜像到本地仓库 vagrant box add [box-name] [box 镜像文件或镜像名] 2.1.2. 移除本地镜像 vagrant box remove [box-name] 2.1.3. box 多版本共存的情况 如果 box 升级过，那么在 box list 中会出现两个同名，但版本不同的镜像。如： $ vagrant box list |grp coreos coreos-alpha (virtualbox, 745.1.0) coreos-alpha (virtualbox, 928.0.0) 使用该镜像创建虚拟机的时候，默认会使用高版本的 box。 如果想使用低版本，需要修改 rantfile,指定 box-version 在 config.vm.box=xxx 下一行，如上面的例子中，在『config.vm.box = “coreos-alpha”』后面增加一行配置信息： config.vm.box_version = “745.1.0” 同样，如果想删除一个 box，如下操作会失败： $ vagrant box remove coreos-alpha You requested to remove the box 'coreos-alpha' with provider 'virtualbox'. This box has multiple versions. You must explicitly specify which version you want to remove with the `--box-version` flag or specify the `--all` flag to remove all versions. The available versions for this box are: * 745.1.0 * 928.0.0 这时有两个选择： 删除所有同名镜像 vagrant box remove coreos-alpha –all 删除指定版本的镜像 vagrant box remove coreos-alpha –box-version=745.1.0 2.1.4. 升级镜像 检查镜像是否有升级？ $ cd ~/vm/ubuntu $ vagrant box outdated Checking if box 'ubuntu/trusty64' is up to date... A newer version of the box 'ubuntu/precise64' is available! You currently have version '20160122.0.0'. The latest is version '20160209.0.0'. Run `vagrant box update` to update. 中央仓库有新版更新了，手动更新 box 。更新的结果并不是替换旧版本，而是在本地仓库中增加了新版的 box 镜像。 $ cd ~/vm/ubuntu $ vagrant box update ==> default: Checking for updates to 'ubuntu/precise64' default: Latest installed version: 20160120.0.0 default: Version constraints: default: Provider: virtualbox ==> default: Updating 'ubuntu/precise64' with provider 'virtualbox' from version ==> default: '20160120.0.0' to '20160201.0.0'... ==> default: Loading metadata for box 'https://atlas.hashicorp.com/ubuntu/precise64?access_token=cXR0wCgWXoRpMw.atlasv1.ydBAS4ev1YCWzSK4S1l6iVjssRbO5Q50a8YVnEPqoyYjcQVeaMdEsiQ8rz8tOcSHLuY' ==> default: Adding box 'ubuntu/precise64' (v20160201.0.0) for provider: virtualbox default: Downloading: https://atlas.hashicorp.com/ubuntu/boxes/precise64/versions/20160201.0.0/providers/virtualbox.box ==> default: Successfully added box 'ubuntu/precise64' (v20160201.0.0) for 'virtualbox'! $ vagrant box list | grep precise64 ubuntu/precise64 (virtualbox, 20160120.0.0) ubuntu/precise64 (virtualbox, 20160201.0.0) 也可以检查本地仓库中的所有镜像是否有升级,使用 –global 开关，这时候不需要进入工作目录 $ vagrant box outdated --global * 'ubuntu/trusty64' is outdated! Current: 20160122.0.0. Latest: 20160209.0.0 * 'ubuntu/precise64' (v20160201.0.0) is up to date * 'pollyduan/bento_oracle_xe' wasn't added from a catalog, no version information * 'phusion/ubuntu-14.04-amd64' (v2014.04.30) is up to date * 'hashicorp/precise32' (v1.0.0) is up to date * 'hashicorp/boot2docker' (v1.7.8) is up to date * 'debian/jessie64' wasn't added from a catalog, no version information * 'coreos-alpha' is outdated! Current: 928.0.0. Latest: 955.0.0 * 'centos7' wasn't added from a catalog, no version information * 'centos65' wasn't added from a catalog, no version information * 'centos64' wasn't added from a catalog, no version information * 'bento/ubuntu-14.04' (v2.2.3) is up to date * 'bento/opensuse-13.2-x86_64' (v2.2.1) is up to date * 'bento/freebsd-10.2' (v2.2.3) is up to date * 'bento/fedora-22' (v2.2.3) is up to date * 'bento/debian-8.2' (v2.2.3) is up to date * 'bento/centos-7.2' (v2.2.3) is up to date * 'bento/centos-6.7' (v2.2.3) is up to date 不进入工作目录进行升级 $ vagrant box update --box coreos-alpha Checking for updates to 'coreos-alpha' Latest installed version: 928.0.0 Version constraints: > 928.0.0 Provider: virtualbox Updating 'coreos-alpha' with provider 'virtualbox' from version '928.0.0' to '955.0.0'... Loading metadata for box 'http://alpha.release.core-os.net/amd64-usr/current/coreos_production_vagrant.json' Adding box 'coreos-alpha' (v955.0.0) for provider: virtualbox Downloading: http://alpha.release.core-os.net/amd64-usr/955.0.0/coreos_production_vagrant.box Box download is resuming from prior download progress Progress: 1% (Rate: 92912/s, Estimated time remaining: 0:38:09) ... 2.2. 2. 打包镜像 创建 vm 以后，我们自己根据需要安装软件，配置环境，都一切就绪了。如何分发给小伙伴使用呢？这里就要涌到 package 命令了，把镜像打包分发。 $ ll ~/VirtualBox\\ VMs/ |grep ubuntu drwx------ 6 pollyduan staff 204 2 2 11:18 ubuntu_default_1453944793418_7699 先看一下我们的 vm 目录名，这里有个容易混淆的目录： Vagrantfile所在的目录——vagrant的工作目录 虚拟机文件所在的目录——virtualbox的工作目录 这两个目录名不一定相同，如果在 Vagrantfile 中指定了 vb.name，virtualbox 工作目录就取这个名字；否则，命名为：vagrant 工作目录_随机字符串。 或者，也可以使用 virtual box 的管理工具来看 vm 的名称。 $ VBoxManage list vms|grep ubuntu \"ubuntu_default_1453944793418_7699\" {0362edc2-548b-400b-a55d-776b0a24cd8d} package 命令要使用的是 virtual box 工作目录。 格式：vagrant package –base [virtualbox的工作目录] –output [保存的文件名，缺省为 package.box] $ vagrant package --base ubuntu_default_1453944793418_7699 --output ubuntu_myproject_test.box ==> ubuntu_default_1453944793418_7699: Clearing any previously set forwarded ports... ==> ubuntu_default_1453944793418_7699: Exporting VM... ==> ubuntu_default_1453944793418_7699: Compressing package to: /Users/pollyduan/vm/tmp/ubuntu_myproject_test.box 导出后，可以通过 IM、ftp 或其他方式分发给小伙伴，那么大家使用的环境就是一致的了。 3. 二、操作虚拟机 3.1. 1. 启动 vm # 对于单虚拟机 $ vagrant up # 如果同一个 Vagrantfile 定义了一个以上的虚拟机，则： $ vagrant up [vm-name] # 其他命令类似。如果省略 vm-name ，则依次启动所有 vm。 # 重启 $ vagrant reload [vm-name] # 关机 $ vagrant halt [vm-name] # 销毁虚拟机 $ vagrant destroy [vm-name] # ssh 登录虚拟机 $ vagrant ssh [vm-name] 3.2. 2. 休眠与唤醒 这一对冤家也无需多说，对于开发环境来说，个人觉得用处不是很大。 $ vagrant suspend ==> default: Saving VM state and suspending execution... $ vagrant status Current machine states: default saved (virtualbox) To resume this VM, simply run `vagrant up`. $ vagrant resume ==> default: Resuming suspended VM... ==> default: Booting VM... …... 3.3. 3. 快照 vagrant snapshot 命令是 vm 的月光宝盒，如果 vm 中有任务没有跑完，需要关闭 virtual box ，就可以给 vm 做一个快照，保存 vm 当前所有的状态，在 virtualbox 重新启动后，再回复快照。 # 查看当前保存的快照 $ vagrant snapshot list ==> default: No snapshots have been taken yet! # 创建一个命名快照 $ vagrant snapshot save shot1 ==> default: Snapshotting the machine as 'shot1'... $ vagrant snapshot list shot1 # 恢复快照 $ vagrant snapshot restore shot1 ==> default: Forcing shutdown of VM... ==> default: Restoring the snapshot 'shot1'... …... # 恢复后，快照会一直存在，直到你手动删除它。 # 删除快照 $ vagrant snapshot delete shot1 ==> default: Deleting the snapshot 'shot1'... Progress: 90% Progress: 100% ==> default: Snapshot deleted! 这个操作会删除持久化的数据文件，稍微有点慢，耐心等待。这个内在的原理没有深入研究，有点不太理解，删除一个文件理论上应该比保存一个文件更快才对。 3.4. 4. 盗梦空间 push 和 pop ，每调用一次 push 命令会自动创建一个命名快照，名为：push+一串随机数，如：push_1455524411_6632；每调用一次 pop ，会逐级恢复到最新的快照，并删除快照。看例子： $ vagrant snapshot list ==> default: No snapshots have been taken yet! $ vagrant snapshot push ==> default: Snapshotting the machine as 'push_1455525041_2882'... $ vagrant snapshot list push_1455525041_2882 $ vagrant snapshot push ==> default: Snapshotting the machine as 'push_1455525049_7456'... $ vagrant snapshot push ==> default: Snapshotting the machine as 'push_1455525058_6891'... $ vagrant snapshot list push_1455525041_2882 push_1455525049_7456 push_1455525058_6891 $ vagrant snapshot pop ==> default: Forcing shutdown of VM... ==> default: Restoring the snapshot 'push_1455525058_6891'... ==> default: Deleting the snapshot 'push_1455525058_6891'... ==> default: Snapshot deleted! $ vagrant snapshot list push_1455525041_2882 push_1455525049_7456 Tips: 文本的日志看起来还不够形象，在 push 三个 snapshot 后在 virtual box 中是树形显示的；每次 pop ，树枝会逐级退回，看起来更像穿越的感觉。 Tips: 在 pop 清空之前，随时可以通过 restore 恢复其中一个快照，同样快照不会删除；不影响 pop 的测试。 3.5. 5. 远程连接分享 远程连接通过 share connect 两个命令可以实现通过本机 vagrant 连接另外一台 host 上的虚机。 # 允许 ssh 连接 $ vagrant share --ssh ==> default: Detecting network information for machine... default: Local machine address: 127.0.0.1 default: default: Note: With the local address (127.0.0.1), Vagrant Share can only default: share any ports you have forwarded. Assign an IP or address to your default: machine to expose all TCP ports. Consult the documentation default: for your provider ('virtualbox') for more information. default: default: An HTTP port couldn't be detected! Since SSH is enabled, this is default: not an error. If you want to share both SSH and HTTP, please set default: an HTTP port with `--http`. default: default: Local HTTP port: disabled default: Local HTTPS port: disabled default: SSH Port: 2200 default: Port: 2200 ==> default: Generating new SSH key... default: Please enter a password to encrypt the key: [输入授权密码] default: Repeat the password to confirm:[再输一次] default: Inserting generated SSH key into machine... ==> default: Checking authentication and authorization... ==> default: Creating Vagrant Share session... default: Share will be at: vile-ibex-8238 ==> default: Your Vagrant Share is running! Name: vile-ibex-8238 ==> default: ==> default: You're sharing your Vagrant machine in \"restricted\" mode. This ==> default: means that only the ports listed above will be accessible by ==> default: other users (either via the web URL or using `vagrant connect`). ==> default: ==> default: You're sharing with SSH access. This means that another user ==> default: simply has to run `vagrant connect --ssh vile-ibex-8238` ==> default: to SSH to your Vagrant machine. ==> default: ==> default: Because you encrypted your SSH private key with a password, ==> default: the other user will be prompted for this password when they ==> default: run `vagrant connect --ssh`. Please share this password with them ==> default: in some secure way. Tips: 你可以通过–name指定一个名称，否则会随机生成一个共享名，如本例中的 vile-ibex-8238 # 连接远端 ssh 虚拟机 $ vagrant connect --ssh vile-ibex-8238 --static-ip 10.2.136.211 Loading share 'vile-ibex-8238'... The SSH key to connect to this share is encrypted. You will require the password entered when creating to share to decrypt it. Verify you access to this password before continuing. Press enter to continue, or Ctrl-C to exit now.[回车] Password for the private key:[输入授权密码] Executing SSH... vagrant@vagrant-ubuntu-trusty-64:~$ 3.6. 6. 共享http vagrant share 可以把 host 主机的 http 开放到远端，供任何人访问，这好像跟 vm 没什么关系，但的确它发生了。 $ ~/apache-tomcat-8.0.28/bin/startup.sh $ vagrant share --http 80 ==> default: Detecting network information for machine... default: Local machine address: 127.0.0.1 default: default: Note: With the local address (127.0.0.1), Vagrant Share can only default: share any ports you have forwarded. Assign an IP or address to your default: machine to expose all TCP ports. Consult the documentation default: for your provider ('virtualbox') for more information. default: default: Local HTTP port: 80 default: Local HTTPS port: disabled default: Port: 2200 ==> default: Checking authentication and authorization... ==> default: Creating Vagrant Share session... default: Share will be at: enchanting-buffalo-1493 ==> default: Your Vagrant Share is running! Name: enchanting-buffalo-1493 ==> default: URL: http://enchanting-buffalo-1493.vagrantshare.com ==> default: ==> default: You're sharing your Vagrant machine in \"restricted\" mode. This ==> default: means that only the ports listed above will be accessible by ==> default: other users (either via the web URL or using `vagrant connect`). 我的 host 电脑在内网，在外网的任意一台电脑上，访问： http://enchanting-buffalo-1493.vagrantshare.com 奇迹发生了。 话说这个有什么用呢？别忘记，vagrant 有一个端口映射的功能，在后面的 Vagrantfile 配置里会提到，这样做的结果，就是可以在互联网任意一个角落可以访问到你的虚机的 http 服务。 3.7. 7. windows 相关的操作 powershelgl 和 rdp 是 windows vm 相关的操作，未做测试，忽略。 3.8. 8. 虚机环境部署 provision 用于通过 Vagrantfile 配置文件，对 vm 进行部署，如安装软件，发布应用等，在这里不多说，专门一章来记录。 3.9. 9. 指定vmid操作虚拟机 在 查看虚拟机状态 中，我们可以看到当前工作机中的所有虚机，其中第一列数据为 vmid，我们可以无需进入 vagrant 工作目录，操作这些虚机。如： vagrant up 63093ce 该方式适用于前面提到的 up、reload、halt、destroy 等命令。 4. 三、监控虚拟机 4.1. 1. 查看 sshd 配置信息 $ vagrant ssh-config Host default HostName 127.0.0.1 User vagrant Port 2222 UserKnownHostsFile /dev/null StrictHostKeyChecking no PasswordAuthentication no IdentityFile \"/Users/pollyduan/vm/ubuntu/.vagrant/machines/default/virtualbox/private_key\" IdentitiesOnly yes LogLevel FATAL 4.2. 2. 查看虚拟机开放的端口 $ vagrant port The forwarded ports for the machine are listed below. Please note that these values may differ from values configured in the Vagrantfile if the provider supports automatic port collision detection and resolution. 22 (guest) => 2222 (host) 4.3. 3. 查看虚拟机状态 # 查看当前 vm 状态 $ cd ~/vm/ubuntu $ vagrant status Current machine states: default poweroff (virtualbox) The VM is powered off. To restart the VM, simply run `vagrant up` 状态可能是： not create 执行 vagrant init 命令后，从未启动过 poweroff 关机 running 运行中 saved 休眠 4.4. 4. 查看全部虚机状态 此命令无需进入 vagrant 工作目录。 $ vagrant global-status id name provider state directory -------------------------------------------------------------------------------- be5dee2 mfsmaster virtualbox poweroff /Users/pollyduan/vm/mfs a523de6 mfschunk1 virtualbox poweroff /Users/pollyduan/vm/mfs 8377e0d mfschunk2 virtualbox poweroff /Users/pollyduan/vm/mfs b772b1f metalogger virtualbox poweroff /Users/pollyduan/vm/mfs 8a5f10e mfsclient virtualbox poweroff /Users/pollyduan/vm/mfs 63093ce default virtualbox poweroff /Users/pollyduan/vm/ubuntu 你可能会发现，为什么有的是 default ，有的是有名字的。这就是因为 mfsxxxx 是在 vagrantfile 中指定了 vb.name ，他对应的 virtualbox 工作目录也是这个值，而 ubuntu 这个虚机没有指定，所以是 default，而且其 virtualbox 工作目录也是比较长的——ubuntu_default_1453944793418_7699。 global-status 统计信息不是实时的，所有不能保证数据是绝对准确的。如果在 vagrant up 启动后，我们在 virtualbox 管理终端关闭 vm ，global-status 是捕获不到的，它还是会显示 running 状态。 截至 1.8.1 还是这样的，应该算是一个 bug 。处女座可能无法接受这个现实，那么你可以进入 vagrant 工作目录，手动再指定一次 vagrant halt ，状态就同步了。 5. 四、其他命令 5.1. 1. 获取帮助 help 5.2. 2. 登录到中央仓库 login 5.3. 3. 插件管理 plugin 5.4. 4. 发布镜像到中央仓库 push 5.5. 5. 获取版本信息 version 6. 五、相关资源 6.1. 软件下载 官网 http://www.vagrantup.com 官方下载地址 https://www.vagrantup.com/downloads.html 旧版本下载 https://releases.hashicorp.com/vagrant/ 6.2. Box下载 官方仓库 https://atlas.hashicorp.com/boxes/search 官方镜像 https://vagrantcloud.com/boxes/search 第三方仓库 http://www.vagrantbox.es/ 原文链接：http://blog.csdn.net/54powerman/article/details/50669807 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/virtualBox/vagrant.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/virtualBox/vagrant.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"webpack/":{"url":"webpack/","title":"webpack","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/webpack/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/webpack/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"webpack/file-handle.html":{"url":"webpack/file-handle.html","title":"file-handle","keywords":"","body":"1. webpack将资源打成zip包1. webpack将资源打成zip包 该插件允许你复制，打包，移动，删除文件及文件夹在build之前及之后。 安装： ​ npm install filemanager-webpack-plugin --save-dev 资源打zip包 Webpack.config.js： const FileManagerPlugin = require('filemanager-webpack-plugin'); new FileManagerPlugin({ onEnd: { mkdir: ['./zip'], archive: [ { source: './dist', destination: './zip/test.zip' }, ] } }) 其他功能（移动，打包，复制）Webpack.config.js: const FileManagerPlugin = require('filemanager-webpack-plugin'); module.exports = { ... ... plugins: [ new FileManagerPlugin({ onEnd: { copy: [ { source: '/path/from', destination: '/path/to' }, { source: '/path/**/*.js', destination: '/path' }, { source: '/path/fromfile.txt', destination: '/path/tofile.txt' }, { source: '/path/**/*.{html,js}', destination: '/path/to' }, { source: '/path/{file1,file2}.js', destination: '/path/to' }, { source: '/path/file-[hash].js', destination: '/path/to' } ], move: [ { source: '/path/from', destination: '/path/to' }, { source: '/path/fromfile.txt', destination: '/path/tofile.txt' } ], delete: [ '/path/to/file.txt', '/path/to/directory/' ], mkdir: [ '/path/to/directory/', '/another/directory/' ], archive: [ { source: '/path/from', destination: '/path/to.zip' }, { source: '/path/**/*.js', destination: '/path/to.zip' }, { source: '/path/fromfile.txt', destination: '/path/to.zip' }, { source: '/path/fromfile.txt', destination: '/path/to.zip', format: 'tar' }, { source: '/path/fromfile.txt', destination: '/path/to.tar.gz', format: 'tar', options: { gzip: true, gzipOptions: { level: 1 } } } ] } }) ], ... } powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/webpack/file-handle.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/webpack/file-handle.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"webpack/打包全过程.html":{"url":"webpack/打包全过程.html","title":"打包全过程","keywords":"","body":"1. 实战 webpack 4 配置解析1. 实战 webpack 4 配置解析 https://blog.csdn.net/userkang/article/details/83863369 配置 github 仓库 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/webpack/打包全过程.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/webpack/打包全过程.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"友情链接/":{"url":"友情链接/","title":"友情链接","keywords":"","body":"1. 让PIP源使用国内镜像，提升下载速度和安装成功率。1.1. 国内源：1.2. 临时使用：1.3. 永久修改，一劳永逸：1. 让PIP源使用国内镜像，提升下载速度和安装成功率。 对于Python开发用户来讲，PIP安装软件包是家常便饭。但国外的源下载速度实在太慢，浪费时间。而且经常出现下载后安装出错问题。所以把PIP安装源替换成国内镜像，可以大幅提升下载速度，还可以提高安装成功率。 1.1. 国内源： 新版ubuntu要求使用https源，要注意。 清华：https://pypi.tuna.tsinghua.edu.cn/simple 阿里云：http://mirrors.aliyun.com/pypi/simple/ 中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/ 华中理工大学：http://pypi.hustunique.com/ 山东理工大学：http://pypi.sdutlinux.org/ 豆瓣：http://pypi.douban.com/simple/ 1.2. 临时使用： 可以在使用pip的时候加参数-i https://pypi.tuna.tsinghua.edu.cn/simple 例如：pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pyspider，这样就会从清华这边的镜像去安装pyspider库。 1.3. 永久修改，一劳永逸： Linux下，修改 ~/.pip/pip.conf (没有就创建一个文件夹及文件。文件夹要加“.”，表示是隐藏文件夹) 内容如下： [global] index-url = https://pypi.tuna.tsinghua.edu.cn/simple [install] trusted-host=mirrors.aliyun.com // set https trusted host,--trusted-host windows下，直接在user目录中创建一个pip目录，如：C:\\Users\\xx\\pip，新建文件pip.ini。内容同上。 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/友情链接/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/友情链接/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"友情链接/blog.html":{"url":"友情链接/blog.html","title":"blog","keywords":"","body":"全栈博客 里边记录了Android，iOS，PHP，Git，Mac，Linux等等 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/友情链接/blog.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/友情链接/blog.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"友情链接/test.html":{"url":"友情链接/test.html","title":"test","keywords":"","body":" To view this video please enable JavaScript, and consider upgrading to a web browser that supports HTML5 video powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/友情链接/test.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/友情链接/test.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"数据结构与算法/":{"url":"数据结构与算法/","title":"数据结构与算法","keywords":"","body":"数据结构的JavaScript实现 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/README.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"数据结构与算法/AVL.html":{"url":"数据结构与算法/AVL.html","title":"AVL","keywords":"","body":"1. AVL(平衡二叉树)1.1.1. 计算节点的高度和平衡因子1.1.2. 检查二分搜索树性质和平衡性1.1.3. AVL旋转操作的基本原理1.1.4. 左旋转和右旋转的实现。1. AVL(平衡二叉树) 我们之前实现的那个二叉树在最差情况下会退化成链表，在现有二分搜索树基础上添加一定的机制，使得二分搜索树可以维持平衡二叉树性质。AVL树就是一种经典的平衡二叉树。 通常认为AVL树时一种最早的可以自平衡二分搜索树结构 什么是平衡二叉树？ 一棵满二叉树一定是一棵平衡二叉树，之前在二分搜索树部分，具体的推导二分搜索树平均的时间复杂度时，基于满二叉树进行的推导。显然满二叉树可以让整棵树的高度最低。 除了叶子节点，其他节点都有左右两孩子。通常不会正好这么巧的填满，堆: 完全二叉树,空缺部分在右下角，完全二叉树中叶子节点深度值相差不会超过1,叶子节点不在最后一层，就在倒数第二层。 线段树: 也是一种平衡二叉树 空出来的节点不一定在右下角，但是叶子节点深度值相差不会超过1,叶子节点不在最后一层，就在倒数第二层。 上面的这几种平衡二叉树叶子节点深度值不超过1是比较理想的平衡二叉树。 平衡二叉树定义 对于任意一个节点，左子树和右子树的高度差不能超过1 堆和线段树可以保证叶子节点高度不超过1，而平衡二叉树的定义宽泛，导致可能看起来树没有那么平衡。 如上图，满足平衡二叉树，不满足堆,也不是完全二叉树。平衡二叉树的高度和节点数量之间的关系也是O(logn)的 如果按之前二叉树的添加值的方式，添加2，7节点之后，整棵树已经不满足平衡二叉树的要求了。我们需要向右填补偏斜。每一个节点都要记录标注节点的高度。 最高的子树高度+1 平衡因子 计算平衡因子: 每一个节点左右子树高度差，左子树高度减去右子树高度。叶子节点的平衡因子为0，如下图为标注的平衡因子，8的平衡因子为2，意味着8的左右子树高度差已经超过1了，这棵树已经不是平衡二叉树了。平衡因子绝对值大于等于2，就不是。 我们现在的这棵树相当于有两个节点8和12破坏了平衡二叉树的性质。借助平衡因子看要不要对节点进行特殊操作。 1.1.1. 计算节点的高度和平衡因子 private class Node { public K key; // 节点key public V value; public Node left, right; // 左子树，右子树引用 public int height; // 节点高度 /** * 默认的节点构造函数 * * @param key * @param value */ public Node(K key, V value) { this.key = key; this.value = value; left = null; right = null; height = 1; } } 添加节点高度值，初始化构造时置为1。 /** * 获得节点node的高度 * @param node * @return */ private int getHeight(Node node){ if (node == null) return 0; return node.height; } 添加节点时维护高度值。 添加更新height的操作。 /** * 计算节点node的平衡因子 * */ private int getBalanceFactor(Node node){ if (node == null) return 0; return getHeight(node.left) - getHeight(node.right); } /** * 返回插入新的键值对后二分搜索树的根 * * @param node * @param key * @param value * @return */ private Node add(Node node, K key, V value) { if (node == null) { size++; return new Node(key, value); } // 上面条件不满足，说明还得继续往下找左右子树为null可以挂载上的节点 if (key.compareTo(node.key) 0) // 大于，往右子树添加。 node.right = add(node.right, key, value); // 如果相等 else node.value = value; // 更新height node.height = 1 + Math.max(getHeight(node.left),getHeight(node.right)); return node; } int balanceFactor = getBalanceFactor(node); if (Math.abs(balanceFactor) >1 ) System.out.println(\"unbalanced: \"+ balanceFactor); 添加元素时除了对于height的更新还应该对于平衡因子进行判断。 可以看到有很多不平衡的，虽然我们之前二分搜索树性能已经不错了。二分搜索树高度不平衡，有很大优化空间。 1.1.2. 检查二分搜索树性质和平衡性 AVL树是对于二分搜索树的改进，必须也要满足二分搜索树的条件。 /** * 判断该二叉树是否是一棵二分搜索树 * @return */ public boolean isBST(){ ArrayList keys = new ArrayList<>(); inOrder(root, keys); // 判断是否是一个升序数组 for(int i = 1 ; i 0) return false; return true; } /** * 二分搜索树中序遍历 * @param node * @param keys */ private void inOrder(Node node, ArrayList keys){ if(node == null) return; inOrder(node.left, keys); keys.add(node.key); inOrder(node.right, keys); } 判断当前树还否是二分搜索树，性质: 二分搜索树的中序遍历元素是否是顺序排列的。 System.out.println(\"is BST : \" + map.isBST()); 辅助函数，是否是一个平衡二叉树 /** * 判断该二叉树是否是一棵平衡二叉树 * @return */ public boolean isBalanced(){ return isBalanced(root); } /** * 判断以Node为根的二叉树是否是一棵平衡二叉树，递归算法 * @param node * @return */ private boolean isBalanced(Node node){ if(node == null) return true; int balanceFactor = getBalanceFactor(node); if(Math.abs(balanceFactor) > 1) return false; return isBalanced(node.left) && isBalanced(node.right); } System.out.println(\"is Balanced : \" + map.isBalanced()); 1.1.3. AVL旋转操作的基本原理 AVL树的左旋转和右旋转;在什么时候维护平衡 二分搜索树中插入节点，寻找正确插入位置。 因为我们新插入的这个节点才有可能导致二分搜索树不满足平衡性，因此不平衡性只有可能发生在我们从该节点一路往上找，直到父亲节点。新插入节点破坏平衡性，反映在它的父亲节点以及祖先节点上。因为插入它，会更新它的父亲及祖先节点，这时就有可能更新之后大于1。 从空开始，加入12,加入8 此时再添加5，就会一路向上更新平衡因子，造成12的平衡因子已经变成了2 加入2之后，向上更新平衡因子，造成8的平衡因子大于1了。插入的元素在不平衡的节点的左侧的左侧 加入节点后，沿着节点向，上维护平衡性。 // 平衡维护 if (balanceFactor > 1 && getBalanceFactor(node.left) >= 0) ; // 实现平衡维护，下一小节进行具体实现：） 此时要进行的操作是右旋转。y节点已经不满足平衡二叉树的性质了，且左子树高度高于右子树，左孩子的情况也是同样的左子树大于右子树。整体向左倾斜。 满足条件的是y和x的左子树都大于右子树。T1 使得y保持平衡性， 右旋转过程： x的右子树变成以y为根的子树。T3先扔一边，x的右子树变为y连带着t4 x.right = y y.left = T3 此时让x变成这棵树的新的根节点，就成为右旋转。相当于y顺时针的转到了x的右边，新的二叉树是满足二分搜索树的，也是满足平衡二叉树的。 T1 的关系，可以看出仍然保持二分搜索树 由于左侧中y是不平衡的节点，x和z为根的是平衡的，不然从加入节点不断向上回溯，找到的第一个不平衡节点就不应该是y了。所以对于以z为根的二叉树，它是平衡的二叉树，变到右边依然是平衡的。如果z保持了平衡性，t1和t2的高度差不会超过1。假设t1 和t2中最大的高度值为h，相应z这个节点的高度值就是h+1，右侧z1也是h+1。由于x也是保持平衡的，并且x的平衡因子是>=0的，左子树的高度是大于等于右子树的高度的，因为x也是平衡的，所以它的平衡因子最大为1，它的平衡因子要么是0，要么是1。对应就是t3这棵树的高度要么是h，要么是h+1。x的高度就是h+2。y节点打破了平衡，也就是它的左右子树的高度差是大于1的，但是最大也就是2了，因为y原本平衡，一个节点加入y，只有一个只会从1变2，因此t4为h。y左右子树高度差最多为1.y的可能取值时h+2 或h+1 此时y，z来看x，x也是平衡的。 可以看到左边转到右边，从x角度来看，X节点依然平衡，整棵树依然平衡。 1.1.4. 左旋转和右旋转的实现。 左旋转: 插入的元素在不平衡的节点的右侧的右侧 x.left = y; y.right = T3; // 对节点y进行向右旋转操作，返回旋转后新的根节点x // y x // / \\ / \\ // x T4 向右旋转 (y) z y // / \\ - - - - - - - -> / \\ / \\ // z T3 T1 T2 T3 T4 // / \\ // T1 T2 private Node rightRotate(Node y) { Node x = y.left; Node T3 = x.right; // 向右旋转过程 x.right = y; y.left = T3; // 更新height y.height = Math.max(getHeight(y.left), getHeight(y.right)) + 1; x.height = Math.max(getHeight(x.left), getHeight(x.right)) + 1; return x; } // 对节点y进行向左旋转操作，返回旋转后新的根节点x // y x // / \\ / \\ // T1 x 向左旋转 (y) y z // / \\ - - - - - - - -> / \\ / \\ // T2 z T1 T2 T3 T4 // / \\ // T3 T4 private Node leftRotate(Node y) { Node x = y.right; Node T2 = x.left; // 向左旋转过程 x.left = y; y.right = T2; // 更新height y.height = Math.max(getHeight(y.left), getHeight(y.right)) + 1; x.height = Math.max(getHeight(x.left), getHeight(x.right)) + 1; return x; } 先更新y的高度值。 // 平衡维护 if (balanceFactor > 1 && getBalanceFactor(node.left) >= 0) return rightRotate(node); if (balanceFactor powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/AVL.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/AVL.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"数据结构与算法/Binary Tree.html":{"url":"数据结构与算法/Binary Tree.html","title":"Binary Tree","keywords":"","body":"1. 树1.1. 二分搜索树的添加，查询，遍历1.1.1. 向二分搜索树中添加元素。1.1.2. 二分搜索树中搜索元素。1.1.3. 二分搜索树的遍历1.1.4. 二分搜索树前序非递归写法1.1.5. 二分搜索树的层序遍历（广度优先遍历）1.1.6. 广度优先的遍历1.1.7. 二分搜索树删除节点1. 树 树结构是一种天然的组织结构：计算机文件夹，图书馆书籍分类，公司架构，家谱 为什么选择树结构：高效 树结构分类 二分搜索树； 平衡二叉树：AVL，红黑树； 堆，并查集； 线段树[线段数据]，Trie(字典树，前缀树)[处理字符串] 二叉树 和链表一样，是一种动态的数据结构，两个叉的树，只有一个根节点，具有天然递归性，每个节点都是一个二叉树 二叉树有很多扩展的数据结构，包括二分搜索树、平衡二叉树、红黑树、AVL、Trie树等。 二叉树具有天然递归结构 很多时候在树中，使用递归结构要简单的多。天然递归结构表现在: 每个节点的左，右子树都是棵二叉树。 满二叉树: 除了叶子节点之外，每个节点都有两个孩子。 但二叉树不一定是满的。 这也是一棵二叉树，它就是一棵不满的。 这也是一颗二叉树，28和16都没有右子树,看上去是一个链表。 一个节点也是二叉树;空也是二叉树 二分搜索树 Binary Search Tree 首先，二分搜索树是二叉树。 二分搜索树的每个节点的值大于其左子树的所有节点的值，小于其右子树的所有节点的值。每一棵子树也是二分搜索树，二分搜索树存储的元素具有可比较性。 1.1. 二分搜索树的添加，查询，遍历 1.1.1. 向二分搜索树中添加元素。 二分搜索树一般不包含重复元素；如果想包含重复元素的话，只需要定义: 左子树小于等于节点;或者右子树大于等于节点。 二分搜索树添加元素的非递归写法，和链表很像; 这个课程在二分搜索树方面的实现，关注递归实现 1.1.2. 二分搜索树中搜索元素。 同样是递归操作搜索元素 1.1.3. 二分搜索树的遍历 什么是遍历操作？ 遍历操作就是把所有节点都访问一遍;访问的原因和业务相关;在线性结构下。 前序遍历：now->left->right,拷贝，用于已经存在的排序二叉树的复制； 中序遍历：left->now->right，排序； 后序遍历：left->right->now，用于文件系统遍历及内存释放。 前序遍历顺序:是指先访问根，再访问左右。 // 5 // // / \\ // // 3 6 // // / \\ \\ // // 2 4 8 // ///////////////// 前序遍历结果: 中序遍历结果:2->3->4->5->6->8; //中序遍历的结果就是二分搜索树排序的结果。 后序遍历结果:2->4->3->8->6->5; 深入理解前中后 1.1.4. 二分搜索树前序非递归写法 // 二分搜索树的非递归前序遍历 public void preOrderNR(){ Stack stack = new Stack<>(); stack.push(root); while(!stack.isEmpty()){ Node cur = stack.pop(); System.out.println(cur.e); if(cur.right != null) stack.push(cur.right); if(cur.left != null) stack.push(cur.left); } } 1.1.5. 二分搜索树的层序遍历（广度优先遍历） 一般使用非递归的队列方式实现 由于队列的顺序是先进先出，所以是从左到右入队的。 // 二分搜索树的层序遍历 public void levelOrder(){ if(root == null) return; Queue q = new LinkedList<>(); q.add(root); while(!q.isEmpty()){ Node cur = q.remove(); System.out.println(cur.e); if(cur.left != null) q.add(cur.left); if(cur.right != null) q.add(cur.right); } } 1.1.6. 广度优先的遍历 更快的找到问题的解 常用于算法设计中，最短路径 1.1.7. 二分搜索树删除节点 删除叶子节点 ​ 删除只有一个孩子的节点 删除任意节点 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/Binary Tree.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/Binary Tree.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"数据结构与算法/BinarySearchTree.html":{"url":"数据结构与算法/BinarySearchTree.html","title":"BinarySearchTree","keywords":"","body":"// 创建一个辅助节点类Node class Node { constructor(value) { this.value = value; this.left = null; this.right = null; } } class BST { constructor() { this.root = null; } // 向树中插入一个节点值为value的节点。 insert(value) { let node = new Node(value); if (this.root == null) { this.root = node; } else { insertNode(this.root, node); } } // 中序遍历 midOrderTraverse(callback) { midOrderTraverseNode(this.root, callback); } // 先序遍历 preOrderTraverse(callback) { preOrderTraverseNode(this.root, callback) } // 后序遍历 lastOrderTraverse(callback) { lastOrderTraverseNode(this.root, callback) } // 查找树中节点值最小的节点 minNodeInTree(node) { if (node) { while (node && node.left) { node = node.left; } return node.value; } else { return null; } } // 查找树中节点值最大的节点 maxNodeInTree(node) { if (node) { while (node && node.right) { node = node.right; } return node.value; } else { return null; } } // 查找树中特定的节点值 searchNodeInTree(value) { return searchNode(this.root, value); } } // 插入节点辅助函数 function insertNode(node, newNode) { if (node.value > newNode.value) { if (node.left == null) { node.left = newNode; } else { insertNode(node.left, newNode) } } else { if (node.right == null) { node.right = newNode; } else { insertNode(node.right, newNode); } } } // 中序遍历辅助函数 function midOrderTraverseNode(node, callback) { if (node !== null) { midOrderTraverseNode(node.left, callback); callback(node); midOrderTraverseNode(node.right, callback); } } // 先序遍历辅助函数 function preOrderTraverseNode(node, callback) { if (node !== null) { callback(node); preOrderTraverseNode(node.left, callback); preOrderTraverseNode(node.right, callback); } } // 后序遍历辅助函数 function lastOrderTraverseNode(node, callback) { if (node !== null) { lastOrderTraverseNode(node.left, callback); lastOrderTraverseNode(node.right, callback); callback(node); } } // 查找特定节点辅助函数 function searchNode(node, value) { if (node == null) { return null; } if (value node.value) { return searchNode(node.right, value); } else { return node; } } let bst = new BST(); bst.insert(11); bst.insert(7); bst.insert(15); bst.insert(5); bst.insert(3); bst.insert(9); bst.insert(8); bst.insert(10); bst.insert(13); bst.insert(12); bst.insert(14); bst.insert(20); bst.insert(18); bst.insert(25); bst.insert(6); function printBST(node) { console.log(node.value); } console.log('----------中序-------------'); bst.midOrderTraverse(printBST) console.log('----------先序-------------'); bst.preOrderTraverse(printBST) console.log('----------后序-------------'); bst.lastOrderTraverse(printBST) console.log(bst.minNodeInTree(bst.root)); console.log(bst.maxNodeInTree(bst.root)); powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/BinarySearchTree.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/BinarySearchTree.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"数据结构与算法/DoublyLinkedList.html":{"url":"数据结构与算法/DoublyLinkedList.html","title":"DoublyLinkedList","keywords":"","body":"//创建一个Node辅助类，用来生成节点= class Node { constructor(value) { this.value = value; this.next = null; this.prev = null; } } class DoublyLinkedList { constructor() { this.head = null; this.tail = null; this.length = 0; } /** * 向链表尾部追加一个新元素 * @param {} element 要追加的新元素 */ append(value) { let node = new Node(value); let current = this.head; if (!this.head) { //如果链表为空 this.head = node; this.tail = node; } else { current = this.tail; current.next = node; node.prev = current; this.tail = node; } this.length++; } /** * 根据元素值查找元素，并返回该元素 * @param {*} value */ find(value) { let current = this.head; if (!this.head) { //如果链表为空 console.log(\"这是一个空链表！！！\"); return null; } if (current.value == value) { return current; } while (current.next) { current = current.next; if (current.value === value) { return current } } console.log(\"没有找到该元素！！！\"); return null; } /** * 向链表的特定位置插入一个新的项 * @param {Number} position 要插入的位置 * @param {*} element 要插入的新元素值 */ insert(position, element) { if (position >= 0 && position = 0 && position powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/DoublyLinkedList.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/DoublyLinkedList.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"数据结构与算法/LinkedList.html":{"url":"数据结构与算法/LinkedList.html","title":"LinkedList","keywords":"","body":"//创建一个Node辅助类，用来生成节点 function Node(value) { this.value = value; this.next = null; } //链表类 function LinkedList() { this.head = null; this.length = 0; //向链表尾部追加元素 this.push = push; //从链表中查找某个元素 this.find = find; //在链表中任意一个元素之后插入一个元素 this.insertAfter = insertAfter; //从链表中查找任意元素节点的前一个节点 this.findPrevious = findPrevious; //从链表中删除值为value的元素 this.remove = remove; //返回当前链表的长度 this.size = size; //查找某个元素在链表中的索引值 this.indexof = indexof; //删除链表中第pos个元素 this.removeAt = removeAt; //获取链表中第一个元素 this.getHead = getHead; //打印当前的链表，供测试用 this.print = print; } //向链表尾部追加元素 function push(value) { var node = new Node(value); if (this.head == null) { this.head = node; } else { var current = this.head; while (current.next != null) { current = current.next; } current.next = node; } length++; } //在链表中任意一个元素之后插入一个元素 function insertAfter(value, item) { var node = new Node(value); var current = this.find(item); if (current == null) { return console.log('找不到元素'); } node.next = current.next; current.next = node; length++; } //从链表中删除值为value的元素 function remove(value) { var previous = this.findPrevious(value); var current = this.find(value); if (previous == null) { return console.log('链表中找不到被删除的元素'); } previous.next = current.next; length--; } //删除链表中第pos个元素 function removeAt(pos) { if (pos > -1 && pos powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/LinkedList.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/LinkedList.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"数据结构与算法/Map and Set.html":{"url":"数据结构与算法/Map and Set.html","title":"Map and Set","keywords":"","body":"1. 集合与映射1.1.1. 集合类的复杂度分析1.1.2. LeetCode中的集合相关问题。1.1.3. 映射Map1. 集合与映射 集合 承载元素的容器，元素的去重操作。不能盛放重复元素的二分搜索树是非常好的实现“集合”的底层数据结构。 典型应用: 客户统计，词汇量统计。 接口实现：添加元素，删除元素，是否包含，大小，是否为空。 基于链表的实现中，并不要求传入的类型具有可比性,这是线性数据结构的特点。 1.1.1. 集合类的复杂度分析 前面我们已经实现了两种底层数据结构不同的Set实现。一个是基于二分搜索树的一个是基于链表的。 集合的时间复杂度分析 集合不涉及改。 链表： 本来链表添加只需要O(1)时间复杂度，但是我们为了保证不重复，先调用了一遍contains,因此变成了O(n) contains操作，我们必须要从头到尾扫一遍链表，复杂度O(n) remove操作，要先找到待删除元素前一个元素，时间复杂度O(n) 二分搜索树： 添加一个元素，走左子树，就不会去右子树，节省了很大一部分的寻找开销,最多能经历的节点数是树的高度。添加元素，删除元素，查找元素都是这样的，对于它来说，时间复杂度为O(h)，h为二分搜索树的高度。 下面我们来谈一谈高度n和h之间的关系，极端: 满二叉树中,第h-1层，有2^(h-1)个节点。 h层一共有多少个节点？ 根据等比数列的求和公式，可以得到h层一共有2^h-1 = n 通常我们不会计较这里的底，无论是以2位底，还是10，它们都是logN级别的。 logn和n的差距 相差了五万倍，一秒跑完，14个小时。一天跑完，137年跑完。 logn是一个非常快的时间复杂度。 二分搜索树会退化为链表,虽然平均来讲是O(logn)级别的，但是当退化成链表的最差情况，会变成O(n)级别的。 解决这个问题的方法就是要来创建平衡二叉树,在课程比较靠后的位置会给大家讲解。最准确的二分搜索树的时间复杂度是O(h) 1.1.2. LeetCode中的集合相关问题。 804号问题: https://leetcode-cn.com/problems/unique-morse-code-words/description/ package cn.mtianyan.leetcode_804;import java.util.TreeSet;class Solution { public int uniqueMorseRepresentations(String[] words) { String[] codes = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"}; TreeSet set = new TreeSet(); for (String word : words) { StringBuffer res = new StringBuffer(); for (int i = 0; i 1.1.3. 映射Map 函数一一映射。 Leetcode 349 两个数组的交集 使用集合 Leetcode 350 两个数组的交集 使用映射 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/Map and Set.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/Map and Set.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"数据结构与算法/Queue.html":{"url":"数据结构与算法/Queue.html","title":"Queue","keywords":"","body":"class Queue { constructor() { this.items = []; } //进队，从队的尾部进入 enqueue(value) { this.items.push(value); } //出队，从队的头部出 dequeue() { return this.items.shift(); } //获取队中的第一个元素 front() { return this.items[0]; } //判断队是否为空 isEmpty() { return this.items.length === 0; } //获取队中元素的个数 size() { return this.items.length; } } powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/Queue.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/Queue.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"数据结构与算法/Segment Tree.html":{"url":"数据结构与算法/Segment Tree.html","title":"Segment Tree","keywords":"","body":"1. 线段树（区间树Segment Tree）1.1.1. 线段树的基础表示1.1.2. 创建线段树。1.1.3. 线段树的查询1.1.4. LeetCode线段树问题1.1.5. 线段树添加更新操作。1. 线段树（区间树Segment Tree） 为什么使用线段树？ 对于有一类问题，我们关心的是线段(或者区间) 最经典的线段树问题, 区间染色:有一面墙，长度为n，每次选择一段儿墙进行染色 4-9染成橙色之后，对于7-15绘制绿色。橙色被绿色覆盖 1-5绘制成蓝色，6-12绘制红色。 m次操作后，我们可以看见多少种颜色? m次操作后，我们可以在[i, j]区间内看见多少种颜色? 整个问题: 我们关注区间。染色操作(更新区间) 查询操作(查询区间) 染色操作遍历一遍，查询遍历一遍区间。 另一类经典问题: 区间查询 查询一个区间[i, j]的最大值，最小值，或者区间数字和.实质:基于区间的统计查询 例如: 2017年注册用户中消费最高的用户?消费最少的用户?学习时间最长的用户?某个太空区间中天体总量? 动态的一个查询，并不限定于2017年的历史数据，有可能2018年他还是在消费的，数据依然在不断的变化。天体从区间跑到另一个区间。 也就是数据在不断的更新，我们也可以进行不断的查询。 对于这类区间类的问题，使用线段树，它的时间复杂度将变为O(logn)级别的。看到logn，大家应该意识到线段树也是一种二叉树结构的。 对于给定区间进行两个操作 更新: 更新区间中一个元素或者一个区间的值;查询: 一个区间[i, j]的最大值，最小值，或者区间数字和 实现: (线段树的区间本身是固定的，2017年注册的用户) 与所有的二叉树一样，它有一个一个的节点。每一个节点表示的是一个区间内相应的信息。以求和为例。最后一层区间长度为1的单个节点。 查询2-5 区间进行合成操作。 1.1.1. 线段树的基础表示 每一个节点存储的节点对应数字和(求和为例)。 8个元素，2^3次方,满二叉树。 5不能被平分就右边多一点。叶子节点有可能在倒数第二层。 线段树不是完全二叉树;线段树是平衡二叉树。平衡二叉树的定义: 最大的深度和最小的深度之差最多为1,如上图我们的叶子节点要么在深度为4的位置，要么在深度为5的位置。 堆也是平衡二叉树，完全二叉树本身就是一棵平衡二叉树。线段树虽然不是完全二叉树，但是满足线段树的定义。 平衡二叉树不会退化成链表，依然是log级别的。 线段树是平衡二叉树，依然可以用数组表示。看做满二叉树，如果区间有n个元素，数组表示需要多少个节点？ 对满二叉树: h层，一共有2^h- 1个节点(大约是2h),最后一层(h-1层)，有2(h-1)个节点,最后一层的节点数大致等于前面所有层节点之和。 如果n=2^k 只需要2n的空间; 最坏情况， 如果n=2^k+1 需要4n的空间 如果区间有n个元素数组表示需要有多少节点? 需要4n的空间 我们的线段树不考虑添加元素,即区间固定，使用4n的静态空间即可(这是保证绝对可以装完的) 可以看到浪费了很多的空间，现代计算机空间换时间，这部分浪费可以不被浪费，拓展部分解决，节点方式存储可以避免浪费。 package cn.mtianyan.segment;public class SegmentTree { private E[] tree; private E[] data; // 存储整个线段树数据副本 public SegmentTree(E[] arr) { data = (E[]) new Object[arr.length]; for (int i = 0; i = data.length) throw new IllegalArgumentException(\"Index is illegal.\"); return data[index]; } /** * 返回完全二叉树的数组表示中，一个索引所表示的元素的左孩子节点的索引 * * @param index * @return */ private int leftChild(int index) { return 2 * index + 1; } /** * 返回完全二叉树的数组表示中，一个索引所表示的元素的右孩子节点的索引 * * @param index * @return */ private int rightChild(int index) { return 2 * index + 2; } } 线段树中是不需要去找某个节点的父亲节点的。线段树空间4n。 1.1.2. 创建线段树。 根节点存储的信息，就是两个孩子信息的综合(递归即可),如何合并是由业务而定的。递归到底，是只有一个元素本身。 package cn.mtianyan.segment;public interface Merger { E merge(E a, E b); } public class SegmentTree { private E[] tree; private E[] data; // 存储整个线段树数据副本 private Merger merger; // 用户可以传入合并规则 public SegmentTree(E[] arr, Merger merger) { this.merger = merger; data = (E[]) new Object[arr.length]; for (int i = 0; i 这里在构造函数中添加参数，使得用户可以传入merger规则来改变类内部的合并规则。类似于上章优先队列中传入元素比较器。 package cn.mtianyan;import cn.mtianyan.segment.SegmentTree;public class Main { public static void main(String[] args) { Integer[] nums = {-2, 0, 3, -5, 2, -1};// SegmentTree segTree = new SegmentTree<>(nums,// new Merger() {// @Override// public Integer merge(Integer a, Integer b) {// return a + b;// }// }); SegmentTree segTree = new SegmentTree<>(nums, (a, b) -> a + b); System.out.println(segTree); } } 匿名内部类的实现可以改写为Lambda表达式,传入(a,b) 返回a+b 1.1.3. 线段树的查询 相当于查询2-5区间所有元素的和。从根节点开始往下，我们知道分割位置，左节点查询[2,3] 右节点查询[4,5],找到两个节点之后合并就可以了。 与树的高度有关，高度是logn级别的。 /** * 返回区间[queryL, queryR]的值 * * @param queryL * @param queryR * @return */ public E query(int queryL, int queryR) { if (queryL = data.length || queryR = data.length || queryL > queryR) throw new IllegalArgumentException(\"Index is illegal.\"); return query(0, 0, data.length - 1, queryL, queryR); } /** * 在以treeIndex为根的线段树中[l...r]的范围里，搜索区间[queryL...queryR]的值 * * @param treeIndex 我们都传入了这个treeIndex的区间范围l r; 完全可以包装成一个线段树中的节点类，每个节点存储它所处的区间范围。 * @param l * @param r * @param queryL * @param queryR * @return */ private E query(int treeIndex, int l, int r, int queryL, int queryR) { // 节点左边界和右边界都与想要查找的重合。 if (l == queryL && r == queryR) return tree[treeIndex]; int mid = l + (r - l) / 2; // treeIndex的节点分为[l...mid]和[mid+1...r]两部分 int leftTreeIndex = leftChild(treeIndex); int rightTreeIndex = rightChild(treeIndex); // 用户关注的区间和左孩子一点关系没有 if (queryL >= mid + 1) // 去右子树查找 return query(rightTreeIndex, mid + 1, r, queryL, queryR); // 用户关注区间和右边没有关系 else if (queryR 运行结果: 运行结果1是-2+0+3;[0,5]所有元素和 1.1.4. LeetCode线段树问题 https://leetcode-cn.com/problems/range-sum-query-immutable/description/ 区域和检索 - 数组不可变(不涉及线段树的更新操作) package cn.mtianyan.leetcode_303;import cn.mtianyan.segment.SegmentTree;class NumArray { private SegmentTree segmentTree; public NumArray(int[] nums) { if(nums.length > 0){ Integer[] data = new Integer[nums.length]; for (int i = 0; i (data, (a, b) -> a + b); } } public int sumRange(int i, int j) { if(segmentTree == null) throw new IllegalArgumentException(\"Segment Tree is null\"); return segmentTree.query(i, j); } } 在提交我们自定义的数据结构时，内部类都改为private，否则会造成编译错误。 在数组不可变的情况下，不使用线段树有时可以得到更好的解答。 package cn.mtianyan.leetcode_303;/** * 数组进行预处理。 */public class NumArray2 { private int[] sum; // sum[i]存储前i个元素和, sum[0] = 0 // 即sum[i]存储nums[0...i-1]的和 // sum(i, j) = sum[j + 1] - sum[i] // 这里会有一个偏移 public NumArray2(int[] nums) { sum = new int[nums.length + 1]; sum[0] = 0; for(int i = 1 ; i 这个问题限制在数据是不变的，因此可以采用其他更优方案，线段树更优的应用场景是数据会有更新和查询两种操作同时存在的情况。 Leetcode307号问题 区域和检索 - 数组可修改 package cn.mtianyan.leetcode_307;/** * 使用sum数组的思路：TLE Time Limit Exceed 超时 * update是O(n)复杂度，sumRange依然是O(1) */class NumArray { private int[] data; // 原本的数组备份 private int[] sum; public NumArray(int[] nums) { data = new int[nums.length]; for (int i = 0; i 老师提交时这里是超时的，但是我在LeetCode.com与LeetCode.cn都进行了提交，都没有发生超时现象。 1.1.5. 线段树添加更新操作。 /** * 将index位置的值，更新为e * @param index * @param e */ public void set(int index, E e){ if(index = data.length) throw new IllegalArgumentException(\"Index is illegal\"); data[index] = e; // index位置换新值 set(0, 0, data.length - 1, index, e); } /** * 在以treeIndex为根的线段树中更新index的值为e * @param treeIndex * @param l * @param r * @param index * @param e */ private void set(int treeIndex, int l, int r, int index, E e){ if(l == r){ tree[treeIndex] = e; return; } // 找index对应的叶子 int mid = l + (r - l) / 2; // treeIndex的节点分为[l...mid]和[mid+1...r]两部分 int leftTreeIndex = leftChild(treeIndex); int rightTreeIndex = rightChild(treeIndex); if(index >= mid + 1) set(rightTreeIndex, mid + 1, r, index, e); else // index 这个过程和之前二分搜索树的更新很像，实际就是在线段树中找index这个位置在哪边，究竟是左子树，还是右子树。二分搜索树中我们比较的是key和当前元素相应的大小关系。线段树中看的是index对于当前所处区间，劈成两半之后在哪一半。 index位置改变了 tree[treeIndex] = merger.merge(tree[leftTreeIndex], tree[rightTreeIndex]); 307号问题 package cn.mtianyan.leetcode_307;import cn.mtianyan.segment.SegmentTree;class NumArray2 { private SegmentTree segTree; public NumArray2(int[] nums) { if(nums.length != 0){ Integer[] data = new Integer[nums.length]; for(int i = 0 ; i (data, (a, b) -> a + b); } } public void update(int i, int val) { if(segTree == null) throw new IllegalArgumentException(\"Error\"); segTree.set(i, val); } public int sumRange(int i, int j) { if(segTree == null) throw new IllegalArgumentException(\"Error\"); return segTree.query(i, j); } } 可以看到使用线段树，时间是变短了的。O(logn) 原本的是 O(n) powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/Segment Tree.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/Segment Tree.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"数据结构与算法/Stack.html":{"url":"数据结构与算法/Stack.html","title":"Stack","keywords":"","body":"class Stack { constructor() { this.items = []; }; // 添加一个新元素到栈顶 push(value) { this.items.push(value); }; // 移除栈顶的元素，同时返回该元素 pop() { return this.items.pop(); }; // 获取栈顶的元素 peek() { return this.items[this.items.length - 1]; }; // 判断栈是否为空。是返回true,否返回false isEmpty() { return this.items.length === 0; }; // 清空栈里的元素 clear() { return this.items = []; }; // 获取栈里元素的个数 size() { return this.items.length; } } powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/Stack.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/Stack.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"数据结构与算法/Trie.html":{"url":"数据结构与算法/Trie.html","title":"Trie","keywords":"","body":"1. 前缀树 Trie1.1.1. Trie字典树基础1.1.2. Trie中查询单词。1.1.3. Trie和前缀搜索1.1.4. Trie的具体应用1.1.5. Trie字典树和字符串映射1.1.6. 更多与Trie相关的话题1. 前缀树 Trie 映射结构: 字典。但Trie 专门为处理字符串而生。 如果有n个条目 使用树结构(平衡) 查询的时间复杂度是O(logn);如果有100万个条目(2^20)logn大约为20 Trie 查询每个条目的时间复杂度，和字典中一共有多少条目无关! 时间复杂度为O(w) w为查询单词的长度! 因为大多数单词的长度都是小于10的。 之前都是一个单词为一个节点进行存储，Trie按字母拆开进行了树形结构的排列。上图中有cat dog dear panda 四个单词。单词有多少个字母，访问到叶子节点就可以访问到单词。 Trie中节点的定义: 每个节点有26个指向下个节点的指针,每个节点有能力指向26个孩子。考虑不同的语言，不同的情境，26个指针有可能是不够的，也有可能有多余的。 class Node{ char c; Node next[26]; } 考虑大小写，有52个指针。如果设计的是url，邮箱等，肯定就要扩展更多的指针。更灵活的Trie会不固定指针的数量。 class Node{ char c; Map next; } next就是指一个char和一个node之间的映射，map中存放多少个不知道，但每一个都是节点到字符的映射。TreeMap(平衡二叉树 红黑树) HashMap 来到这个节点之前就已经知道这条线通往哪个字母了。因此可以不存值，只存映射。 class Node{ Map next; } Trie中添加查询即使没有char c也没有问题。我们上面的例子到叶子节点就是一个要查询的单词，但是英语世界中一些单词是另一些的前缀。pan panda都要存。 要有一个标识，记录该节点是否是一个单词的结尾。 class Node{ boolean isWord; Map next; } 最重要的一个部分就是next，既是一个映射，又存放着一个char值。 1.1.1. Trie字典树基础 package cn.mtianyan.trie;import java.util.TreeMap;public class Trie { /** * 节点类：isWord，Map */ private class Node { public boolean isWord; public TreeMap next; // 中文单词界限模糊 // 传入isWord public Node(boolean isWord) { this.isWord = isWord; next = new TreeMap<>(); } // 无参构造函数 public Node() { this(false); } } private Node root; // 根节点 private int size; // 存储了多少个单词 /** * Trie默认构造函数 */ public Trie() { root = new Node(); size = 0; } /** * 获得Trie中存储的单词数量 * * @return */ public int getSize() { return size; } /** * 向Trie中添加一个新的单词word * * @param word */ public void add(String word) { // 非递归写法，字符串拆成字符 Node cur = root; for (int i = 0; i 可以尝试一下递归写法作为练习。 1.1.2. Trie中查询单词。 /** * 查询单词word是否在Trie中 * @param word * @return */ public boolean contains(String word){ Node cur = root; for(int i = 0 ; i words = new ArrayList<>(); if(FileOperation.readFile(\"pride-and-prejudice.txt\", words)){ long startTime = System.nanoTime(); BSTSet set = new BSTSet<>(); for(String word: words) set.add(word); for(String word: words) set.contains(word); long endTime = System.nanoTime(); double time = (endTime - startTime) / 1000000000.0; System.out.println(\"Total different words: \" + set.getSize()); System.out.println(\"BSTSet: \" + time + \" s\"); // --- startTime = System.nanoTime(); Trie trie = new Trie(); for(String word: words) trie.add(word); for(String word: words) trie.contains(word); endTime = System.nanoTime(); time = (endTime - startTime) / 1000000000.0; System.out.println(\"Total different words: \" + trie.getSize()); System.out.println(\"Trie: \" + time + \" s\"); } } } 运行结果: 时间性能上Trie略高于BST。集合元素越多，Trie性能越高,因为Trie的性能与集合中有多少个字符串无关。 1.1.3. Trie和前缀搜索 比如查找cat的时候 c ca都是cat的前缀。非常方便查找是否有某一个前缀对应的单词。 /** * 查询是否在Trie中有单词以prefix为前缀 * * @param prefix * @return */ public boolean isPrefix(String prefix){ Node cur = root; for(int i = 0 ; i Trie又称为前缀树。BST中添加prefix方法，比较性能(自己练习) leetcode中208 实现Trie https://leetcode-cn.com/problems/implement-trie-prefix-tree/description/ 实现一个 Trie (前缀树)，包含 insert, search, 和 startsWith 这三个操作。将我们上面实现的Trie方法名改成和题目一致就行。 1.1.4. Trie的具体应用 LeetCode 211 简单的正则表达式。 对于遇到的.，我们遍历所有的可能。 package cn.mtianyan.leetcode_211;/// Leetcode 211. Add and Search Word - Data structure design/// https://leetcode.com/problems/add-and-search-word-data-structure-design/description/import java.util.TreeMap;public class WordDictionary { /** * 节点类：isWord，Map */ private class Node { public boolean isWord; public TreeMap next; // 中文单词界限模糊 // 传入isWord public Node(boolean isWord) { this.isWord = isWord; next = new TreeMap<>(); } // 无参构造函数 public Node() { this(false); } } private Node root; // 根节点 /** * 默认构造函数，初始化节点 */ public WordDictionary() { root = new Node(); } /** * 添加一个单词到数据结果中 */ public void addWord(String word) { Node cur = root; // 不存在创建 for (int i = 0; i 运行结果: 1.1.5. Trie字典树和字符串映射 677 https://leetcode-cn.com/problems/map-sum-pairs/description/ 字符串有一个value值，传入前缀，返回包含这个前缀的单词的value和。 处理1 node中包含value值，处理2 基于前缀，查找时计算所有对应词的value值和。 package cn.mtianyan.leetcode_677;import java.util.TreeMap;public class MapSum { private class Node{ public int value; // 单词权重值 isWord可以省略，0不是单词。 public TreeMap next; public Node(int value){ this.value = value; next = new TreeMap<>(); } public Node(){ this(0); } } private Node root; /** Initialize your data structure here. */ public MapSum() { root = new Node(); } public void insert(String key, int val) { Node cur = root; // 单词添加Trie,并添加value值。 for(int i = 0 ; i 递归到底的情况就是当前节点是一个叶子节点，下一个节点映射为0。这个问题中我们的Trie是作为一个映射来使用的，每一个单词和整型的value值进行了映射，映射具体体现在node节点中存储了一个value值。 Trie和映射 映射使用: 词频统计，Trie也可以做词频统计。练习: TrieMap 统计词频 比对 BSTMap 理解node 添加元素，与单词之间的关系。 1.1.6. 更多与Trie相关的话题 Trie的删除操作,通讯录的实现。将通讯录中每一个人名，当做一个单词插入Trie，单词最后一个字母位置存储相应的电话号码等信息。 删除deer单词会将eer节点都删除掉，然后保留d。删除pan，把n的isWord置为false即可。 Trie的局限性: 最大的问题:空间! class Node{ boolean isWord; Tree next; } 每个节点只存储了一个字符的信息，节点之间的关联全部由TreeMap映射。存储空间是27n 解决方案: 压缩字典树Compressed Trie，只有一个后续字符的单链可以进行合并。 空间节省了，但是维护成本高了很多。 Ternary Search Trie 三分搜索树 上图中存储了dog这个词。 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/Trie.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/Trie.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"数据结构与算法/Union Find.html":{"url":"数据结构与算法/Union Find.html","title":"Union Find","keywords":"","body":"1. 并查集（Union Find）1.1.1. Quick Union1.1.2. 基于size的优化1.1.3. 基于Rank的优化1. 并查集（Union Find） 并查集 一种很不一样的树形结构 前面我们接触的树结构都是由父亲指向孩子，但是我们的并查集却是由孩子指向父亲。这种奇怪的树结构可以非常高效的回答一类问题: 连接问题 Connectivity Problem 如上图一张图中，有很多点，每两个点之间有没有连接的问题。给出任意两点是否有路径相连。 并查集可以非常快的查看到网络中节点间的连接状态。网络是个抽象的概念:用户之间形成的网络 每两个人通过各自的好友连接起来，设计网络。商品，图书，音乐专辑节点之间定义边。交通系统之间的网络，计算机网络路由器为节点。 并查集 还是数学中的集合类实现,主要操作在求集合的并集。 连接问题 和 路径问题 存在路径一定连接， 不存在路径一定不连接。 回答两个节点之间的连接问题是要比回答路径问题要回答的问题少。 只需要回复是或不是，问a与b的路径，返回一个具体的路径。 只想知道连接状态，求解路径会消耗性能。 完全可以使用复杂度更高的算法进行求解，但是之所以复杂度更高，其实是因为求解出了很多我们问的问题并不关心的内容。 和堆作比较，我们可以使用线性表，链表保持有序就可以了。顺序表不止可以取出最大的元素(最大堆)，也可以取出第二大，第三大，第k大。但是我们用堆时，只关心最高的那个，因此顺序表维护了很多我们并不需要的信息，性能消耗O(n); 堆只关注最大的，因此堆性能更高。 回答额外问题，性能变低。 并查集Union Find 对于一组数据，主要支持两个动作: union(p, q) isConnected( p, q) 逐步优化我们的并查集，首先设计一个并查集接口。 package cn.mtianyan;public interface UF { int getSize(); // 对当下这些元素 boolean isConnected(int p, int q); // id为p id为q是否相连 void unionElements(int p, int q); } union是将两个元素合并起来。 并查集的内部只存0-9这十个编号，不会关注它具体代表。每一个元素存储它所属的集合的id 如上图是分成了两个集合，数组称之为id。对应的集合id相同则相连。 isConnected( p, q) = find(p) == find(q) Quick Find时间复杂度O(1)，直接取出数组index对应的值。 经过union之后，数组变为如上图所示。遍历，将所有id为0的改为1。 package cn.mtianyan;/** * 我们的第一版Union-Find */public class UnionFind1 implements UF { private int[] id; // 我们的第一版Union-Find本质就是一个数组 public UnionFind1(int size) { id = new int[size]; // 初始化, 每一个id[i]指向自己, 没有合并的元素 for (int i = 0; i = id.length) throw new IllegalArgumentException(\"p is out of bound.\"); return id[p]; } /** * 查看元素p和元素q是否所属一个集合 O(1)复杂度 * * @param p * @param q * @return */ @Override public boolean isConnected(int p, int q) { return find(p) == find(q); } /** * 合并元素p和元素q所属的集合 O(n) 复杂度 * * @param p * @param q */ @Override public void unionElements(int p, int q) { int pID = find(p); int qID = find(q); if (pID == qID) return; // 合并过程需要遍历一遍所有元素, 将两个元素的所属集合编号合并 for (int i = 0; i 某一个操作O(n)，性能比较差，需要进行改进。创建一棵树，从孩子指向父亲。 1.1.1. Quick Union 标准的并查集实现思路: 将每一个元素，看做是一个节点 如果是让7和2合并，不需要把每个节点都与之连接，而是将5和2连接起来就可以了。7和3连接，与上面得到的结果是一样的。 每一个节点本身只有一个指针,parent(i)表示第i个元素所在的节点指向了哪个元素。 森林中有十棵树，Union(4,3) 就是让4指针指向3。 数组中 查询4所在的链的根节点(8自己指自己)，然后让9指向4所在树根节点。 Union的复杂度是O(h)级别的，h是当前union的这两个元素所在树的深度。代价: 查询操作时得查询根节点。 package cn.mtianyan;/** * 我们的第二版Union-Find */public class UnionFind2 implements UF { /** * 我们的第二版Union-Find, 使用一个数组构建一棵指向父节点的树 * parent[i]表示第一个元素所指向的父节点 */ private int[] parent; /** * 构造函数 * @param size */ public UnionFind2(int size){ parent = new int[size]; // 初始化, 每一个parent[i]指向自己, 表示每一个元素自己自成一个集合 for( int i = 0 ; i = parent.length) throw new IllegalArgumentException(\"p is out of bound.\"); // 不断去查询自己的父亲节点, 直到到达根节点 // 根节点的特点: parent[p] == p while(p != parent[p]) p = parent[p]; // 不断上移，直到指向自己 return p; } /** * 查看元素p和元素q是否所属一个集合 O(h)复杂度, h为树的高度 * @param p * @param q * @return */ @Override public boolean isConnected( int p , int q ){ return find(p) == find(q); } /** * 合并元素p和元素q所属的集合 O(h)复杂度, h为树的高度 * @param p * @param q */ @Override public void unionElements(int p, int q){ int pRoot = find(p); int qRoot = find(q); if( pRoot == qRoot ) return; parent[pRoot] = qRoot; } } 1.1.2. 基于size的优化 第一版就是数组，第二版形成了树结构，孩子指向父亲。通过节点查到根节点。测试前面两个的性能 package cn.mtianyan;import java.util.Random;public class Main { private static double testUF(UF uf, int m) { int size = uf.getSize(); Random random = new Random(); long startTime = System.nanoTime(); for (int i = 0; i 充分考虑合并的两个树的特点: 9想加入原本的集合，可以是8直接连上9，但也可以是9指向根节点8。 package cn.mtianyan;/** * 我们的第三版Union-Find */public class UnionFind3 implements UF { /** * 我们的第三版Union-Find, 使用一个数组构建一棵指向父节点的树 * parent[i]表示第一个元素所指向的父节点 */ private int[] parent; private int[] sz; // sz[i]表示以i为根的集合中元素个数 /** * 构造函数 * @param size */ public UnionFind3(int size){ parent = new int[size]; sz = new int[size]; // 初始化, 每一个parent[i]指向自己, 表示每一个元素自己自成一个集合 for( int i = 0 ; i = parent.length) throw new IllegalArgumentException(\"p is out of bound.\"); // 不断去查询自己的父亲节点, 直到到达根节点 // 根节点的特点: parent[p] == p while(p != parent[p]) p = parent[p]; // 不断上移，直到指向自己 return p; } /** * 查看元素p和元素q是否所属一个集合 O(h)复杂度, h为树的高度 * @param p * @param q * @return */ @Override public boolean isConnected( int p , int q ){ return find(p) == find(q); } /** * 合并元素p和元素q所属的集合 O(h)复杂度, h为树的高度 * @param p * @param q */ @Override public void unionElements(int p, int q){ int pRoot = find(p); int qRoot = find(q); if(pRoot == qRoot) return; // 根据两个元素所在树的元素个数不同判断合并方向 // 将元素个数少的集合合并到元素个数多的集合上 if(sz[pRoot] 构造函数中sz进行初始化，UnionEelements中进行维护。 int size = 100000; int m = 100000; UnionFind3 uf3 = new UnionFind3(size); System.out.println(\"UnionFind3 : \" + testUF(uf3, m) + \" s\"); 1.1.3. 基于Rank的优化 上一节中的优化目的是为了不要合并时树的高度疯狂增加，尽量少的增加。 rank就是树的高度，深度。 节点多不一定深度大，8合并过来，深度从2,3变为了4。 因此更合理的是如上图，深度低的合并到深度高的。 基于raink的优化 rank[i]表示根节点为i的树的高度 package cn.mtianyan;/** * 我们的第四版Union-Find */public class UnionFind4 implements UF { private int[] parent; private int[] rank; // rank[i]表示以i为根的集合所表示的树的层数 /** * 构造函数 * @param size */ public UnionFind4(int size){ parent = new int[size]; rank = new int[size]; // 初始化, 每一个parent[i]指向自己, 表示每一个元素自己自成一个集合 for( int i = 0 ; i = parent.length) throw new IllegalArgumentException(\"p is out of bound.\"); // 不断去查询自己的父亲节点, 直到到达根节点 // 根节点的特点: parent[p] == p while(p != parent[p]) p = parent[p]; // 不断上移，直到指向自己 return p; } /** * 查看元素p和元素q是否所属一个集合 O(h)复杂度, h为树的高度 * @param p * @param q * @return */ @Override public boolean isConnected( int p , int q ){ return find(p) == find(q); } /** * 合并元素p和元素q所属的集 O(h)复杂度, h为树的高度 * @param p * @param q */ @Override public void unionElements(int p, int q){ int pRoot = find(p); int qRoot = find(q); if( pRoot == qRoot ) return; // 根据两个元素所在树的rank不同判断合并方向 // 将rank低的集合合并到rank高的集合上 if(rank[pRoot] int size = 10000000; int m = 10000000; 运行结果: powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/Union Find.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/Union Find.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"数据结构与算法/Untitled.html":{"url":"数据结构与算法/Untitled.html","title":"Untitled","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/Untitled.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/Untitled.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"数据结构与算法/friendly gift.html":{"url":"数据结构与算法/friendly gift.html","title":"friendly gift","keywords":"","body":"链接: https://pan.baidu.com/s/1FtZyubZ_SWAeQqIjyGVHvw 提取码: cs3k leekcode 力扣 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/friendly gift.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/friendly gift.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"数据结构与算法/javascript 数据结构与算法.html":{"url":"数据结构与算法/javascript 数据结构与算法.html","title":"javascript 数据结构与算法","keywords":"","body":"1. 数据结构与算法1.1. 程序 = 数据结构 + 算法1.1.1. 一，数据结构2. 1、数组3. 2、栈(LIFO)4. 3、队列（FIFO）5. 4、链表（真正的动态数据结构）6. 5、树7. 6、堆7.1. 7、hash1. 数据结构与算法 1.1. 程序 = 数据结构 + 算法 1.1.1. 一，数据结构 数据结构是在计算机中组织和存储数据的一种特殊方式，使得数据可以高效地被访问和修改。更确切地说，数据结构是数据值的集合，表示数据之间的关系，也包括了作用在数据上的函数或操作。 数据结构的应用 操作系统 系统栈，优先队列：堆 文件压缩 通讯录 链表-->trie树 算法的基石 游戏寻路 数据结构有毛用 有用也没用，平时用不到，进入大公司，理解底层就需要，突破技术瓶颈 数据结构分类 数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成 。 常用的数据结构有：数组，栈，链表，队列，树，图，堆，散列表,hash表等，如图所示： 线性结构：数组，栈，队列，链表，哈希表； 树结构：二叉树，二分搜索树，AVL，红黑树，堆，Trie（通讯录前缀树）， 图结构：邻接矩阵，邻接表等 2. 1、数组 数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为 1。 int[] data = new int[100]；data[0] = 1; 优点： 1、按照索引查询元素速度快 2、按照索引遍历数组方便 缺点： 1、数组的大小固定后就无法扩容了 2、数组只能存储一种类型的数据 3、添加，删除的操作慢，因为要移动其他的元素。 适用场景： 频繁查询，对存储空间要求不大，很少增加和删除的情况。 扩展： 数组的添加，查询，修改，包含，搜索，删除，泛型，动态数组（数组的扩容和缩容），复杂度分析，均摊复杂度，防止复杂度震荡等。 3. 2、栈(LIFO) 栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。 栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景。 扩展： 编辑器撤销操作 程序调用的系统栈（函数内嵌入子函数） 复杂度低，操作快 编译器的括号匹配(leekcode 20) ```javascript /** @param {string} s @return {boolean} push(value):添加一个新元素到栈顶 pop():移除栈顶的元素，同时返回该元素 peek():获取栈顶的元素 isEmpty():判断栈是否为空。是返回true,否返回fallse size():获取栈里元素的个数 */ var isValid = function(s) { /*使用栈stack类的实现*/ function Stack() { this.dataStore = [];//保存栈内元素，初始化为一个空数组 this.size = 0;//栈顶位置，初始化为0 this.push = push;//入栈 this.pop = pop;//出栈 this.peek = peek;//查看栈顶元素 this.isEmpty = isEmpty;//判断栈是否为空 function push(element){ this.dataStore[this.size++] = element; } function pop(){ return this.dataStore[--this.size]; } function peek(){ return this.dataStore[this.size-1]; } function isEmpty(){ return this.size == 0; } } let stack = new Stack(); for(let z = 0; z = 0) { stack.push(c); }else{ if (stack.isEmpty()) { return false; } let topChar = stack.pop(); if (c == ')' && topChar != '(') { return false; } if (c == ']' && topChar != '[') { return false; } if (c == '}' && topChar != '{') { return false; } } } return stack.isEmpty(); }; ``` 不去追求完美主义 4. 3、队列（FIFO） 队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队，示例图如下： 使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。 扩展： first come first serve 复杂度分析（dequeue O(n）出队要移位 循环队列：front==tail队列为空，（tail+1）% C == front 队列满，循环队列会浪费一个单元的空间。类似钟表 5. 4、链表（真正的动态数据结构） 链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。 链表的优点： 链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素； 添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快； 缺点： 因为含有大量的指针域，占用空间较大； 查找元素需要遍历链表来查找，非常耗时。 适用场景： 数据量较小，需要频繁增加，删除操作的场景 扩展： 数组（有语义的索引 ）与链表比较 设置dummyHead，以实现添加中间元素 遍历元素的while写法和for写法 时间复杂度分析（增，删，改，查全为O(n)） 操作链表头是O(1)复杂度，所以适合栈操作 不浪费空间 用数组和链表实现栈的性能对比（数组扩容耗时，链表new新节点耗时.） 循环列表实现队列（head出栈，tail入栈） 删除重复元素leekcode(203) //solution 1 /** * Definition for singly-linked list. * function ListNode(val) { * this.val = val; * this.next = null; * } */ /** * @param {ListNode} head * @param {number} val * @return {ListNode} */ var removeElements = function(head, val) { while(head != null && head.val == val){ let delNode = head; head = head.next; delNode.next = null; } if (head === null) { return head; } let prev = head; while(prev.next != null){ if(prev.next.val == val){ let delNode = prev.next; prev.next = delNode.next; delNode.next = null; }else{ prev = prev.next; } } return head; }; solution 2 /** * Definition for singly-linked list. * function ListNode(val) { * this.val = val; * this.next = null; * } */ /** * @param {ListNode} head * @param {number} val * @return {ListNode} */ var removeElements = function(head, val) { while(head != null && head.val == val){ head = head.next } if (head === null) { return head; } let prev = head; while(prev.next != null){ if(prev.next.val == val){ prev.next = prev.next.next }else{ prev = prev.next; } } return head; }; solution 3 /** * Definition for singly-linked list. * function ListNode(val) { * this.val = val; * this.next = null; * } */ /** * @param {ListNode} head * @param {number} val * @return {ListNode} */ var removeElements = function(head, val) { let dummyNode = new ListNode(null); dummyNode.next = head; let prev = dummyNode; while(prev.next != null){ if(prev.next.val == val){ prev.next = prev.next.next }else{ prev = prev.next; } } return dummyNode.next; }; 递归扩展：本质是将原来的问题，转化为更小的同一问题 例如：数组求和 Sum(arr[0,...,N-1]) = arr[0] + Sum(arr[1,...,N-1]); Sum(arr[1,...,N-1]) = arr[1] + Sum(arr[2,...,N-1]); ...... Sum(arr[N-1,N-1]) = arr[N-1] + Sum([]); function sum(arr){ function sumRecusion(arr,l){ //基本问题 if(l == arr.length){ return 0; } //把问题转化为更小的问题 return arr[l] + sum(arr,l + 1) } return sumRecusion(arr, 0); } //leekcode203大招写法 /** * Definition for singly-linked list. * function ListNode(val) { * this.val = val; * this.next = null; * } */ /** * @param {ListNode} head * @param {number} val * @return {ListNode} */ var removeElements = function(head, val) { if (head === null ) return head; head.next = removeElements(head.next,val); return head.val == val ? head.next : head; }; //链表类 function LinkedList() { this.head = null; this.length = 0; //向链表尾部追加元素 this.push = push; //从链表中查找某个元素 this.find = find; //在链表中任意一个元素之后插入一个元素 this.insertAfter = insertAfter; //从链表中查找任意元素节点的前一个节点 this.findPrevious = findPrevious; //从链表中删除值为value的元素 this.remove = remove; //返回当前链表的长度 this.size = size; //查找某个元素在链表中的索引值 this.indexof = indexof; //删除链表中第pos个元素 this.removeAt = removeAt; //获取链表中第一个元素 this.getHead = getHead; //创建一个Node辅助类，用来生成节点 function Node(val) { this.val = val; this.next = null; } //向链表尾部追加元素 function push(val) { var node = new Node(val); if (this.head == null) { this.head = node; } else { var current = this.head; while (current.next != null) { current = current.next; } current.next = node; } this.length++; } //在链表中任意一个元素之后插入一个元素 function insertAfter(val, item) { var node = new Node(val); var current = this.find(item); if (current == null) { return console.log('找不到元素'); } node.next = current.next; current.next = node; length++; } //从链表中删除值为value的元素 function remove(val) { var previous = this.findPrevious(val); var current = this.find(val); if (previous == null) { return console.log('链表中找不到被删除的元素'); } previous.next = current.next; length--; } //删除链表中第pos个元素 function removeAt(pos) { if (pos > -1 && pos '); head = head.next; } return str + 'null'; } /** * Definition for singly-linked list. * function ListNode(val) { * this.val = val; * this.next = null; * } */ /** * @param {ListNode} head * @param {number} val * @return {ListNode} */ var removeElements = function(head, val) { if (head === null ) return head; head.next = removeElements(head.next,val); return head.val == val ? head.next : head; }; function depthStr(depth){ let str = ''; for (var i = 0; i /** * Definition for singly-linked list. * function ListNode(val) { * this.val = val; * this.next = null; * } */ /** * @param {ListNode} head * @param {number} val * @return {ListNode} */ var removeElements = function(head, val, depth) { console.log(depthStr(depth) + 'call:remove ' + val + ' in ' + print(head)); if (head === null ) { console.log(depthStr(depth) + 'return: ' + print(head)); return head; } let res = removeElements(head.next,val,depth+1); // console.log('After remove ' + val + ':' + print(res)); let ret; if (head.val == val) { ret = res; }else{ head.next = res; ret = head; } console.log(depthStr(depth) + 'return: ' + print(head)); return ret; }; function depthStr(depth){ let str = ''; for (var i = 0; i 6. 5、树 树是一种数据结构，它是由n（n>=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点： 每个节点有零个或多个子节点； 没有父节点的节点称为根节点； 每一个非根节点有且只有一个父节点； 除了根节点外，每个子节点可以分为多个不相交的子树； 二叉树： 二叉树是树的特殊一种，具有如下特点： 1、每个结点最多有两颗子树，结点的度最大为2。 2、左子树和右子树是有顺序的，次序不能颠倒。 3、即使某结点只有一个子树，也要区分左右子树。 二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化，所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。 扩展： 二分搜索树：二分搜索树的每个节点的值大于其左子树的所有节点的值，小于其右子树的所有节点的值。每一棵子树也是二分搜索树 二分搜索树 二分搜索树 中序遍历：left->now->right，排序. 前序遍历：now->left->right,拷贝，用于已经存在的排序二叉树的复制。 后序遍历：left->right->now，用于文件系统遍历及内存释放 二叉树有很多扩展的数据结构，包括平衡二叉树、红黑树、AVL、Trie树等。 非递归遍历 深度优先遍历：通过栈实现遍历 深度优先遍历：通过队列层序遍历 查找和删除二分搜索树的最小值和最大值 删除二分搜索树的任意节点，就是删除当前节点，并把当前节点的后继（即比该节点大的最小节点）或前驱（即比该节点小的最大节点）作为当前节点，仍然把持当前二分搜索树的性质 集合和映射 7. 6、堆 堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质： 堆中某个节点的值总是不大于或不小于其父节点的值； 堆总是一棵完全二叉树。 将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。 堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。 (ki = k2i,ki >= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下： 因为堆有序的特点，一般用来做数组中的排序，称为堆排序。 7.1. 7、hash https://planetmath.org/goodhashtableprimes 链地址法 powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/javascript 数据结构与算法.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/javascript 数据结构与算法.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"数据结构与算法/priorityQueue and heap.html":{"url":"数据结构与算法/priorityQueue and heap.html","title":"priorityQueue and heap","keywords":"","body":"1. 优先队列(PriorityQueue)和堆(Heap)1.1.1. 堆的基础表示1.1.2. 向堆中添加元素和Sift Up1.1.3. 取出堆中最大元素和Sift Down1.1.4. Heapify操作1. 优先队列(PriorityQueue)和堆(Heap) 优先队列 普通队列: 先进先出;后进后出 优先队列:出队顺序和入队顺序无关;优先级高者早出队和优先级相关 （医院，患者优先级） 操作系统中任务的调度，动态选择优先级最高的任务执行。如果我们的任务不是动态，那么我们只需要一个排序算法就好了。 处理旧任务的同时也会有新任务不断的加入，因此此处的关键词(动态) 不能一开始确定有多少个任务，而是动态的不停有新元素入队，也有旧元素出队，因此我们要使用优先队列。 优先队列的接口（本质依然是个队列）: ​ 出队，入队，获取队首元素，获取队列大小，判断队列是否为空。 对于我们的优先队列来说，实现这些接口的时候，具体这些接口实现出来的功能会有区别。最大的区别在于出队和队首元素是谁这两个操作。此时出队元素应该是优先级最高的元素，队首的元素也是优先级最高的元素，而不是最早进入的那个。 可以使用不同的底层实现: 普通线性结构： 入队O(1)，查询比较优先级需要O(n) 。 顺序线性结构: 维持顺序O(n) 出队O(1) 堆的入队操作和出队操作都可以做到O(logn)级别。 1.1.1. 堆的基础表示 通常见到O(logn)都与树有关，不一定是显式的构造了一棵树 堆本身也是一棵树，二叉堆(Binary Heap) 二叉堆是一棵完全二叉树。 满二叉树概念: 除了叶子节点，所有的节点的左右孩子都不为空，就是一棵满二叉树，如下图。 所有的节点都即拥有左孩子，又拥有右孩子，就是一棵满二叉树。 如上图是一棵完全二叉树，特点: 不一定是一个满二叉树，但它不满的那部分一定在右下侧。满二叉树中有多少层对应有多少节点变成了一个固定的事情。那我们要加入的节点并不是对应一整层，那么上一层满了，下一层从左到右依次排开。 最下面一层肯定都是叶子节点，上面一层即使有叶子节点，也一定分布在右侧。完全二叉树:把元素顺序按层排列成树的形状 二叉堆的性质 堆中某个节点的值总是不大于其父节点的值。(所有节点的值都大于等于它的孩子节点的值) 这样得到的是最大堆，相应的我们也可以定义出最小堆。某种程度上，最大堆和最小堆是可以统一的，因为什么是大，什么是小是我们可以定义的。 只保证自己的父亲节点比自己大，但是节点的层次和节点的大小之间是没有必然联系的。比如，第二层的13，层数比第三层的任何一个元素都小，但是值却并不小于。 因为完全二叉树，按顺序码放。 我们就可以用过这样的一个数组来表示这个完全二叉树。数组存储节点i的左右孩子的规律。 parent(i) = i/2 left child(i) = 2*i; right child(i) = 2*i+1; 可以使用数学归纳法来证明上面的关系对于完全二叉树是成立的。一般数组存储二叉堆由1开始，公式如上。如果从0开始，会有一个偏移。 parent(i) = (i-1)/2 left child(i) = 2*i+1; right child(i) = 2*i+2; 可以通过该图验证公式。 1.1.2. 向堆中添加元素和Sift Up 从用户的角度是添加元素，从堆内部实现角度涉及堆中一个非常常见的操作 Sift Up. 堆中元素上浮的一个过程。 加入元素是非常简单的，直接添加进数组即可，但是可以看到，此时的树结构就不满足最大堆的要求: 父亲最大，16的儿子比16还大了。因此52要执行上浮操作。一个好好的堆怎么就出问题了呢？唯一的原因只会出现在52这个节点的新增，因此只需要将52不断的与它的父亲节点作比较，如果父亲小，就跟父亲互换，一直上浮互换，直到52不比自己的父亲大。 这里52 和 16 和 41 进行了两次互换操作。 1.1.3. 取出堆中最大元素和Sift Down 最大堆只能取最大的那个元素，数组为0的位置，拿出去之后。将两棵子树合并的操作比较麻烦。 我们可以将最后一个元素填充到堆顶，然后不断的下沉这个元素。每次都与两个孩子进行比较，选择两个孩子中最大的那个元素，如果两个孩子中最大的那个元素比它自己还要大的话，那么它自己就和两个孩子中最大的那个交换位置。 1.1.4. Heapify操作 heapify: 将任意数组整理成堆的形状 Heapify是倒着从最后一个元素的父亲节点开始倒着遍历进行siftdown操作。 Heapify的算法复杂度 将n个元素逐个插入到一个空堆中，算法复杂度是O(nlogn) heapify的过程，算法复杂度为O(n) powered by GitbookUPDATE TIME: 2020-11-23 11:53:52 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/priorityQueue and heap.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/数据结构与算法/priorityQueue and heap.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"GLOSSARY.html":{"url":"GLOSSARY.html","keywords":"","body":"powered by GitbookUPDATE TIME: 2020-06-20 19:33:35 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/GLOSSARY.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"497cd5036bdc5a0166e1\",\"clientSecret\":\"81533b88196ad22d16417310b5fdaedc5a59daa4\",\"repo\":\"loveagri.github.io\",\"owner\":\"loveagri\",\"admin\":[\"loveagri\"],\"id\":\"/GLOSSARY.html\",\"distractionFreeMode\":false});gitalk.render(\"gitalk-container\"); console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer} window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "}}